<?phpclass Training extends TrainingAppModel {    var $name = 'Training';    public $actsAs = array('Containable', 'Search.Searchable',    );    // var $actsAs 		= 	array('Tree');    public $filterArgs = array(        array('name' => 'name', 'type' => 'string')    );    public $validate = array();    public $belongsTo = array(        "Created" => array(            "className" => "User",            "foreignKey" => "created_by",            'fields' => array("id", "firstname", "lastname"),        ),        "Modified" => array(            "className" => "User",            "foreignKey" => "modified_by",            'fields' => array("id", "firstname", "lastname"),        ),        "State" => array(            "className" => "State",            "foreignKey" => "state_id",            'fields' => array("id", "name"),        ),        "TrainingCategory" => array(            "className" => "TrainingCategory",            "foreignKey" => "training_category_id",            'fields' => array("id", "title"),        ),    );    public $hasMany = array(        'LanguageMapTraining',        'TrainingEducation',    );    public function validateAdd() {        $my_validate = array(            'code' => array(                'valid' => array(                    'rule' => 'notEmpty',                    'required' => true,                    'allowEmpty' => false,                    'on' => 'create',                    'message' => 'Please enter code .'                ),                'mustUnique' => array(                    'rule' => 'isUnique',                    'message' => __('This value is already exist.'),                )            )        );        $this->validate = $my_validate;        return $this->validates();    }    public function validateUpdate() {        $my_validate = array(            'code' => array(                'valid' => array(                    'rule' => 'notEmpty',                    'required' => true,                    'allowEmpty' => false,                    'on' => 'update',                    'message' => 'Please enter code .'                ),                'mustUnique' => array(                    'rule' => 'isUnique',                    'message' => __('This value is already exist.'),                )            )        );        $this->validate = $my_validate;        return $this->validates();    }}?>