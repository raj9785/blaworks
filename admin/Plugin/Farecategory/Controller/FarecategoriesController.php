<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 *//** * Farecategories Users Controller * * @package Farecategories * @subpackage users.controllers */class FarecategoriesController extends FarecategoryAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Farecategories';    /**     * Helpers     *     * @var array     */    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    //public $paginate = array('limit'=>5,'order'=>'Category.id','page'=>1);    /**     * Components     *     * @var array     */    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(	array('field' => 'name', 'type' => 'value')    );    // public $presetVars = 	true;    public function beforeFilter() {	parent::beforeFilter();	$this->set('model', $this->modelClass);    }    /**     * Admin Index     *     * @return void     */    function index($parent_id = 0) {       $this->set('tab_open', 'fares');	// Breadcrumb	$pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');	$breadcrumb = array('pages' => $pages, 'active' => __('Fare Categories', true));	$this->set('pageHeading', 'Fare Categories');	$this->set('breadcrumb', $breadcrumb);	//check limit for show records on page	if (!empty($this->data) && isset($this->data['recordsPerPage'])) {	    $limitValue = $limit = $this->data['recordsPerPage'];	    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);	} else {	    $this->Prg->commonProcess();	}	//set the limitvalue for records	$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');	$this->set('limitValue', $limitValue);	$this->set('limit', $limit);	$this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;	$parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);	//$parsedConditions['page_type']	=	'farecategories';	$this->paginate = array(	    'conditions' => array($parsedConditions),	    'limit' => $limit,	    'order' => array($this->modelClass . '.created' => 'desc')	);	$this->set('result', $this->paginate());        $this->set('title_for_layout', 'Booking Types List');    }    function add($parent_id = 0) {	// Breadcrumb	$pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');	$pages[__('Fare Categories', true)] = array('plugin' => 'farecategory', 'controller' => 'farecategories', 'action' => 'index');	$breadcrumb = array('pages' => $pages, 'active' => __('Add Fare Category'));	$pageHeading = 'Article Fare Category';	$this->set('pageHeading', $pageHeading);	$this->set('breadcrumb', $breadcrumb);	//Read values from database and edit  the record	if (!empty($this->data)) {	    $this->{$this->modelClass}->set($this->data);	    if ($this->{$this->modelClass}->validateAdd()) {		if ($this->{$this->modelClass}->save($this->data)) {		    $this->Session->setFlash(__('Fare category has been added.'), 'success');		    $this->redirect(array('action' => 'index'));		}	    } else {		$errors = $this->{$this->modelClass}->validationErrors;	    }	}        $this->set('title_for_layout', 'Booking Types List');    }    function edit($id = null) {//id not found        $this->set('tab_open', 'fares');	$pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');	$breadcrumb = array('pages' => $pages, 'active' => __('Article Fare Category', true));	$this->set('breadcrumb', $breadcrumb);	$pageHeading = 'Article Fare Category';	$this->set('pageHeading', $pageHeading);	if (!isset($id) || $id == '') {	    $this->Session->setFlash('Invalid Access.', 'error');	    $this->redirect(array('controller' => 'datas', 'action' => 'index'));	}// set model by id & send id to view	$this->set('id', $id);	$user = $this->{$this->modelClass}->findById($id);	$this->{$this->modelClass}->set($user);//Read values from database and edit  the record	//first time	if (empty($this->data)) {	    $this->data = $this->{$this->modelClass}->read();	}	//second time	else {		$this->request->data[$this->modelClass]['modified'] = date('y-m-d h:m:s');	    //set model & save data & setFlash session	    if ($this->{$this->modelClass}->validateAdd()) {		$this->{$this->modelClass}->set($this->data);		if ($this->{$this->modelClass}->save($this->data)) {		    $this->Session->setFlash('Fare category has been updated.', 'success');		    $this->redirect(array('action' => 'index'));		}	    } else {		$errors = $this->{$this->modelClass}->validationErrors;	    }	}    }		public function deleterow() {		if ($this->request->is('Ajax')) {			if ($this->data['id'] != null) {			$data = $this->{$this->modelClass}->findById($this->data['id']);			if (!empty($data)) {				if ($this->{$this->modelClass}->delete($this->data['id'])) {				echo json_encode(array('succ' => 1, 'msg' => 'Record has been deleted'));				die;				}			}			}		}	exit;    }        public function change_status_active() {	if ($this->request->is('Ajax')) {	    if ($this->data['id'] != null) {		$data['status'] = 1;		$this->{$this->modelClass}->id = $this->data['id'];		$this->{$this->modelClass}->save($data, false);		echo json_encode(array('succ' => 1, 'msg' => 'Record Status has been changed.'));		die;	    }	}	exit;    }    public function change_status_inactive() {	if ($this->request->is('Ajax')) {	    if ($this->data['id'] != null) {		$data['status'] = 0;		$this->{$this->modelClass}->id = $this->data['id'];		$this->{$this->modelClass}->save($data, false);		echo json_encode(array('succ' => 1, 'msg' => 'Record Status has been changed.'));		die;	    }	}	exit;    }		    function admin_delete() {	if ($this->request->is('Ajax')) {	    if ($this->data['id'] == null) {		echo 'error';	    } else {		$this->{$this->modelClass}->delete($this->data['id']);		echo 'Success';	    }	}	exit;    }    function details($id = 0) {	$this->set('pageHeading', 'Fare category details page');	if (!$id) {	    $this->Session->setFlash("Fare category doesn't exists in system.");	    $this->redirect(array('action' => 'index'));	} else {	    $results = $this->{$this->modelClass}->findById($id);	    $this->set('category_result', $results);	}    }    /*     * **************************************End of the code**************************************************** */}