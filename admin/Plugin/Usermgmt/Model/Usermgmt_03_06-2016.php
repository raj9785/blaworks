<?phpclass Usermgmt extends UsermgmtAppModel {    var $name = 'User';    var $actsAs = array('Search.Searchable');    // var $actsAs 		= 	array('Tree');    // public $filterArgs 	= 	array(    // 'name' => array('type' => 'like')    // );     public $hasMany = array('OperationCity', 'CompanyInformation', 'DriverInformation',	'Company' => array(	    'className' => 'Company',	    'foreignKey' => 'user_id'	),    );    public $useTable = "users";    public $filterArgs = array(	array('name' => 'email', 'type' => 'string'),	array('name' => 'firstname', 'type' => 'string'),	array('name' => 'username', 'type' => 'string'),	array('name' => 'mobile', 'type' => 'string'),	array('name' => 'user_role_id', 'type' => 'string'),	array('name' => 'status', 'type' => 'query', 'method' => 'filterQuery')    );    public function filterQuery($data = array()) {	if (!isset($data['status'])) {	    return array();	}	$query = '%' . $data['status'] . '%';	return array(	    'OR' => array(		'Usermgmt.status LIKE' => $query	    )	);    }    /* public $hasMany = array(      'Folder'      ); */    public $validate = array(	'email' => array(	    'mustNotEmpty' => array(		'rule' => 'notEmpty',		'on' => 'create',		'message' => 'Please enter email',		'last' => true),	    'mustBeEmail' => array(		'rule' => array('email'),		'on' => 'create',		'message' => 'Please enter valid email',		'last' => true),	    'mustUnique' => array(		'rule' => 'isUnique',		'on' => 'create',		'message' => 'This email is already registered',	    )	),	'firstname' => array(	    'valid' => array(		'rule' => 'notEmpty',		'required' => true,		'allowEmpty' => false,		'message' => 'Please enter a value for first name.'	    )	),	'password' => array(	    'valid' => array(		'rule' => 'notEmpty',		'required' => true,		'allowEmpty' => false,		'message' => 'Please enter a value for password.'	    )	),	'confirm_password' => array(	    'valid' => array(		'rule' => 'notEmpty',		'required' => true,		'allowEmpty' => false,		'message' => 'Please enter a value for confirm password.'	    ),	    'duplicate2' => array(		'rule' => 'matchpassword',		'on' => 'create',		'message' => 'Password must be same.'	    )	),    );    function addDriver() {	$validate1 = array(	    'firstname' => array(		'notEmpty' => array(		    'rule' => array('notEmpty'),		    'message' => 'First Name can\'t be empty',		    'allowEmpty' => false		),	    ),	    'lastname' => array(		'notEmpty' => array(		    'rule' => array('notEmpty'),		    'message' => 'Last Name can\'t be empty',		    'allowEmpty' => false		),	    ),	    'mobile' => array(		'notEmpty' => array(		    'rule' => array('notEmpty'),		    'message' => 'Mobile number can\'t be empty',		    'allowEmpty' => false		),		'duplicate' => array(		    'rule' => 'isUnique',		    'on' => 'create',		    'message' => 'Mobile already registered, please use different number',		),	    ),	   	);	$this->validate = $validate1;	return $this->validates();    }    function EditValidate() {	$validate1 = array(	    'firstname' => array(		'mustNotEmpty' => array(		    'rule' => 'notEmpty',		    'message' => 'Please enter first name')	    ),	    'email' => array(		'mustNotEmpty' => array(		    'rule' => 'notEmpty',		    'message' => 'Please enter email',		    'on' => 'create',		    'last' => true),		'mustBeEmail' => array(		    'rule' => array('email'),		    'message' => 'Please enter valid email',		    'on' => 'create',		    'last' => true),		'mustUnique' => array(		    'rule' => 'isUnique',		    'message' => 'This email is already registered',		    'on' => 'create'		)	    ),	    'image' => array(		'rule' => array('extension', array('gif', 'jpeg', 'png', 'jpg', 'pjpeg')),		'message' => 'Please upload a valid image.',		'on' => 'create'	    )	);	$this->validate = $validate1;	return $this->validates();    }    function EmployeeValidate() {	$validate1 = array(	    'firstname' => array(		'mustNotEmpty' => array(		    'rule' => 'notEmpty',		    'message' => 'Please enter first name')	    )	);	$this->validate = $validate1;	return $this->validates();    }    function ChangePassword() {	$validate1 = array(	    'password' => array(		'valid' => array(		    'rule' => 'notEmpty',		    'required' => true,		    'allowEmpty' => false,		    'message' => 'Please enter a value for password.'		)	    ),	    'confirm_password' => array(		'valid' => array(		    'rule' => 'notEmpty',		    'required' => true,		    'allowEmpty' => false,		    'message' => 'Please enter a value for confirm password.'		),		'duplicate2' => array(		    'rule' => 'matchpassword',		    'on' => 'create',		    'message' => 'Password must be same.'		)	    )	);	$this->validate = $validate1;	return $this->validates();    }    public function matchpassword() {	$password = $this->data[$this->alias]['password'];	$temppassword = $this->data[$this->alias]['confirm_password'];	if ($password == $temppassword)	    return true;	else	    return false;    }}?>