<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 *//** * Categories Users Controller * * @package Categories * @subpackage users.controllers */class UsermgmtController extends UsermgmtAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Usermgmt';    /**     * Helpers     *     * @var array     */    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');//public $paginate = array('limit'=>5,'order'=>'Category.id','page'=>1);    /**     * Components     *     * @var array     */    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(        array('field' => 'email', 'type' => 'value'),        array('field' => 'firstname', 'type' => 'value'),        array('field' => 'username', 'type' => 'value'),        array('field' => 'mobile', 'type' => 'value'),        array('field' => 'user_role_id', 'type' => 'value'),        array('field' => 'status', 'type' => 'value')    );//public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->loadModel("Farecategory");        $farecategory = $this->Farecategory->find("list", array("conditions" => array("status" => 1)));        $this->set("farecategory", $farecategory);//pr($this->params);    }// Load Company States    function get_state() {// Load Fare Settings        $this->layout = false;        $subcategory = array();        if ($this->request->is('Ajax')) {            if ($this->data) {                $this->loadModel("State");                $subcategory = $this->State->find('list', array(                    'conditions' => array(                        'State.country_id' => $this->data['cat_id'],                        'State.status' => 'A'                    ),                    'fields' => array('State.id', 'State.name'),                ));                /* $data = $this->City->query("SELECT cities.id,cities.name FROM operation_cities                  INNER JOIN cities                  ON                  operation_cities.city_id = cities.id                  WHERE                  operation_cities.company_id = '". $this->data['company_id']."'                  AND                  operation_cities.state_id = '". $this->data['cat_id']."'");                  pr($data); */            }            echo json_encode($subcategory);        }        die;    }// Load Company City    function get_city() {// Load Fare Settings        $this->layout = false;        $subcategory = array();        if ($this->request->is('Ajax')) {            if ($this->data) {                $this->loadModel("City");                $subcategory = $this->City->find('list', array(                    'conditions' => array(                        'City.state_id' => $this->data['cat_id'],                        'City.status' => 'A'                    ),                    'fields' => array('City.id', 'City.name'),                ));                /* $data = $this->City->query("SELECT cities.id,cities.name FROM operation_cities                  INNER JOIN cities                  ON                  operation_cities.city_id = cities.id                  WHERE                  operation_cities.company_id = '". $this->data['company_id']."'                  AND                  operation_cities.state_id = '". $this->data['cat_id']."'");                  pr($data); */            }            echo json_encode($subcategory);        }        die;    }    function get_company() {// Load Fare Settings        $this->layout = false;        $subcategory = array();        if ($this->request->is('Ajax')) {            if ($this->data) {                $this->loadModel("Company");                $subcategory = $this->Company->find('list', array(                    'conditions' => array(                        'Company.user_id' => $this->data['cat_id'],                        'Company.status' => 1                    ),                    'fields' => array('Company.id', 'Company.name'),                ));            }            echo json_encode($subcategory);        }        die;    }    function get_city_state() {// Load Fare Settings        $this->layout = false;        $subcategory = array();        if ($this->request->is('Ajax')) {            if ($this->data) {                $this->loadModel("City");                $subcategory = $this->City->find('list', array(                    'joins' => array(                        array(                            'table' => 'operation_cities',                            'alias' => 'OperationCity',                            'type' => 'INNER',                            'conditions' => array(                                'OperationCity.city_id = City.id'                            )                        )                    ),                    'conditions' => array(                        'OperationCity.state_id' => $this->data['cat_id']                    ),                    'fields' => array('City.id', 'City.name'),                ));                /* $data = $this->City->query("SELECT cities.id,cities.name FROM operation_cities                  INNER JOIN cities                  ON                  operation_cities.city_id = cities.id                  WHERE                  operation_cities.company_id = '". $this->data['company_id']."'                  AND                  operation_cities.state_id = '". $this->data['cat_id']."'");                  pr($data); */            }            echo json_encode($subcategory);        }        die;    }    function get_airport_train() {// Load Fare Settings        $this->layout = false;        $subcategory = array();        if ($this->request->is('Ajax')) {            if ($this->data) {                $this->loadModel("CityAirportTrain");                $subcategory = $this->CityAirportTrain->find('all', array(                    'conditions' => array(                        'CityAirportTrain.city_id' => $this->data['cat_id']                    ),                    'fields' => array('id', 'airport_address', 'train_address'),                ));//$log = $this->CityAirportTrain->getDataSource()->getLog(false, false); //debug($log);exit();                /* $data = $this->City->query("SELECT cities.id,cities.name FROM operation_cities                  INNER JOIN cities                  ON                  operation_cities.city_id = cities.id                  WHERE                  operation_cities.company_id = '". $this->data['company_id']."'                  AND                  operation_cities.state_id = '". $this->data['cat_id']."'");                  pr($data); */            }            echo json_encode($subcategory);            exit();        }        die;    }    /**     *     * Get All Countries List     *     * @return json     */    function get_country() {        $this->layout = false;        $subcategory = array();        if (!empty($this->data)) {            $this->loadModel('Country');            $subcategory = $this->Country->find('list', array(                'joins' => array(                    array(                        'table' => 'companies',                        'alias' => 'Company',                        'type' => 'INNER',                        'conditions' => array(                            'Company.country_id = Country.id'                        )                    )                ),                'conditions' => array(                    'Company.id' => $this->data['cat_id']                ),                'fields' => array('Country.id', 'Country.name'),            ));        }        echo json_encode($subcategory);        die;    }    /**     * Admin Index     *     * @return void     */    function index() {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Employee / CEO'));        $this->set('breadcrumb', $breadcrumb);        if (!empty($this->data) && isset($this->data['recordsPerPage'])) {            $limitValue = $limit = $this->data['recordsPerPage'];            $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);        } else {// pr($this->data);            $this->Prg->commonProcess();        }        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Individual / Company');        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $parsedConditions['user_role_id'] = array(2, 5);        $parsedConditions['id !='] = 1;        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);        $this->set('result', $this->paginate());    }    function customer() {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Passenger'));        $this->set('breadcrumb', $breadcrumb);        if (!empty($this->data)) {            if (!empty($this->data['id'])) {                $submit_aciton = $this->data['Usermgmt']['my_action'];                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {//$this->Usermgmt->delete($mainid);                        if ($submit_aciton == 'delete') {                            $this->Usermgmt->delete($mainid);                            $message = "Deleted Successfully";                        }                        if ($submit_aciton == 'active') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '1'), array('Usermgmt.id' => $mainid));                            $message = "Activated Successfully";                        }                        if ($submit_aciton == 'inactive') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '0'), array('Usermgmt.id' => $mainid));                            $message = "Inactivated Successfully";                        }                    }                }                $this->Session->setFlash($message, 'default', array('class' => 'success'));            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {                    $limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {// pr($this->data);                    $this->Prg->commonProcess();                }            }        }        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Passenger');        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $parsedConditions['user_role_id'] = 3;        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);        $this->set('result', $this->paginate());    }    function employee() {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Employee / CEO'));        $this->set('breadcrumb', $breadcrumb);        if (!empty($this->data)) {            if (!empty($this->data['id'])) {                $submit_aciton = $this->data['Usermgmt']['my_action'];                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {                        if ($submit_aciton == 'delete') {                            $this->Usermgmt->delete($mainid);                            $message = "Deleted Successfully";                        }                        if ($submit_aciton == 'active') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '1'), array('Usermgmt.id' => $mainid));                            $message = "Activated Successfully";                        }                        if ($submit_aciton == 'inactive') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '0'), array('Usermgmt.id' => $mainid));                            $message = "Inactivated Successfully";                        }                    }                }                $this->Session->setFlash($message, 'default', array('class' => 'success'));            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {                    $limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {// pr($this->data);                    $this->Prg->commonProcess();                }            }        }        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Employee / CEO');        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $parsedConditions['user_role_id'] = 6;        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);        $this->set('result', $this->paginate());    }    function individual() {        $this->set('tab_open', 'partners');        $this->loadModel("Company");        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Individual'));        $this->set('breadcrumb', $breadcrumb);        $limitValue = $limit = 25;        if (!empty($this->data)) {            if (!empty($this->data['id'])) {                $submit_aciton = $this->data['Usermgmt']['my_action'];                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {                        if ($submit_aciton == 'delete') {                            $this->Usermgmt->delete($mainid);                            $message = "Deleted Successfully";                        }                        if ($submit_aciton == 'active') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '1'), array('Usermgmt.id' => $mainid));                            $message = "Activated Successfully";                        }                        if ($submit_aciton == 'inactive') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '0'), array('Usermgmt.id' => $mainid));                            $message = "Inactivated Successfully";                        }                    }                }                $this->Session->setFlash($message, 'default', array('class' => 'success'));            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {                    $limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {// pr($this->data);                    $this->Prg->commonProcess();                }            }        }//$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $conditions = array();        array_push($conditions, array('user_role_id' => array(2, 5)));        if (!empty($this->request->query)) {            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {                array_push($conditions, array('Usermgmt.state_id' => $this->request->query['state_id']));                $this->set("state_id", $this->request->query['state_id']);            }            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));                $this->set("city_id", $this->request->query['city_id']);            }//	    if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {//		array_push($conditions, array(//		    'OR' => array(//			'LOWER(Usermgmt.firstname) LIKE' => "%" . strtolower($this->request->query['firstname']) . "%",//			'LOWER(Usermgmt.lastname) LIKE' => "%" . strtolower($this->request->query['firstname']) . "%",//			"LOWER(CONCAT_WS(' ',Usermgmt.firstname,Usermgmt.lastname)) LIKE" => "%" . strtolower($this->request->query['firstname']) . "%",//		    )//		));//		$this->set("firstname", $this->request->query['firstname']);//	    }            if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {                array_push($conditions, array('Usermgmt.id' => $this->request->query['firstname']));                $this->set("firstname", $this->request->query['firstname']);            }            if (isset($this->request->query['uniqid']) && $this->request->query['uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid LIKE' => "%" . $this->request->query['uniqid'] . "%"));                $this->set("uniqid", $this->request->query['uniqid']);            }            if (isset($this->request->query['mobile']) && $this->request->query['mobile'] != "") {                array_push($conditions, array('Usermgmt.mobile' => $this->request->query['mobile']));                $this->set("mobile", $this->request->query['mobile']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                array_push($conditions, array('Usermgmt.status' => $this->request->query['status']));                $this->set("status", $this->request->query['status']);            }            if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                array_push($conditions, array('(date_format(Usermgmt.created, "%Y-%m-%d") >= ? AND date_format(Usermgmt.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));            } else            if (@$this->request->query['from_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));            } else            if (@$this->request->query['to_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));            }            $this->set("from_date", $this->request->query['from_date']);            $this->set("to_date", $this->request->query['to_date']);        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);//	$this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Individual / Company');////	$this->{$this->modelClass}->hasOne = array("Company" => array("className" => "Company", "foreignKey" => "user_id", 'dependent' => true));////	$parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);////	$parsedConditions['user_role_id'] = array(2, 5);//pr($conditions);//pr($conditions); exit;        $this->{$this->modelClass}->belongsTo = array(            'State' => array(                'className' => 'State',                'foreignKey' => 'state_id'            ),            'City' => array(                'className' => 'City',                'foreignKey' => 'city_id'        ));        $this->paginate = array(            'conditions' => array($conditions),            'fields' => array(                'Usermgmt.status', 'Usermgmt.created', 'Usermgmt.firstname', 'Usermgmt.lastname', 'Usermgmt.email', 'Usermgmt.address',                'Usermgmt.mobile', 'Usermgmt.image', 'Usermgmt.uniqid', 'Usermgmt.type', 'Usermgmt.state_id', 'Usermgmt.city_id', 'State.name', 'City.name'            ),            'recursive' => 5,            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);// pr($this->paginate()); exit;        $this->set('result', $this->paginate());        $this->loadModel("State");        $country = $this->State->find("list");        $this->set("states", $country);        $this->loadModel("City");        $city = $this->City->find("list");        $this->set("city", $city);        $this->set('page', $page);// pr($this->paginate());//  die; //        $count_new_bookings = $this->Usermgmt->find('count', array(//            'conditions' => $conditions//        ));//        $this->set("count_new_bookings", $count_new_bookings);        $this->set('title_for_layout', 'Vendor Partners');        $this->loadModel("Company");//$company = $this->Company->find("list", array("conditions" => array("status" => 1)));        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'order' => array('Company.name' => 'asc'),            'fields' => array(                'Company.id', 'User.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['User']['id']] = $vl['Company']['name'] . ' (' . $vl['User']['uniqid'] . ')';            }        }        $this->set("company", $companyarray);    }    public function getpdf($value) {        $this->layout = false;        $value = base64_decode(base64_decode($value));        $value = json_decode($value, true);        $conditions = array();        $limitValue = $limit = 25;//$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $conditions = array();        array_push($conditions, array('user_role_id' => array(2, 5)));        if (!empty($this->request->query)) {            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {                array_push($conditions, array('Usermgmt.state_id' => $this->request->query['state_id']));                $this->set("state_id", $this->request->query['state_id']);            }            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));                $this->set("city_id", $this->request->query['city_id']);            }            if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {                array_push($conditions, array('Usermgmt.id' => $this->request->query['firstname']));//                array_push($conditions, array(//                    'OR' => array(//                        'LOWER(Usermgmt.firstname) LIKE' => "%" . strtolower($this->request->query['firstname']) . "%",//                        'LOWER(Usermgmt.lastname) LIKE' => "%" . strtolower($this->request->query['firstname']) . "%",//                        "LOWER(CONCAT_WS(' ',Usermgmt.firstname,Usermgmt.lastname)) LIKE" => "%" . strtolower($this->request->query['firstname']) . "%",//                    )//                ));                $this->set("firstname", $this->request->query['firstname']);            }            if (isset($this->request->query['uniqid']) && $this->request->query['uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid LIKE' => "%" . $this->request->query['uniqid'] . "%"));                $this->set("uniqid", $this->request->query['uniqid']);            }            if (isset($this->request->query['mobile']) && $this->request->query['mobile'] != "") {                array_push($conditions, array('Usermgmt.mobile' => $this->request->query['mobile']));                $this->set("mobile", $this->request->query['mobile']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                array_push($conditions, array('Usermgmt.status' => $this->request->query['status']));                $this->set("status", $this->request->query['status']);            }            if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                array_push($conditions, array('(date_format(Usermgmt.created, "%Y-%m-%d") >= ? AND date_format(Usermgmt.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));            } else            if (@$this->request->query['from_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));            } else            if (@$this->request->query['to_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));            }            $this->set("from_date", $this->request->query['from_date']);            $this->set("to_date", $this->request->query['to_date']);        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->{$this->modelClass}->belongsTo = array(            'State' => array(                'className' => 'State',                'foreignKey' => 'state_id'            ),            'City' => array(                'className' => 'City',                'foreignKey' => 'city_id'        ));        $result = $this->Usermgmt->find('all', array(            'conditions' => array($conditions),            'fields' => array(                'Usermgmt.status', 'Usermgmt.created', 'Usermgmt.firstname', 'Usermgmt.lastname', 'Usermgmt.email', 'Usermgmt.address',                'Usermgmt.mobile', 'Usermgmt.image', 'Usermgmt.uniqid', 'Usermgmt.type', 'Usermgmt.state_id', 'Usermgmt.city_id', 'State.name', 'City.name'            ),            'recursive' => 5,            'order' => array($this->modelClass . '.created' => 'desc')        ));        //$result = $this->paginate();        $this->set('page', $page);        $count_new_bookings = count($result);//        $count_new_bookings = $this->Usermgmt->find('count', array(//            'conditions' => $conditions//        ));        $this->set("count_new_bookings", $count_new_bookings);//pr($result);exit;        $header = array('S.No.', 'Vendor ID', 'Vendor Name', 'Company Name', 'Mobile No.', 'Email ID', 'State', 'City', 'Registered On', 'Status');        $result_value = array();        $i = 1;        if (!empty($result)) {            $header = array('S.No.', 'Vendor ID', 'Vendor Name', 'Company Name', 'Mobile No.', 'Email ID', 'State', 'City', 'Registered On', 'Status');            if ($page == 0 || $page == 1) {                $i = $count_new_bookings;            } else {                $i = $count_new_bookings - $limit * ($page - 1);            }            foreach ($result as $key => $res) {                if ($res['Usermgmt']['status'] == 1) {                    $chang = "Active";                } else {                    $chang = "Inactive";                }                $result_value[$key]['S.No.'] = $i;                $result_value[$key]['Vendor ID'] = $res['Usermgmt']['uniqid'];                $result_value[$key]['Vendor Name'] = $res['Usermgmt']['firstname'] . " " . $res['Usermgmt']['lastname'];                $result_value[$key]['Company Name'] = ((isset($res['Company'][0]['name']) && $res['Company'][0]['name'] != NULL) ? $res['Company'][0]['name'] : '---');                $result_value[$key]['Mobile No.'] = $res['Usermgmt']['mobile'] ? $res['Usermgmt']['mobile'] : "---";                $result_value[$key]['Email ID'] = $res['Usermgmt']['email'] ? $res['Usermgmt']['email'] : "---";                $result_value[$key]['state'] = isset($res['OperationCity'][0]['City']['State']['name']) ? $res['OperationCity'][0]['City']['State']['name'] : '----';                $result_value[$key]['city'] = isset($res['OperationCity'][0]['City']['name']) ? $res['OperationCity'][0]['City']['name'] : '----';                $result_value[$key]['Registered On'] = date(DATE_FORMAT, strtotime($res['Usermgmt']['created']));                $result_value[$key]['Status'] = $chang;                $i--;            }        }        $this->export_file($header, $result_value, 'pdf');        die;    }    public function getcsv($value) {        $this->layout = false;        $value = base64_decode(base64_decode($value));        $value = json_decode($value, true);        $conditions = array();        $conditions = array();        $limitValue = $limit = 25;//$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $conditions = array();        array_push($conditions, array('user_role_id' => array(2, 5)));        if (!empty($this->request->query)) {            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {                array_push($conditions, array('Usermgmt.state_id' => $this->request->query['state_id']));                $this->set("state_id", $this->request->query['state_id']);            }            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));                $this->set("city_id", $this->request->query['city_id']);            }            if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {//                array_push($conditions, array(//                    'OR' => array(//                        'LOWER(Usermgmt.firstname) LIKE' => "%" . strtolower($this->request->query['firstname']) . "%",//                        'LOWER(Usermgmt.lastname) LIKE' => "%" . strtolower($this->request->query['firstname']) . "%",//                        "LOWER(CONCAT_WS(' ',Usermgmt.firstname,Usermgmt.lastname)) LIKE" => "%" . strtolower($this->request->query['firstname']) . "%",//                    )//                ));                array_push($conditions, array('Usermgmt.id' => $this->request->query['firstname']));                $this->set("firstname", $this->request->query['firstname']);            }            if (isset($this->request->query['uniqid']) && $this->request->query['uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid LIKE' => "%" . $this->request->query['uniqid'] . "%"));                $this->set("uniqid", $this->request->query['uniqid']);            }            if (isset($this->request->query['mobile']) && $this->request->query['mobile'] != "") {                array_push($conditions, array('Usermgmt.mobile' => $this->request->query['mobile']));                $this->set("mobile", $this->request->query['mobile']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                array_push($conditions, array('Usermgmt.status' => $this->request->query['status']));                $this->set("status", $this->request->query['status']);            }            if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                array_push($conditions, array('(date_format(Usermgmt.created, "%Y-%m-%d") >= ? AND date_format(Usermgmt.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));            } else            if (@$this->request->query['from_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));            } else            if (@$this->request->query['to_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));            }            $this->set("from_date", $this->request->query['from_date']);            $this->set("to_date", $this->request->query['to_date']);        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->{$this->modelClass}->belongsTo = array(            'State' => array(                'className' => 'State',                'foreignKey' => 'state_id'            ),            'City' => array(                'className' => 'City',                'foreignKey' => 'city_id'        ));        $result = $this->Usermgmt->find('all', array(            'conditions' => array($conditions),            'fields' => array(                'Usermgmt.status', 'Usermgmt.created', 'Usermgmt.firstname', 'Usermgmt.lastname', 'Usermgmt.email', 'Usermgmt.address',                'Usermgmt.mobile', 'Usermgmt.image', 'Usermgmt.pen_card', 'Usermgmt.uniqid', 'Usermgmt.type', 'Usermgmt.state_id', 'Usermgmt.city_id', 'State.name', 'City.name'            ),            'recursive' => 5,            'order' => array($this->modelClass . '.created' => 'desc')        ));        //$result = $this->paginate();        $this->set('page', $page);        $count_new_bookings = $this->Usermgmt->find('count', array(            'conditions' => $conditions        ));        $this->set("count_new_bookings", $count_new_bookings);//pr($result);exit;        $header = array('S.No.', 'Vendor ID', 'Vendor Name', 'Pan Card Number', 'Company Name', 'Mobile No.', 'Email ID', 'State', 'City', 'Registered On', 'Status');        $result_value = array();        $i = 1;        if (!empty($result)) {            if ($page == 0 || $page == 1) {                $i = $count_new_bookings;            } else {                $i = $count_new_bookings - $limit * ($page - 1);            }            foreach ($result as $key => $res) {                if ($res['Usermgmt']['status'] == 1) {                    $chang = "Active";                } else {                    $chang = "Inactive";                }                $result_value[$key]['S.No.'] = $i;                $result_value[$key]['Vendor ID'] = $res['Usermgmt']['uniqid'];                $result_value[$key]['Vendor Name'] = $res['Usermgmt']['firstname'] . " " . $res['Usermgmt']['lastname'];                $result_value[$key]['Pan Card Number'] = $res['Usermgmt']['pen_card'];                $result_value[$key]['Company Name'] = ((isset($res['Company'][0]['name']) && $res['Company'][0]['name'] != NULL) ? $res['Company'][0]['name'] : '---');                $result_value[$key]['Mobile No.'] = $res['Usermgmt']['mobile'] ? $res['Usermgmt']['mobile'] : "---";                $result_value[$key]['Email ID'] = $res['Usermgmt']['email'] ? $res['Usermgmt']['email'] : "---";                $result_value[$key]['state'] = isset($res['OperationCity'][0]['City']['State']['name']) ? $res['OperationCity'][0]['City']['State']['name'] : '----';                $result_value[$key]['city'] = isset($res['OperationCity'][0]['City']['name']) ? $res['OperationCity'][0]['City']['name'] : '----';                $result_value[$key]['Registered On'] = date(DATE_FORMAT, strtotime($res['Usermgmt']['created']));                $result_value[$key]['Status'] = $chang;                $i--;            }        }        $this->export_file($header, $result_value, 'csv');        die;    }    function driver($id = null) {        $limitValue = $limit = 25;        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        if ($id != null) {            $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');            $breadcrumb = array('pages' => $pages, 'active' => __('My Profile'));            $this->set('breadcrumb', $breadcrumb);        } else {            $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');            $breadcrumb = array('pages' => $pages, 'active' => __('Driver'));            $this->set('breadcrumb', $breadcrumb);        }        $this->update_alert_seen("usermgmt", "index");        $conditions = array();        array_push($conditions, array('Usermgmt.user_role_id' => 4));        if (!empty($this->request->query)) {            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {                array_push($conditions, array('Usermgmt.state_id' => "" . $this->request->query['state_id'] . ""));                $this->set("state_id", $this->request->query['state_id']);            }            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));                $this->set("city_id", $this->request->query['city_id']);            }            if (isset($this->request->query['driver_firstname']) && $this->request->query['driver_firstname'] != "") {                array_push($conditions, array(                    'OR' => array(                        'LOWER(Usermgmt.firstname) LIKE' => "%" . strtolower($this->request->query['driver_firstname']) . "%",                        'LOWER(Usermgmt.lastname) LIKE' => "%" . strtolower($this->request->query['driver_firstname']) . "%",                        "LOWER(CONCAT_WS(' ',Usermgmt.firstname,Usermgmt.lastname)) LIKE" => "%" . strtolower($this->request->query['driver_firstname']) . "%",                    )                ));                $this->set("driver_firstname", $this->request->query['driver_firstname']);            }            if (isset($this->request->query['driver_uniqid']) && $this->request->query['driver_uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid' => $this->request->query['driver_uniqid']));                $this->set("driver_uniqid", $this->request->query['driver_uniqid']);            }            if (isset($this->request->query['driver_mobile']) && $this->request->query['driver_mobile'] != "") {                array_push($conditions, array('Usermgmt.mobile' => $this->request->query['driver_mobile']));                $this->set("driver_mobile", $this->request->query['driver_mobile']);            }            if (isset($this->request->query['license_no']) && $this->request->query['license_no'] != "") {                array_push($conditions, array('Usermgmt.license_no' => $this->request->query['license_no']));                $this->set("license_no", $this->request->query['license_no']);            }//           /vendor_id            if (isset($this->request->query['vendor_firstname']) && $this->request->query['vendor_firstname'] != "") {//                array_push($conditions, array(//                    'OR' => array(//                        'LOWER(Vendor.firstname) LIKE' => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                        'LOWER(Vendor.lastname) LIKE' => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                        "LOWER(CONCAT_WS(' ',Vendor.firstname,Vendor.lastname)) LIKE" => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                    )//                ));                array_push($conditions, array('Usermgmt.vendor_id' => $this->request->query['vendor_firstname']));                $this->set("vendor_firstname", $this->request->query['vendor_firstname']);            }            if (isset($this->request->query['vendor_uniqid']) && $this->request->query['vendor_uniqid'] != "") {                array_push($conditions, array('Vendor.uniqid' => $this->request->query['vendor_uniqid']));                $this->set("vendor_uniqid", $this->request->query['vendor_uniqid']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                array_push($conditions, array('Usermgmt.status' => $this->request->query['status']));                $this->set("status", $this->request->query['status']);            }            if (isset($this->request->query['verified']) && $this->request->query['verified'] != "") {                array_push($conditions, array('Usermgmt.verified' => $this->request->query['verified']));                $this->set("verified", $this->request->query['verified']);            }            if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                array_push($conditions, array('(date_format(Usermgmt.created, "%Y-%m-%d") >= ? AND date_format(Usermgmt.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));            } else            if (@$this->request->query['from_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));            } else            if (@$this->request->query['to_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));            }            $this->set("from_date", $this->request->query['from_date']);            $this->set("to_date", $this->request->query['to_date']);        }        if (!empty($this->data)) {            if (!empty($this->data['id'])) {                $submit_aciton = $this->data['Usermgmt']['my_action'];                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {                        if ($submit_aciton == 'delete') {                            $this->Usermgmt->delete($mainid);                            $message = "Deleted Successfully";                        }                        if ($submit_aciton == 'active') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '1'), array('Usermgmt.id' => $mainid));                            $message = "Activated Successfully";                        }                        if ($submit_aciton == 'inactive') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '0'), array('Usermgmt.id' => $mainid));                            $message = "Inactivated Successfully";                        }                    }                }                $this->Session->setFlash($message, 'default', array('class' => 'success'));            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {//$limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {// pr($this->data);                    $this->Prg->commonProcess();                }            }        }//$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Driver');        $this->Usermgmt->unbindModel(array('hasMany' => array('Company', 'DriverInformation', 'OperationCity', 'CompanyInformation')));        $this->{$this->modelClass}->virtualFields = array(            'country_name' => 'Select name From countries Where id= Usermgmt.country_id',            //'state_name' => 'Select name From states Where id= Usermgmt.state_id',            //'city_name' => 'Select name From cities Where id= Usermgmt.city_id',            'vendor_uniq_id' => 'Select uniqid From users Where id= Usermgmt.vendor_id',            'vendor_firstname' => 'Select firstname From users Where id= Usermgmt.vendor_id',            'vendor_lastname' => 'Select lastname From users Where id= Usermgmt.vendor_id',        );//$parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);//$parsedConditions['user_role_id'] = 4;        if ($id != null) {            $conditions['id'] = $id;        }        $this->paginate = array(            'conditions' => array($conditions),            'fields' => array("*"),            'joins' => array(                array(                    'table' => 'user_states',                    'alias' => 'UserState',                    'type' => 'LEFT',                    'conditions' => array(                        'UserState.state_id = Usermgmt.state_id'                    )                ),                array(                    'table' => 'user_cities',                    'alias' => 'UserCity',                    'type' => 'LEFT',                    'conditions' => array(                        'UserCity.city_id = Usermgmt.city_id'                    )                ),                array(                    'table' => 'users',                    'alias' => 'Vendor',                    'type' => 'LEFT',                    'conditions' => array(                        'Vendor.id = Usermgmt.vendor_id'                    )                ),            ),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);        $this->set('result', $this->paginate());        $this->set('tab_open', 'partners');        $this->loadModel("UserState");        $state = $this->UserState->find("list", array("fields" => array("state_id", "state_name")));        $this->set("states", $state);        $this->loadModel("UserCity");        $city = $this->UserCity->find("list", array("fields" => array("city_id", "city_name")));        $this->set("city", $city);        $this->set('page', $page);//        $count_new_bookings = $this->Usermgmt->find('count', array(//            'conditions' => $conditions,//            'joins' => array(//                array(//                    'table' => 'user_states',//                    'alias' => 'UserState',//                    'type' => 'LEFT',//                    'conditions' => array(//                        'UserState.state_id = Usermgmt.state_id'//                    )//                ),//                array(//                    'table' => 'user_cities',//                    'alias' => 'UserCity',//                    'type' => 'LEFT',//                    'conditions' => array(//                        'UserCity.city_id = Usermgmt.city_id'//                    )//                ),//                array(//                    'table' => 'users',//                    'alias' => 'Vendor',//                    'type' => 'LEFT',//                    'conditions' => array(//                        'Vendor.id = Usermgmt.vendor_id'//                    )//                ),//            ),//        ));//        $this->set("count_new_bookings", $count_new_bookings);        $this->set('title_for_layout', 'Driver List');        $this->loadModel("Company");//$company = $this->Company->find("list", array("conditions" => array("status" => 1)));        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'order' => array('Company.name' => 'asc'),            'fields' => array(                'Company.id', 'User.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['User']['id']] = $vl['Company']['name'] . ' (' . $vl['User']['uniqid'] . ')';            }        }        $this->set("company", $companyarray);    }    public function getpdf_driver($value) {        $this->layout = false;        $value = base64_decode(base64_decode($value));        $value = json_decode($value, true);        $conditions = array();        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $conditions = array();        array_push($conditions, array('Usermgmt.user_role_id' => 4));        if (!empty($this->request->query)) {            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {                array_push($conditions, array('Usermgmt.state_id' => "" . $this->request->query['state_id'] . ""));                $this->set("state_id", $this->request->query['state_id']);            }            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));                $this->set("city_id", $this->request->query['city_id']);            }            if (isset($this->request->query['driver_firstname']) && $this->request->query['driver_firstname'] != "") {                array_push($conditions, array(                    'OR' => array(                        'LOWER(Usermgmt.firstname) LIKE' => "%" . strtolower($this->request->query['driver_firstname']) . "%",                        'LOWER(Usermgmt.lastname) LIKE' => "%" . strtolower($this->request->query['driver_firstname']) . "%",                        "LOWER(CONCAT_WS(' ',Usermgmt.firstname,Usermgmt.lastname)) LIKE" => "%" . strtolower($this->request->query['driver_firstname']) . "%",                    )                ));                $this->set("driver_firstname", $this->request->query['driver_firstname']);            }            if (isset($this->request->query['driver_uniqid']) && $this->request->query['driver_uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid' => $this->request->query['driver_uniqid']));                $this->set("driver_uniqid", $this->request->query['driver_uniqid']);            }            if (isset($this->request->query['driver_mobile']) && $this->request->query['driver_mobile'] != "") {                array_push($conditions, array('Usermgmt.mobile' => $this->request->query['driver_mobile']));                $this->set("driver_mobile", $this->request->query['driver_mobile']);            }            if (isset($this->request->query['license_no']) && $this->request->query['license_no'] != "") {                array_push($conditions, array('Usermgmt.license_no' => $this->request->query['license_no']));                $this->set("license_no", $this->request->query['license_no']);            }            if (isset($this->request->query['vendor_firstname']) && $this->request->query['vendor_firstname'] != "") {//                array_push($conditions, array(//                    'OR' => array(//                        'LOWER(Vendor.firstname) LIKE' => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                        'LOWER(Vendor.lastname) LIKE' => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                        "LOWER(CONCAT_WS(' ',Vendor.firstname,Vendor.lastname)) LIKE" => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                    )//                ));                array_push($conditions, array('Usermgmt.vendor_id' => $this->request->query['vendor_firstname']));                $this->set("vendor_firstname", $this->request->query['vendor_firstname']);            }            if (isset($this->request->query['vendor_uniqid']) && $this->request->query['vendor_uniqid'] != "") {                array_push($conditions, array('Vendor.uniqid' => $this->request->query['vendor_uniqid']));                $this->set("vendor_uniqid", $this->request->query['vendor_uniqid']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                array_push($conditions, array('Usermgmt.status' => $this->request->query['status']));                $this->set("status", $this->request->query['status']);            }            if (isset($this->request->query['verified']) && $this->request->query['verified'] != "") {                array_push($conditions, array('Usermgmt.verified' => $this->request->query['verified']));                $this->set("verified", $this->request->query['verified']);            }            if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                array_push($conditions, array('(date_format(Usermgmt.created, "%Y-%m-%d") >= ? AND date_format(Usermgmt.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));            } else            if (@$this->request->query['from_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));            } else            if (@$this->request->query['to_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));            }            $this->set("from_date", $this->request->query['from_date']);            $this->set("to_date", $this->request->query['to_date']);        }        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $limitValue = $limit = 25;//$this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $this->{$this->modelClass}->virtualFields = array(            'country_name' => 'Select name From countries Where id= Usermgmt.country_id',            'state_name' => 'Select name From states Where id= Usermgmt.state_id',            'city_name' => 'Select name From cities Where id= Usermgmt.city_id',            'vendor_uniq_id' => 'Select uniqid From users Where id= Usermgmt.vendor_id',            'vendor_firstname' => 'Select firstname From users Where id= Usermgmt.vendor_id',            'vendor_lastname' => 'Select lastname From users Where id= Usermgmt.vendor_id',        );        $this->paginate = array(            'conditions' => array($conditions),            'joins' => array(                array(                    'table' => 'countries',                    'alias' => 'Country',                    'type' => 'LEFT',                    'conditions' => array(                        'Country.id = Usermgmt.country_id'                    )                ),                array(                    'table' => 'states',                    'alias' => 'State',                    'type' => 'LEFT',                    'conditions' => array(                        'State.id = Usermgmt.state_id'                    )                ),                array(                    'table' => 'cities',                    'alias' => 'City',                    'type' => 'LEFT',                    'conditions' => array(                        'City.id = Usermgmt.city_id'                    )                ),                array(                    'table' => 'users',                    'alias' => 'Vendor',                    'type' => 'LEFT',                    'conditions' => array(                        'Vendor.id = Usermgmt.vendor_id'                    )                ),            ),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('page', $page);        $count_new_bookings = $this->Usermgmt->find('count', array(            'conditions' => $conditions,            'joins' => array(                array(                    'table' => 'countries',                    'alias' => 'Country',                    'type' => 'LEFT',                    'conditions' => array(                        'Country.id = Usermgmt.country_id'                    )                ),                array(                    'table' => 'states',                    'alias' => 'State',                    'type' => 'LEFT',                    'conditions' => array(                        'State.id = Usermgmt.state_id'                    )                ),                array(                    'table' => 'cities',                    'alias' => 'City',                    'type' => 'LEFT',                    'conditions' => array(                        'City.id = Usermgmt.city_id'                    )                ),                array(                    'table' => 'users',                    'alias' => 'Vendor',                    'type' => 'LEFT',                    'conditions' => array(                        'Vendor.id = Usermgmt.vendor_id'                    )                ),            ),        ));        $result = $this->paginate();//pr($result);exit;        $header = array('S.No.', 'State', 'City', 'Driver ID', 'Driver Name', 'Mobile Number', 'Driving License Number', 'Registered On', 'Vendor ID', 'Vendor Name', 'Status', 'Verified');        $result_value = array();        $i = 1;        if (!empty($result)) {            $header = array('S.No.', 'State', 'City', 'Driver ID', 'Driver Name', 'Mobile Number', 'Driving License Number', 'Age', 'Registered On', 'Vendor ID', 'Vendor Name', 'Status', 'Verified');            if ($page == 0 || $page == 1) {                $i = $count_new_bookings;            } else {                $i = $count_new_bookings - $limit * ($page - 1);            }            foreach ($result as $key => $res) {                if ($res['Usermgmt']['status'] == 1) {                    $status = "Active";                } else {                    $status = "Inactive";                }                if ($res['Usermgmt']['verified'] == 1) {                    $verified = "Verified";                } else {                    $verified = "UnVerified";                }                $result_value[$key]['S.No.'] = $i;                $result_value[$key]['state'] = $res['Usermgmt']['state_name'] ? $res['Usermgmt']['state_name'] : '----';                $result_value[$key]['city'] = $res['Usermgmt']['city_name'] ? $res['Usermgmt']['city_name'] : '----';                $result_value[$key]['Driver ID'] = $res['Usermgmt']['uniqid'];                $result_value[$key]['Driver Name'] = $res['Usermgmt']['firstname'] . " " . $res['Usermgmt']['lastname'];                $result_value[$key]['Mobile Number'] = $res['Usermgmt']['mobile'];                $result_value[$key]['Driving License Number'] = $res['Usermgmt']['license_no'];                $current_year = date('Y');                $dob_year = date('Y', strtotime($res['Usermgmt']['dob']));                $result_value[$key]['Age'] = $current_year - $dob_year;                $result_value[$key]['Registered On'] = date(DATE_FORMAT, strtotime($res['Usermgmt']['created']));                $result_value[$key]['Vendor ID'] = $res['Usermgmt']['vendor_uniq_id'] ? $res['Usermgmt']['vendor_uniq_id'] : "---";                $result_value[$key]['Vendor Name'] = $res['Usermgmt']['vendor_firstname'] . ' ' . $res['Usermgmt']['vendor_lastname'];                $result_value[$key]['Status'] = $status;                $result_value[$key]['Verified'] = $verified;                $i--;            }        }        $this->export_file($header, $result_value, 'pdf');        die;    }    public function getcsv_driver($value) {        $this->layout = false;        $value = base64_decode(base64_decode($value));        $value = json_decode($value, true);        $conditions = array();        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $conditions = array();        array_push($conditions, array('Usermgmt.user_role_id' => 4));        if (!empty($this->request->query)) {            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {                array_push($conditions, array('Usermgmt.state_id' => "" . $this->request->query['state_id'] . ""));                $this->set("state_id", $this->request->query['state_id']);            }            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));                $this->set("city_id", $this->request->query['city_id']);            }            if (isset($this->request->query['driver_firstname']) && $this->request->query['driver_firstname'] != "") {                array_push($conditions, array(                    'OR' => array(                        'LOWER(Usermgmt.firstname) LIKE' => "%" . strtolower($this->request->query['driver_firstname']) . "%",                        'LOWER(Usermgmt.lastname) LIKE' => "%" . strtolower($this->request->query['driver_firstname']) . "%",                        "LOWER(CONCAT_WS(' ',Usermgmt.firstname,Usermgmt.lastname)) LIKE" => "%" . strtolower($this->request->query['driver_firstname']) . "%",                    )                ));                $this->set("driver_firstname", $this->request->query['driver_firstname']);            }            if (isset($this->request->query['driver_uniqid']) && $this->request->query['driver_uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid' => $this->request->query['driver_uniqid']));                $this->set("driver_uniqid", $this->request->query['driver_uniqid']);            }            if (isset($this->request->query['driver_mobile']) && $this->request->query['driver_mobile'] != "") {                array_push($conditions, array('Usermgmt.mobile' => $this->request->query['driver_mobile']));                $this->set("driver_mobile", $this->request->query['driver_mobile']);            }            if (isset($this->request->query['license_no']) && $this->request->query['license_no'] != "") {                array_push($conditions, array('Usermgmt.license_no' => $this->request->query['license_no']));                $this->set("license_no", $this->request->query['license_no']);            }            if (isset($this->request->query['vendor_firstname']) && $this->request->query['vendor_firstname'] != "") {//                array_push($conditions, array(//                    'OR' => array(//                        'LOWER(Vendor.firstname) LIKE' => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                        'LOWER(Vendor.lastname) LIKE' => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                        "LOWER(CONCAT_WS(' ',Vendor.firstname,Vendor.lastname)) LIKE" => "%" . strtolower($this->request->query['vendor_firstname']) . "%",//                    )//                ));                array_push($conditions, array('Usermgmt.vendor_id' => $this->request->query['vendor_firstname']));                $this->set("vendor_firstname", $this->request->query['vendor_firstname']);            }            if (isset($this->request->query['vendor_uniqid']) && $this->request->query['vendor_uniqid'] != "") {                array_push($conditions, array('Vendor.uniqid' => $this->request->query['vendor_uniqid']));                $this->set("vendor_uniqid", $this->request->query['vendor_uniqid']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                array_push($conditions, array('Usermgmt.status' => $this->request->query['status']));                $this->set("status", $this->request->query['status']);            }            if (isset($this->request->query['verified']) && $this->request->query['verified'] != "") {                array_push($conditions, array('Usermgmt.verified' => $this->request->query['verified']));                $this->set("verified", $this->request->query['verified']);            }            if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                array_push($conditions, array('(date_format(Usermgmt.created, "%Y-%m-%d") >= ? AND date_format(Usermgmt.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));            } else            if (@$this->request->query['from_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));            } else            if (@$this->request->query['to_date']) {                array_push($conditions, array('date_format(Usermgmt.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));            }            $this->set("from_date", $this->request->query['from_date']);            $this->set("to_date", $this->request->query['to_date']);        }        $limitValue = $limit = 25;//$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $this->{$this->modelClass}->virtualFields = array(            'country_name' => 'Select name From countries Where id= Usermgmt.country_id',            'state_name' => 'Select name From states Where id= Usermgmt.state_id',            'city_name' => 'Select name From cities Where id= Usermgmt.city_id',            'vendor_uniq_id' => 'Select uniqid From users Where id= Usermgmt.vendor_id',            'vendor_firstname' => 'Select firstname From users Where id= Usermgmt.vendor_id',            'vendor_lastname' => 'Select lastname From users Where id= Usermgmt.vendor_id',        );        $result = $this->Usermgmt->find('all', array(            'conditions' => array($conditions),            'joins' => array(                array(                    'table' => 'countries',                    'alias' => 'Country',                    'type' => 'LEFT',                    'conditions' => array(                        'Country.id = Usermgmt.country_id'                    )                ),                array(                    'table' => 'states',                    'alias' => 'State',                    'type' => 'LEFT',                    'conditions' => array(                        'State.id = Usermgmt.state_id'                    )                ),                array(                    'table' => 'cities',                    'alias' => 'City',                    'type' => 'LEFT',                    'conditions' => array(                        'City.id = Usermgmt.city_id'                    )                ),                array(                    'table' => 'users',                    'alias' => 'Vendor',                    'type' => 'LEFT',                    'conditions' => array(                        'Vendor.id = Usermgmt.vendor_id'                    )                ),            ),            //'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        ));        $this->set('page', $page);        $count_new_bookings = count($result);        //        $count_new_bookings = $this->Usermgmt->find('count', array(//            'conditions' => $conditions,//            'joins' => array(//                array(//                    'table' => 'countries',//                    'alias' => 'Country',//                    'type' => 'LEFT',//                    'conditions' => array(//                        'Country.id = Usermgmt.country_id'//                    )//                ),//                array(//                    'table' => 'states',//                    'alias' => 'State',//                    'type' => 'LEFT',//                    'conditions' => array(//                        'State.id = Usermgmt.state_id'//                    )//                ),//                array(//                    'table' => 'cities',//                    'alias' => 'City',//                    'type' => 'LEFT',//                    'conditions' => array(//                        'City.id = Usermgmt.city_id'//                    )//                ),//                array(//                    'table' => 'users',//                    'alias' => 'Vendor',//                    'type' => 'LEFT',//                    'conditions' => array(//                        'Vendor.id = Usermgmt.vendor_id'//                    )//                ),//            ),//        ));        //$result = $this->paginate();//pr($result);exit;        $header = array('S.No.', 'State', 'City', 'Driver ID', 'Driver Name', 'Mobile Number', 'Driving License Number', 'Registered On', 'Vendor ID', 'Vendor Name', 'Status', 'Verified');        $result_value = array();        $i = 1;        if (!empty($result)) {            $header = array('S.No.', 'State', 'City', 'Driver ID', 'Driver Name', 'Mobile Number', 'Driving License Number', 'Age', 'Registered On', 'Vendor ID', 'Vendor Name', 'Status', 'Verified');            if ($page == 0 || $page == 1) {                $i = $count_new_bookings;            } else {                $i = $count_new_bookings - $limit * ($page - 1);            }            foreach ($result as $key => $res) {                if ($res['Usermgmt']['status'] == 1) {                    $status = "Active";                } else {                    $status = "Inactive";                }                if ($res['Usermgmt']['verified'] == 1) {                    $verified = "Verified";                } else {                    $verified = "UnVerified";                }                $result_value[$key]['S.No.'] = $i;                $result_value[$key]['state'] = $res['Usermgmt']['state_name'] ? $res['Usermgmt']['state_name'] : '----';                $result_value[$key]['city'] = $res['Usermgmt']['city_name'] ? $res['Usermgmt']['city_name'] : '----';                $result_value[$key]['Driver ID'] = $res['Usermgmt']['uniqid'];                $result_value[$key]['Driver Name'] = $res['Usermgmt']['firstname'] . " " . $res['Usermgmt']['lastname'];                $result_value[$key]['Mobile Number'] = $res['Usermgmt']['mobile'];                $result_value[$key]['Driving License Number'] = $res['Usermgmt']['license_no'];                $current_year = date('Y');                $dob_year = date('Y', strtotime($res['Usermgmt']['dob']));                $result_value[$key]['Age'] = $current_year - $dob_year;                $result_value[$key]['Registered On'] = date(DATE_FORMAT, strtotime($res['Usermgmt']['created']));                $result_value[$key]['Vendor ID'] = $res['Usermgmt']['vendor_uniq_id'] ? $res['Usermgmt']['vendor_uniq_id'] : "---";                $result_value[$key]['Vendor Name'] = $res['Usermgmt']['vendor_firstname'] . ' ' . $res['Usermgmt']['vendor_lastname'];                $result_value[$key]['Status'] = $status;                $result_value[$key]['Verified'] = $verified;                $i--;            }        }        $this->export_file($header, $result_value, 'csv');        die;    }    public function vendor_driverlist($id = null) {        if ($id != null) {            $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');            $breadcrumb = array('pages' => $pages, 'active' => __('My Profile'));            $this->set('breadcrumb', $breadcrumb);        } else {            $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');            $breadcrumb = array('pages' => $pages, 'active' => __('Driver'));            $this->set('breadcrumb', $breadcrumb);        }        if (!empty($this->data)) {            if (!empty($this->data['id'])) {                $submit_aciton = $this->data['Usermgmt']['my_action'];                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {                        if ($submit_aciton == 'delete') {                            $this->Usermgmt->delete($mainid);                            $message = "Deleted Successfully";                        }                        if ($submit_aciton == 'active') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '1'), array('Usermgmt.id' => $mainid));                            $message = "Activated Successfully";                        }                        if ($submit_aciton == 'inactive') {                            $this->Usermgmt->updateAll(array('Usermgmt.status' => '0'), array('Usermgmt.id' => $mainid));                            $message = "Inactivated Successfully";                        }                    }                }                $this->Session->setFlash($message, 'default', array('class' => 'success'));            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {                    $limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {// pr($this->data);                    $this->Prg->commonProcess();                }            }        }        $page = ((isset($this->params['named']['page']) && $this->params['named']['page'] != NULL) ? $this->params['named']['page'] : 0);        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->set('id', $id);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Driver');        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $parsedConditions[$this->modelClass . '.user_role_id'] = 4;        if ($id != null) {            $parsedConditions[$this->modelClass . '.vendor_id'] = $id;        }        $this->{$this->modelClass}->bindModel(                array('belongsTo' => array(                        'User' => array(                            'className' => $this->modelClass,                            'foreignKey' => 'vendor_id	',                        )                    )                )        );        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('pageHeading', Inflector::singularize($pageHeading));//        $count_new_bookings = $this->{$this->modelClass}->find('count', array(//            'conditions' => $parsedConditions//        ));//        $this->set("count_new_bookings", $count_new_bookings);        $this->set("page", $page);        $this->set('back', $pageHeading);        $this->loadModel('Company');        $vendor_company = $this->Company->findByUserId($id, array('fields' => 'Company.name'));        $this->set('vendor_company', $vendor_company);        $this->loadModel('User');        $uniqid = $this->User->findById($id, array('fields' => 'User.uniqid'));        $this->set('uniqid', $uniqid);        $this->set('result', $this->paginate());        $this->set('tab_open', 'partners');        if (!empty($vendor_company) && !empty($uniqid)) {            $Vname = $vendor_company['Company']['name'] . "  (" . $uniqid['User']['uniqid'] . ")";        } else {            $Vname = "My";        }        $this->set('title_for_layout', $Vname . ' List of Drivers');    }    function manager($id = null) {        if ($id != null) {            $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');            $breadcrumb = array('pages' => $pages, 'active' => __('My Profile'));            $this->set('breadcrumb', $breadcrumb);        } else {            $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');            $breadcrumb = array('pages' => $pages, 'active' => __('manager'));            $this->set('breadcrumb', $breadcrumb);        }        if (!empty($this->data) && isset($this->data['recordsPerPage'])) {            $limitValue = $limit = $this->data['recordsPerPage'];            $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);        } else {// pr($this->data);            $this->Prg->commonProcess();        }        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('manager');        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $parsedConditions['user_role_id'] = 5;        if ($id != null) {            $parsedConditions['id'] = $id;        }        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);        $this->set('result', $this->paginate());    }    function company($id = null) {        if ($id != null) {            $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');            $breadcrumb = array('pages' => $pages, 'active' => __('My Profile'));            $this->set('breadcrumb', $breadcrumb);        } else {            $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');            $breadcrumb = array('pages' => $pages, 'active' => __('company'));            $this->set('breadcrumb', $breadcrumb);        }        if (!empty($this->data)) {            if (!empty($this->data['id'])) {                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {                        $this->Usermgmt->delete($mainid);                    }                }                $this->Session->setFlash('Deleted successfully', 'default', array('class' => 'success'));            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {                    $limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {// pr($this->data);                    $this->Prg->commonProcess();                }            }        }        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Company');        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $parsedConditions['user_role_id'] = 2;        if ($id != null) {            $parsedConditions['id'] = $id;        }        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);        $this->set('result', $this->paginate());    }    public function getcustomers() {// Check cakephp ajax request        if ($this->request->is('Ajax')) {// Load users model            $this->loadModel('Users');// Fire custom query to get all users count by each month and each year.            $res = $this->Users->query("select		year(`created`) as 'YEAR',		sum(month(`created`) = 1) as '1',		sum(month(`created`) = 2) as '2',		sum(month(`created`) = 3) as '3',		sum(month(`created`) = 4) as '4',		sum(month(`created`) = 5) as '5',		sum(month(`created`) = 6) as '6',		sum(month(`created`) = 7) as '7',		sum(month(`created`) = 8) as '8',		sum(month(`created`) = 9) as '9',		sum(month(`created`) = 10) as '10',		sum(month(`created`) = 11) as '11',		sum(month(`created`) = 12) as '12'		FROM `users`		WHERE user_role_id = '3'		AND year(`created`) = '" . date('Y') . "'		GROUP BY 1");// Unset year column            unset($res[0][0]['YEAR']);// Set new array            $cdata = array();            if (count($res) != 0) {                foreach ($res[0][0] as $ydata) {                    $cdata[]['count'] = $ydata;                }                echo '{"success":{"users":' . json_encode($cdata) . '}}';                exit();            } else {                echo '{"success":{"users":[{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"},{"count":"0"}]}}';            }        }        exit();    }    function add() {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('Employee', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'index');        $breadcrumb = array('pages' => $pages, 'active' => __('Add Employee', true));        $this->set('breadcrumb', $breadcrumb);        if (!empty($this->data)) {            $image = '';            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->validates()) {                $filename = $this->data{$this->modelClass}['image']['name'];                if ($filename != '') {                    $tempPath = $this->data{$this->modelClass}['image']['tmp_name'];                    $new_file_name = time() . '_' . $filename;                    if (move_uploaded_file($tempPath, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name)) {                        $image = $new_file_name;                    } else {                        $image = '';                    }                } else {                    $image = '';                }                $data = array();                $data['user_role_id'] = 2;                $data['status'] = 1;                $data['firstname'] = $this->data{$this->modelClass}['firstname'];                $data['lastname'] = $this->data{$this->modelClass}['lastname'];                $data['username'] = $this->data{$this->modelClass}['username'];                $data['email'] = $this->data{$this->modelClass}['email'];                $data['password'] = AuthComponent::password($this->data{$this->modelClass}['user_password']);                $data['active'] = 1;                $data['image'] = $image;//pr($data); die;                if ($this->{$this->modelClass}->save($data, false)) {                    $this->Session->setFlash(__('Employee has been added'), 'success');                    $this->redirect(array('action' => 'index'));                } else {                    $this->Session->setFlash(__('Employee has not been added.'), 'error');                }            }        }    }    function add_customer() {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('Passenger', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'customer');        $breadcrumb = array('pages' => $pages, 'active' => __('Add Passenger', true));        $this->set('breadcrumb', $breadcrumb);        $this->loadModel('Country');        $country = $this->Country->find('list', array('order' => 'created desc'));        $this->set('country', $country);        if (!empty($this->data)) {            $image = '';            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->validates()) {//pr($this->data); die;                $filename = $this->data{$this->modelClass}['image']['name'];                if ($filename != '') {                    $tempPath = $this->data{$this->modelClass}['image']['tmp_name'];                    $new_file_name = time() . '_' . $filename;                    if (move_uploaded_file($tempPath, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name)) {                        $image = $new_file_name;                    } else {                        $image = '';                    }                } else {                    $image = '';                }                $data = array();                $data['user_role_id'] = 3;                $data['firstname'] = $this->data{$this->modelClass}['firstname'];//$data['lastname']		=	$this->data{$this->modelClass}['lastname'];                $data['username'] = $this->data{$this->modelClass}['firstname'];                $data['email'] = $this->data{$this->modelClass}['email'];                $data['password'] = AuthComponent::password($this->data{$this->modelClass}['password']);                $data['status'] = $this->data{$this->modelClass}['status'];                $data['active'] = 1;                $data['image'] = $image;//pr($data); die;                if ($this->{$this->modelClass}->save($data, false)) {                    $this->Session->setFlash(__('Passenger has been added'), 'success');                    $this->redirect(array('action' => 'customer'));                } else {                    $this->Session->setFlash(__('Passenger has not been added.'), 'error');                }            }        }    }    function add_more_address() {        $this->layout = false;        $this->autoRender = false;        $count = $this->data['count'];        $lat = $this->data['lat'];        $lng = $this->data['lng'];        $this->set("count", $count);        $this->set("lat", $lat);        $this->set("lng", $lng);        $this->loadModel("State");        $state = $this->State->find("list", array("conditions" => array("status" => 1)));        $this->set("state", $state);        $this->loadModel("City");        $city = $this->City->find("list", array("conditions" => array("state_id" => $this->data['state'])));        $this->set("city", $city);        $this->set("page_type", $this->data['page_type']);        $this->set("state_id", $this->data['state']);        $this->set("city_id", $this->data['city']);        $this->set("address", $this->data['address']);        $this->set("address_id", $this->data['address_id']);        $data = $this->render('add_more_address');        echo $data;        die();    }    function test_mail() {        $email = "1988rajeshkumar@gmail.com";        $pass = "3232323";        $message = '<table border="0" cellpadding="0" cellspacing="0" border="0">';        $message .= '<tr><td align="left"><h3>Welcome to the Super Cabz</h3></td></tr>                                <tr><td align="left">Your account has been created successfully, Following are your temporary login credentials, you can update your credentials later after login.</h3></td></tr>                                <tr>                                    <td align="left">                                        <table border="0" cellpadding="0" cellspacing="0" width="100%">                                            <tr>                                                <td align="left" width="25%"><strong>Email</strong></td>                                                <td align="left" width="75%">' . $email . '</td>                                            </tr>                                            <tr>                                                <td align="left" width="25%"><strong>Password</strong></td>                                                <td align="left" width="75%">' . $pass . '</td>                                            </tr>                                        </table>                                    </td>                                </tr>                                <tr><td align="left"><strong>Regards,<br/> Super Cabz</strong></td></tr>';        $message .= '</table>';        $mail = new CakeEmail();        $mail->from(array(Configure::read('Site.email') => Configure::read('Site.title')));        $mail->to($email);        $mail->emailFormat('html');        $mail->subject('Welcome to the ' . Configure::read('Site.title') . ' - Your account created successfully');        try {            $res = $mail->send($message);        } catch (Exception $ex) {            $res = $ex;        }        pr($res);        exit;    }    function add_individual() {//pr($this->request->data); die;        $this->set('tab_open', 'partners');        $lat = '26.826651';        $lng = '75.999';        $this->set("lat", $lat);        $this->set("lng", $lng);        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('Customer', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'individual');        $breadcrumb = array('pages' => $pages, 'active' => __('Add Individual', true));        $this->set('breadcrumb', $breadcrumb);        $this->loadModel('Country');        $country = $this->Country->find('list', array('order' => 'created desc'));        $state = array();        $city = array();        $is_success = 1;        if ($this->request->is('post')) {            $this->loadModel('User');            $check_duplicate = $this->User->find('count', array(                'conditions' => array(                    'User.mobile' => $this->request->data['Usermgmt']['mobile'],                    'User.user_role_id' => 2                ),                'recursive' => -1            ));            if ($check_duplicate > 0) {                $this->Session->setFlash(__('This mobile number already exist.'), 'error');                $this->redirect(array('plugin' => false, 'controller' => 'individual', 'action' => 'add'));            }            /* debug($this->request->data);              die; *///pr($this->data); die;            $data_chk['firstname'] = $this->data{$this->modelClass}['firstname'];            $data_chk['lastname'] = $this->data{$this->modelClass}['lastname'];            $data_chk['mobile'] = $this->data{$this->modelClass}['mobile'];//$data_chk['license_no'] = $this->data{$this->modelClass}['license_no'];            $this->{$this->modelClass}->set($data_chk);//pr($this->Usermgmt->addDriver());exit;            if ($this->Usermgmt->addVendor()) {                $upload_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . DS . 'uploads' . DS . 'photos';                $thumb_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . DS . 'uploads' . DS . 'photos';                if (isset($this->request->data['Usermgmt']['image']) && $this->request->data['Usermgmt']['image']['name'] != "") {                    $allowed_extensions = array('jpg', 'jpeg', 'png', 'gif');                    $uploaded_image = $this->request->data['Usermgmt']['image']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    $uploadedImagesize = getimagesize($this->request->data['Usermgmt']['image']['tmp_name']);                    $uploadedImageWidth = $uploadedImagesize[0];                    $uploadedImageHeight = $uploadedImagesize[1];                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Photo extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadimageArray = $this->request->data['Usermgmt']['image'];                    unset($this->request->data['User']['image']);                } else {                    unset($this->request->data['User']['image']);                }//identity proof                if (isset($this->request->data['Usermgmt']['identity_proof_img']) && $this->request->data['Usermgmt']['identity_proof_img']['name'] != "") {                    $allowed_extensions_proof = array('jpg', 'jpeg', 'png', 'gif');                    $uploaded_image_proof = $this->request->data['Usermgmt']['identity_proof_img']['name'];                    $imgExtension_proof = pathinfo($uploaded_image_proof, PATHINFO_EXTENSION);                    $uploadedImagesize_proof = getimagesize($this->request->data['Usermgmt']['identity_proof_img']['tmp_name']);                    $uploadedImageWidth_proof = $uploadedImagesize_proof[0];                    $uploadedImageHeight_proof = $uploadedImagesize_proof[1];                    if (!in_array($imgExtension_proof, $allowed_extensions_proof)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Photo extension should be of ' . implode(",", $allowed_extensions_proof) . ' only'), 'error');                    }                    $uploadimageArray_proof = $this->request->data['Usermgmt']['identity_proof_img'];                    unset($this->request->data['User']['identity_proof_img']);                } else {                    unset($this->request->data['User']['identity_proof_img']);                }// passport_proof_img id                if (isset($this->request->data['Usermgmt']['passport_proof_img']) && $this->request->data['Usermgmt']['passport_proof_img']['name'] != "") {                    $allowed_extensions_proof = array('jpg', 'jpeg', 'png', 'gif');                    $uploaded_image_proof = $this->request->data['Usermgmt']['passport_proof_img']['name'];                    $imgExtension_proof = pathinfo($uploaded_image_proof, PATHINFO_EXTENSION);                    $uploadedImagesize_proof = getimagesize($this->request->data['Usermgmt']['passport_proof_img']['tmp_name']);                    $uploadedImageWidth_proof = $uploadedImagesize_proof[0];                    $uploadedImageHeight_proof = $uploadedImagesize_proof[1];                    if (!in_array($imgExtension_proof, $allowed_extensions_proof)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Photo extension should be of ' . implode(",", $allowed_extensions_proof) . ' only'), 'error');                    }                    $uploadimageArray_proof_passport = $this->request->data['Usermgmt']['passport_proof_img'];                    unset($this->request->data['User']['passport_proof_img']);                } else {                    unset($this->request->data['User']['passport_proof_img']);                }// end////$uploadimageArray_proof_aadhar                if (isset($this->request->data['Usermgmt']['aadhar_proof_img']) && $this->request->data['Usermgmt']['aadhar_proof_img']['name'] != "") {                    $allowed_extensions_proof = array('jpg', 'jpeg', 'png', 'gif');                    $uploaded_image_proof = $this->request->data['Usermgmt']['aadhar_proof_img']['name'];                    $imgExtension_proof = pathinfo($uploaded_image_proof, PATHINFO_EXTENSION);                    $uploadedImagesize_proof = getimagesize($this->request->data['Usermgmt']['aadhar_proof_img']['tmp_name']);                    $uploadedImageWidth_proof = $uploadedImagesize_proof[0];                    $uploadedImageHeight_proof = $uploadedImagesize_proof[1];                    if (!in_array($imgExtension_proof, $allowed_extensions_proof)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Photo extension should be of ' . implode(",", $allowed_extensions_proof) . ' only'), 'error');                    }                    $uploadimageArray_proof_aadhar = $this->request->data['Usermgmt']['aadhar_proof_img'];                    unset($this->request->data['User']['aadhar_proof_img']);                } else {                    unset($this->request->data['User']['aadhar_proof_img']);                }//                if (isset($this->request->data['Usermgmt']['license_proof_img']) && $this->request->data['Usermgmt']['license_proof_img']['name'] != "") {                    $allowed_extensions_proof = array('jpg', 'jpeg', 'png', 'gif');                    $uploaded_image_proof = $this->request->data['Usermgmt']['license_proof_img']['name'];                    $imgExtension_proof = pathinfo($uploaded_image_proof, PATHINFO_EXTENSION);                    $uploadedImagesize_proof = getimagesize($this->request->data['Usermgmt']['license_proof_img']['tmp_name']);                    $uploadedImageWidth_proof = $uploadedImagesize_proof[0];                    $uploadedImageHeight_proof = $uploadedImagesize_proof[1];                    if (!in_array($imgExtension_proof, $allowed_extensions_proof)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Photo extension should be of ' . implode(",", $allowed_extensions_proof) . ' only'), 'error');                    }                    $uploadimageArray_proof_license = $this->request->data['Usermgmt']['license_proof_img'];                    unset($this->request->data['User']['license_proof_img']);                } else {                    unset($this->request->data['User']['license_proof_img']);                }// check duplicate email                $this->loadModel('User');                $check_duplicate_email = $this->User->find('count', array(                    'conditions' => array(                        'User.email' => $this->request->data['Usermgmt']['email']                    ),                    'recursive' => -1                ));                $email_user = $this->request->data['Usermgmt']['email'];                if ($check_duplicate_email > 0) {                    $this->data = $this->request->data;                    $is_success = 0;                    $this->Session->setFlash(__('Email already exists, please use other email'), 'error');                }                $this->loadModel('City');                $cityData = $this->City->findById($this->data['Company']['city_id']);//$cityname = substr($cityData['City']['name'], 0, 2);                $citycode = $cityData['City']['city_code'];                $unid = time();                $data['uniqid'] = $unid;                $pass = rand(000000, 999999);// vendor name                 $vendor_name = $this->data{$this->modelClass}['firstname'] . ' ' . $this->data{$this->modelClass}['lastname'];                $vendor_phone = $this->data{$this->modelClass}['mobile'];                $data['user_role_id'] = 2;//pr($this->data); exit;                $data['company_id'] = isset($this->data{$this->modelClass}['company_id']) ? $this->data{$this->modelClass}['company_id'] : "";                $data['firstname'] = $this->data{$this->modelClass}['firstname'];                $data['lastname'] = $this->data{$this->modelClass}['lastname'];                $data['mobile'] = $this->data{$this->modelClass}['mobile'];                $data['username'] = $this->data{$this->modelClass}['firstname'];                $data['gender'] = $this->data{$this->modelClass}['gender'];                $data['address'] = $this->data{$this->modelClass}['address'];                $data['residence_address'] = $this->data{$this->modelClass}['residence_address'];                $data['pen_card'] = $this->data{$this->modelClass}['pen_card'];                $data['email'] = $this->data{$this->modelClass}['email'];                $data['city_id'] = $this->data['Company']['city_id'];                $data['state_id'] = $this->data['Company']['state_id'];                $data['country_id'] = 1;                $data['mgf_vendor'] = isset($this->data['Usermgmt']['mgf_vendor']) && $this->data['Usermgmt']['mgf_vendor'] ? $this->data['Usermgmt']['mgf_vendor'] : 0;                $data['allow_corporate_booking'] = isset($this->data['Usermgmt']['allow_corporate_booking']) && $this->data['Usermgmt']['allow_corporate_booking'] ? $this->data['Usermgmt']['allow_corporate_booking'] : 0;// $data['password'] = AuthComponent::password($this->data{$this->modelClass}['password']);                $data['password'] = AuthComponent::password($pass);                $data['status'] = $this->data{$this->modelClass}['status'];                $data['active'] = 1;// $sfrom = date("H:i", strtotime($this->data['Company']['sfrom']));// $sto = date("H:i", strtotime($this->data['Company']['sto']));//  $this->request->data["Company"]["sfrom"] = $sfrom;// $this->request->data["Company"]["sto"] = $sto;                $this->request->data["Company"]["sfrom"] = '';                $this->request->data["Company"]["sto"] = '';                $this->request->data["Company"]["gaddress"] = '';                $this->loadModel('User');//count //                $count_vendor = $this->User->find('count', array(                    'conditions' => array(                        'User.user_role_id' => 2                    ),                ));//end                if ($is_success == 1) {                    if ($this->{$this->modelClass}->save($data, false)) {                        $c_id = $this->{$this->modelClass}->id;                        //log                        $insert_id = $this->{$this->modelClass}->getLastInsertId();                        $text_action = "added";                        $json_data = json_encode($this->request->data);                        $this->global_logs("usermgmts", $insert_id, 0, $text_action, $json_data);                        $last_id_logic = str_pad($count_vendor + 1, 4, "0", STR_PAD_LEFT);                        $unique_id_vendor = 'VP' . $citycode . $last_id_logic;                        $update_vp_data[$this->modelClass]['uniqid'] = $unique_id_vendor;                        $update_vp_data[$this->modelClass]['id'] = $c_id;                        $update_vp_data[$this->modelClass]['agreement_date'] = date("Y-m-d H:i:s");                        $this->{$this->modelClass}->save($update_vp_data, false);                        $this->loadModel("Company");                        $this->request->data["Company"]["user_id"] = $c_id;                        $this->Company->save($this->data["Company"], false);                        $company_id = $this->Company->getLastInsertID();// save vendor fare                        if (!empty($this->data{$this->modelClass}['company_id'])) {                            $this->loadModel("Company");                            $this->Company->id = $this->data{$this->modelClass}['company_id'];                            $this->Company->saveField('assign', 1);                        }                        $this->loadModel("OperationCity");                        if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {                            $file_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename(str_replace(array(" ", "-", ":"), array("_", "_", "_"), $uploadimageArray['name']));                            if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_folder . DS . $file_name)) {                                $this->resize($file_name, 200, 150, $upload_folder, $thumb_folder);                                /* echo $file_name.'>>>'.$this->{$this->modelClass}->id;                                  die; */                                $this->User->updateAll(array('User.image' => "'" . $file_name . "'"), array('User.id' => $this->{$this->modelClass}->id));//unlink($upload_folder . DS . $file_name);                            } else {                                $is_file_uploaded = 0;                            }                        }                        if (isset($uploadimageArray_proof) && $uploadimageArray_proof['name'] != "") {                            $file_name_proof = $this->{$this->modelClass}->id . '_' . time() . '_' . basename(str_replace(array(" ", "-", ":"), array("_", "_", "_"), $uploadimageArray_proof['name']));                            if (move_uploaded_file($uploadimageArray_proof['tmp_name'], $upload_folder . DS . $file_name_proof)) {                                $this->resize($file_name_proof, 200, 150, $upload_folder, $thumb_folder);                                $this->User->updateAll(array('User.identity_proof_img' => "'" . $file_name_proof . "'"), array('User.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded_proof = 0;                            }                        }                        if (isset($uploadimageArray_proof_passport) && $uploadimageArray_proof_passport['name'] != "") {                            $file_name_proof = $this->{$this->modelClass}->id . '_' . time() . '_' . basename(str_replace(array(" ", "-", ":"), array("_", "_", "_"), $uploadimageArray_proof_passport['name']));                            if (move_uploaded_file($uploadimageArray_proof_passport['tmp_name'], $upload_folder . DS . $file_name_proof)) {                                $this->resize($file_name_proof, 200, 150, $upload_folder, $thumb_folder);                                $this->User->updateAll(array('User.passport_proof_img' => "'" . $file_name_proof . "'"), array('User.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded_proof = 0;                            }                        }                        if (isset($uploadimageArray_proof_aadhar) && $uploadimageArray_proof_aadhar['name'] != "") {                            $file_name_proof = $this->{$this->modelClass}->id . '_' . time() . '_' . basename(str_replace(array(" ", "-", ":"), array("_", "_", "_"), $uploadimageArray_proof_aadhar['name']));                            if (move_uploaded_file($uploadimageArray_proof_aadhar['tmp_name'], $upload_folder . DS . $file_name_proof)) {                                $this->resize($file_name_proof, 200, 150, $upload_folder, $thumb_folder);                                $this->User->updateAll(array('User.aadhar_proof_img' => "'" . $file_name_proof . "'"), array('User.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded_proof = 0;                            }                        }//$uploadimageArray_proof_license                        if (isset($uploadimageArray_proof_license) && $uploadimageArray_proof_license['name'] != "") {                            $file_name_proof = $this->{$this->modelClass}->id . '_' . time() . '_' . basename(str_replace(array(" ", "-", ":"), array("_", "_", "_"), $uploadimageArray_proof_license['name']));                            if (move_uploaded_file($uploadimageArray_proof_license['tmp_name'], $upload_folder . DS . $file_name_proof)) {                                $this->resize($file_name_proof, 200, 150, $upload_folder, $thumb_folder);                                $this->User->updateAll(array('User.license_proof_img' => "'" . $file_name_proof . "'"), array('User.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded_proof = 0;                            }                        }                        if (isset($this->data['OperationCity']["state_id"][0]) && !empty($this->data['OperationCity']["state_id"][0])) {                            $operationcity = array();                            $oc = 0;                            foreach ($this->data['OperationCity']["state_id"] as $key => $value) {                                $this->OperationCity->create();                                $operationcity["OperationCity"]['user_id'] = $c_id;                                $operationcity["OperationCity"]['company_id'] = $company_id;                                $operationcity["OperationCity"]["state_id"] = $this->data['OperationCity']['state_id'][$oc];                                $operationcity["OperationCity"]["city_id"] = $this->data['OperationCity']['city_id'][$oc];                                $operationcity["OperationCity"]["garage_address"] = $this->data['OperationCity']['garage_address'][$oc];                                $operationcity["OperationCity"]["lat"] = $this->data['OperationCity']['lat'][$oc];                                $operationcity["OperationCity"]["lng"] = $this->data['OperationCity']['lng'][$oc];                                $operationcity["OperationCity"]["status"] = 1;// Save All Data                                $this->OperationCity->saveAll($operationcity);                                $oc++;                            }                        }                        $this->loadModel('CompanyInformation');                        if (isset($this->data["CompanyInformation"]['image']) && !empty($this->data["CompanyInformation"]['image'])) {                            $images = array();                            $i = 0;                            $c_id = $this->{$this->modelClass}->id;                            foreach ($this->data["CompanyInformation"]['image'] as $key => $value) {                                if (!empty($value["tmp_name"])) {                                    $filename = time() . str_replace(" ", "_", $value['name']);                                    $filename = time() . str_replace("/", "_", $filename);                                    move_uploaded_file($this->data['CompanyInformation']['image'][$i]['tmp_name'], USER_DOC_STORE_PATH . $filename);                                    $images["CompanyInformation"]['user_id'] = $c_id;                                    $images["CompanyInformation"]['company_id'] = $this->Company->getLastInsertID();                                    $images["CompanyInformation"]["image"] = $filename;                                    $this->CompanyInformation->saveAll($images);                                }                                $i++;                            }                        }//email//                        $email = $email_user;                        $this->VendorSingupMail($email, $pass, $vendor_name, $vendor_phone, $unique_id_vendor);//end mail//                        $this->Session->setFlash(__('Vendor partner has been added'), 'success');                        $this->redirect(array('action' => 'Individual'));                    } else {                        $this->data = $this->request->data;                        $this->loadModel('Country');                        $country = $this->Country->find('list', array('order' => 'created desc'));                        $this->loadModel('State');                        $state = $this->State->find("list", array("conditions" => array("country_id" => 1)), array("order" => "created desc"));                        $this->loadModel('City');                        $city = $this->City->find("list", array("conditions" => array("state_id" => $this->request->data['Company']['state_id'])), array("order" => "created desc"));                    }                } else {                    $this->data = $this->request->data;                    $this->loadModel('Country');                    $country = $this->Country->find('list', array('order' => 'created desc'));                    $this->loadModel('State');                    $state = $this->State->find("list", array("conditions" => array("country_id" => 1)), array("order" => "created desc"));                    $this->loadModel('City');                    $city = $this->City->find("list", array("conditions" => array("state_id" => $this->request->data['Company']['state_id'])), array("order" => "created desc"));//$this->Session->setFlash(__('Corporate business has not been added.'), 'error');                }            }        } else {            $this->loadModel('State');            $state = $this->State->find("list", array("conditions" => array("country_id" => '1')), array("order" => "created desc"));        }        $this->set('country', $country);        $this->set('state', $state);        $this->set('city', $city);        $this->loadModel("Company");        $company = $this->Company->find("list", array("conditions" => array("status" => 1, "assign" => 0)));        $this->set("company", $company);//$this->loadModel("MotorType");//        $motortype = $this->MotorType->find("list", array("conditions" => array("status" => 1)));//        $this->set("motortype", $motortype);//        $this->loadModel("Airport");//        $airports = $this->Airport->find("list", array("conditions" => array("status" => 'A')));//        $this->set("airports", $airports);//        $this->loadModel("Timemgmt");//        $timemgmt = $this->Timemgmt->find("list", array("conditions" => array("status" => 1)));//        $this->set("timemgmt", $timemgmt);        $this->set('title_for_layout', 'Add New Vendor');    }    public function VendorSingupMail($email = '', $pass = '', $vendor_name = '', $vendor_phone = '', $unique_id_vendor = '') {//         $email = "deepak.sharma@brsoftech.org"; //         $pass = 123456;//        $vendor_name = "deepak";//        $vendor_phone = "90001209889";//        $unique_id_vendor="dddddd";        $arr_var = array();        $arr_var['User']['email'] = $email;        $arr_var['User']['vendor_name'] = $vendor_name;        $arr_var['User']['pass'] = $pass;        $arr_var['User']['vendor_phone'] = $vendor_phone;        $arr_var['User']['unique_id_vendor'] = $unique_id_vendor;        $Email = new CakeEmail();        $Email->from(Configure::read("Site.email"))                ->to($email)                ->subject('Welcome to ' . Configure::read('Site.title') . '!')                ->template("register")                ->emailFormat("html")                ->viewVars(array('arr_var' => $arr_var))                ->send();        return true;    }    function update_pass() {        $email = "ankkit.raghav@supercabz.com";//$email = "rajesh.kumar@supercabz.com";        $pass = 123456;        $vendor_name = "Test";        $vendor_phone = "90001209889";        $unique_id_vendor = "VPDH0034";        $arr_var = array();        $arr_var['User']['email'] = $email;        $arr_var['User']['vendor_name'] = $vendor_name;        $arr_var['User']['pass'] = $pass;        $arr_var['User']['vendor_phone'] = $vendor_phone;        $arr_var['User']['unique_id_vendor'] = $unique_id_vendor;        $Email = new CakeEmail();        $Email->from(Configure::read("Site.email"))                ->to($email)                ->subject('Welcome to ' . Configure::read('Site.title') . '!')                ->template("register")                ->emailFormat("html")                ->viewVars(array('arr_var' => $arr_var))                ->send();        exit;        $this->loadModel('User');        $check_duplicate = $this->User->find('all', array(            'conditions' => array(                'User.user_role_id' => 4            ),            'fields' => array('mobile', 'id'),            'recursive' => -1        ));//pr($check_duplicate);//exit;        foreach ($check_duplicate as $datas) {            $this->User->create();            $pass = $datas['User']['mobile'];            $password = AuthComponent::password($pass);            $this->User->updateAll(array('User.password' => "'$password'"), array('User.id' => $datas['User']['id']));        }        exit;    }    function insert_driver_log($driver_id, $description = '', $status = '', $user_type = '', $user_id = '', $user_name = '', $all_data = '') {        if ($driver_id) {            $this->loadModel("DriverLog");            $ArrIns = array();            $ArrIns['DriverLog']['driver_id'] = $driver_id;            $ArrIns['DriverLog']['description'] = $description;            $ArrIns['DriverLog']['status'] = $status;            $ArrIns['DriverLog']['user_type'] = $user_type;            $ArrIns['DriverLog']['user_id'] = $user_id;            $ArrIns['DriverLog']['user_name'] = $user_name;            $ArrIns['DriverLog']['created'] = date("Y-m-d H:i:s");            $ArrIns['DriverLog']['all_data'] = $all_data ? json_encode($all_data) : "";            $this->DriverLog->save($ArrIns);        }        return true;    }    function add_driver() {        $this->set('tab_open', 'partners');        $is_success = 1;        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('Driver', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'driver');        $breadcrumb = array('pages' => $pages, 'active' => __('Add Driver', true));        $this->set('breadcrumb', $breadcrumb);        if (!empty($this->data)) {            $this->loadModel('User');            $check_duplicate = $this->User->find('count', array(                'conditions' => array(                    'User.mobile' => $this->request->data['Usermgmt']['mobile'],                    'User.user_role_id' => 4                ),                'recursive' => -1            ));            if ($check_duplicate > 0) {                $this->Session->setFlash(__('This mobile number already exist.'), 'error');                $this->redirect(array('plugin' => false, 'controller' => 'driver', 'action' => 'add'));            }//pr($this->request->data);die;            $image = '';            $data_chk['firstname'] = $this->data{$this->modelClass}['firstname'];            $data_chk['lastname'] = $this->data{$this->modelClass}['lastname'];            $data_chk['mobile'] = $this->data{$this->modelClass}['mobile'];//$data_chk['license_no'] = $this->data{$this->modelClass}['license_no'];            $this->{$this->modelClass}->set($data_chk);//pr($this->Usermgmt->addDriver());exit;            if ($this->Usermgmt->addDriver()) {                $filename = $this->data{$this->modelClass}['image']['name'];                if (isset($this->request->data{$this->modelClass}['image']) && $this->request->data{$this->modelClass}['image']['name'] != "") {                    $allowed_extensions = array('jpg', 'jpeg', 'png', 'gif');                    $uploaded_image = $this->request->data{$this->modelClass}['image']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Driver Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadimageArray = $this->request->data{$this->modelClass}['image'];                    unset($this->request->data{$this->modelClass}['image']);                } else {                    unset($this->request->data{$this->modelClass}['image']);                }                $upload_image_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'photos';                $upload_address_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'address';                $upload_currentaddress_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'currentaddress';                $upload_criminal_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'criminal';                $upload_reference_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'reference';                $upload_dl_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'dl';                $upload_adhaar_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'adhaar';                $upload_voter_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'voter';                $rationcard_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'rationcard';                if (isset($this->request->data{$this->modelClass}['address_verification_doc']) && $this->request->data{$this->modelClass}['address_verification_doc']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['address_verification_doc']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Address Verification document extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadaddressArray = $this->request->data['Usermgmt']['address_verification_doc'];                    unset($this->request->data{$this->modelClass}['address_verification_doc']);                } else {                    unset($this->request->data{$this->modelClass}['address_verification_doc']);                }//Current address verfication                if (isset($this->request->data{$this->modelClass}['curr_address_verification_doc']) && $this->request->data{$this->modelClass}['curr_address_verification_doc']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['curr_address_verification_doc']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Current Address Verification document extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadcurrentaddressArray = $this->request->data['Usermgmt']['curr_address_verification_doc'];                    unset($this->request->data{$this->modelClass}['curr_address_verification_doc']);                } else {                    unset($this->request->data{$this->modelClass}['curr_address_verification_doc']);                }//End                if (isset($this->request->data{$this->modelClass}['criminal_background_doc']) && $this->request->data{$this->modelClass}['criminal_background_doc']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['criminal_background_doc']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Criminal Background document extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadcriminalArray = $this->request->data['Usermgmt']['criminal_background_doc'];                    unset($this->request->data{$this->modelClass}['criminal_background_doc']);                } else {                    unset($this->request->data{$this->modelClass}['criminal_background_doc']);                }                if (isset($this->request->data{$this->modelClass}['reference_verification']) && $this->request->data{$this->modelClass}['reference_verification']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['reference_verification']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Reference Verification document extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadreferenceArray = $this->request->data{$this->modelClass}['reference_verification'];                    unset($this->request->data{$this->modelClass}['reference_verification']);                } else {                    unset($this->request->data{$this->modelClass}['reference_verification']);                }                if (isset($this->request->data{$this->modelClass}['driving_licence']) && $this->request->data{$this->modelClass}['driving_licence']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['driving_licence']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Driving Licence extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $drivinglicenceArray = $this->request->data['Usermgmt']['driving_licence'];                    unset($this->request->data{$this->modelClass}['driving_licence']);                } else {                    unset($this->request->data{$this->modelClass}['driving_licence']);                }                if (isset($this->request->data{$this->modelClass}['adhaar_card']) && $this->request->data{$this->modelClass}['adhaar_card']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['adhaar_card']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Driving Licence extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $adhaarcardArray = $this->request->data['Usermgmt']['adhaar_card'];                    unset($this->request->data{$this->modelClass}['adhaar_card']);                } else {                    unset($this->request->data{$this->modelClass}['adhaar_card']);                }                if (isset($this->request->data{$this->modelClass}['driver_voter_id']) && $this->request->data{$this->modelClass}['driver_voter_id']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['driver_voter_id']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Voter ID extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $voterIDArray = $this->request->data['Usermgmt']['driver_voter_id'];                    unset($this->request->data{$this->modelClass}['driver_voter_id']);                } else {                    unset($this->request->data{$this->modelClass}['driver_voter_id']);                }                if (isset($this->request->data{$this->modelClass}['ration_card_doc']) && $this->request->data{$this->modelClass}['ration_card_doc']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['ration_card_doc']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Ration card extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $RationcardArray = $this->request->data['Usermgmt']['ration_card_doc'];                    unset($this->request->data{$this->modelClass}['ration_card_doc']);                } else {                    unset($this->request->data{$this->modelClass}['ration_card_doc']);                }                $data = array();                $data['user_role_id'] = 4;                $phone_no = $this->data{$this->modelClass}['mobile'];                $pass = $phone_no;                $data['password'] = AuthComponent::password($pass);///$data['password'] = AuthComponent::password($this->data{$this->modelClass}['password']);                $this->loadModel('Company');                $cdata = $this->Company->findById($this->data['Usermgmt']['company_id']);                $udata = $this->{$this->modelClass}->findById($cdata['Company']['user_id']);                if ($udata['Usermgmt']['user_role_id'] == 5) {                    $data['type'] = 1;                }                $data['firstname'] = $this->data{$this->modelClass}['firstname'];                $data['vendor_id'] = $cdata['Company']['user_id'];                $data['dob'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['dob']));                $data['license_to'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['license_to']));                $data['batch_start_date'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['batch_start_date']));                $data['batch_end_date'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['batch_end_date']));                $data['license_from'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['license_from']));                $data['license_to'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['license_to']));                $data['lastname'] = $this->data{$this->modelClass}['lastname'];// $this->request->data{$this->modelClass}['status'] = 1;                if ($this->Auth->user('user_role_id') == 6) {                    if ($this->Auth->user('vehicle_verification') != 1) {                        $this->request->data['Usermgmt']['verified'] = 2;                        $this->request->data['Usermgmt']['status'] = 2;                    } else {                        $this->request->data['Usermgmt']['verified'] = 1;                        $this->request->data['Usermgmt']['status'] = $this->data{$this->modelClass}['status'];                    }                } else {                    $this->request->data['Usermgmt']['verified'] = 1;                    $this->request->data['Usermgmt']['status'] = $this->data{$this->modelClass}['status'];                }                $data['verified'] = $this->request->data['Usermgmt']['verified'];                $data['status'] = $this->request->data['Usermgmt']['status'];                $this->loadModel('City');                $cityData = $this->City->findById($this->data['Usermgmt']['city_id']);                $citycode = $cityData['City']['city_code'];                $unid = time();                $data['uniqid'] = $unid;//count //                $this->loadModel('User');                $count_vendor = $this->User->find('count', array(                    'conditions' => array(                        'User.user_role_id' => 4                    ),                ));//end//pr($data); die;                $this->{$this->modelClass}->set($this->request->data);                if ($is_success == 1) {                    if ($this->{$this->modelClass}->save($data, false)) {                        $newly_added_driver_id = $this->{$this->modelClass}->id;                        $last_add_driver_id = str_pad($count_vendor + 1, 4, "0", STR_PAD_LEFT);                        $update_driver_data[$this->modelClass]['uniqid'] = 'DR' . $citycode . $last_add_driver_id;                        $update_driver_data[$this->modelClass]['id'] = $newly_added_driver_id;                        $this->{$this->modelClass}->save($update_driver_data, false);//insert into logs and alerts//                        if ($this->Auth->user('user_role_id') == 1) {                            $user_type = 0;                        } else {                            $user_type = 1;                        }                        $description = "Driver Added";                        $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                        $all_data = $this->request->data;                        $this->insert_driver_log($newly_added_driver_id, $description, 0, $user_type, $this->Auth->user('id'), $user_name, $all_data);                        if ($this->Auth->user('user_role_id') == 6) {                            if ($this->Auth->user('driver_verification') != 1) {                                $this->insert_alerts("usermgmt", "index", 'partners', 'New Driver Added', 'driver_verification');                            }                        }//ends////// sending message to driver for login info //// sending message to driver for login info                         $name_driver = $this->data{$this->modelClass}['firstname'];                        $msg = "Hello " . $name_driver . ", Welcome to Super Cabz! Click on http://www.supercabz.com/app_download/SuperCabz.apk to download Super Cabz mobile app. Login with your username " . $update_driver_data[$this->modelClass]['uniqid'] . " and password " . $phone_no;//$msg = "Welcome to Supercabz your Login ID " . $update_driver_data[$this->modelClass]['uniqid'] . " and password " . $phone_no;                        $phone_no = '+91' . $phone_no;                        $res = $this->send_message($phone_no, $msg, 1);                        if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {                            $file_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadimageArray['name']);                            $file_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_name);                            if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_image_folder . DS . $file_name)) {                                $this->{$this->modelClass}->updateAll(array('Usermgmt.image' => "'" . $file_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded = 0;                            }                        }                        if (isset($uploadaddressArray) && $uploadaddressArray['name'] != "") {                            $file_address_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadaddressArray['name']);                            $file_address_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_address_name);                            if (move_uploaded_file($uploadaddressArray['tmp_name'], $upload_address_folder . DS . $file_address_name)) {                                $this->{$this->modelClass}->updateAll(array('Usermgmt.address_verification_doc' => "'" . $file_address_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded = 0;                            }                        }                        if (isset($uploadcurrentaddressArray) && $uploadcurrentaddressArray['name'] != "") {                            $file_currentaddress_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadcurrentaddressArray['name']);                            $file_currentaddress_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_currentaddress_name);                            if (move_uploaded_file($uploadcurrentaddressArray['tmp_name'], $upload_currentaddress_folder . DS . $file_currentaddress_name)) {                                $this->{$this->modelClass}->updateAll(array('Usermgmt.curr_address_verification_doc' => "'" . $file_currentaddress_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded = 0;                            }                        }                        if (isset($uploadcriminalArray) && $uploadcriminalArray['name'] != "") {                            $file_criminal_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadcriminalArray['name']);                            $file_criminal_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_criminal_name);                            if (move_uploaded_file($uploadcriminalArray['tmp_name'], $upload_criminal_folder . DS . $file_criminal_name)) {                                $this->{$this->modelClass}->updateAll(array('Usermgmt.criminal_background_doc' => "'" . $file_criminal_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded = 0;                            }                        }                        if (isset($uploadreferenceArray) && $uploadreferenceArray['name'] != "") {                            $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadreferenceArray['name']);                            $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                            if (move_uploaded_file($uploadreferenceArray['tmp_name'], $upload_reference_folder . DS . $file_reference_name)) {                                $this->{$this->modelClass}->updateAll(array('Usermgmt.reference_verification' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded = 0;                            }                        }                        if (isset($drivinglicenceArray) && $drivinglicenceArray['name'] != "") {                            $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($drivinglicenceArray['name']);                            $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                            if (move_uploaded_file($drivinglicenceArray['tmp_name'], $upload_dl_folder . DS . $file_reference_name)) {                                $this->{$this->modelClass}->updateAll(array('Usermgmt.driving_licence' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded = 0;                            }                        }                        if (isset($adhaarcardArray) && $adhaarcardArray['name'] != "") {                            $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($adhaarcardArray['name']);                            $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                            if (move_uploaded_file($adhaarcardArray['tmp_name'], $upload_adhaar_folder . DS . $file_reference_name)) {                                $this->{$this->modelClass}->updateAll(array('Usermgmt.adhaar_card' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded = 0;                            }                        }                        if (isset($RationcardArray) && $RationcardArray['name'] != "") {                            $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($RationcardArray['name']);                            $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                            if (move_uploaded_file($RationcardArray['tmp_name'], $rationcard_folder . DS . $file_reference_name)) {                                $this->{$this->modelClass}->updateAll(array('Usermgmt.ration_card_doc' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                            } else {                                $is_file_uploaded = 0;                            }                        }                        $this->loadModel('DriverInformation');                        if (isset($this->data["DriverInformation"]['image']) && !empty($this->data["DriverInformation"]['image'])) {                            $images = array();                            $i = 0;                            $c_id = $this->{$this->modelClass}->id;                            foreach ($this->data["DriverInformation"]['image'] as $key => $value) {                                if (!empty($value["tmp_name"])) {                                    $filename = time() . str_replace(" ", "_", $value['name']);                                    $filename = time() . str_replace("/", "_", $filename);                                    move_uploaded_file($this->data['DriverInformation']['image'][$i]['tmp_name'], USER_DOC_STORE_PATH . $filename);//$this->Upload->upload($value,TAXI_DOC_STORE_PATH,$filename);                                    $images["DriverInformation"]['user_id'] = $this->{$this->modelClass}->getLastInsertID();                                    $images["DriverInformation"]['company_id'] = $this->data['Usermgmt']['company_id'];//$images["CompanyInformation"]["taxi_id"] = $id;                                    $images["DriverInformation"]["image"] = $filename;                                    $this->DriverInformation->saveAll($images);//pr($images);                                }                                $i++;                            }                        }                        $this->Session->setFlash(__('Driver has been added'), 'success');                        $this->redirect(array('action' => 'driver'));                    }                } else {//$this->Session->setFlash(__('Driver has not been added.'), 'error');                }            }        }        $this->loadModel("Country");        $this->loadModel("User");        $this->loadModel("State");        $this->loadModel("Company");        $country = $this->Country->find("list", array("conditions" => array("status" => "A")));//$company = $this->Company->find("list", array("conditions" => array("status" => 1)));        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'fields' => array(                'Company.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['Company']['id']] = $vl['Company']['name'] . ' ( ' . $vl['User']['uniqid'] . ' ) ';            }        }        $vlarray = array();        $vendors_list = $this->User->find('all', array(            'conditions' => array(                'User.user_role_id' => 2            ),            'fields' => array(                'User.id', 'User.uniqid', 'User.email', 'User.firstname', 'User.lastname'            )        ));        if (!empty($vendors_list)) {            foreach ($vendors_list as $key => $vl) {                $vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' ) ';            }        }        $this->set("country", $country);//$this->set("vendors_list", $vendors_list);        $this->set("vendors_list", $vlarray);        $this->loadModel("UserState");        $state = $this->UserState->find("list", array("fields" => array("state_id", "state_name")));        $this->set("state", $state);        $this->set("company", $companyarray);        $this->set('title_for_layout', 'Add New Driver');    }    function add_company() {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('company', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'company');        $breadcrumb = array('pages' => $pages, 'active' => __('Add company', true));        $this->set('breadcrumb', $breadcrumb);        if (!empty($this->data)) {            $image = '';            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->validates()) {                $filename = $this->data{$this->modelClass}['image']['name'];                if ($filename != '') {                    $tempPath = $this->data{$this->modelClass}['image']['tmp_name'];                    $new_file_name = time() . '_' . $filename;                    if (move_uploaded_file($tempPath, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name)) {                        $image = $new_file_name;                    } else {                        $image = '';                    }                } else {                    $image = '';                }                $data = array();                $data['user_role_id'] = 2;                $data['firstname'] = $this->data{$this->modelClass}['firstname'];                $data['lastname'] = $this->data{$this->modelClass}['lastname'];                $data['username'] = $this->data{$this->modelClass}['username'];                $data['email'] = $this->data{$this->modelClass}['email'];                $data['password'] = AuthComponent::password($this->data{$this->modelClass}['password']);                $data['status'] = $this->data{$this->modelClass}['status'];                $data['active'] = 1;                $data['image'] = $image;//pr($data); die;                if ($this->{$this->modelClass}->save($data, false)) {                    $this->Session->setFlash(__('company has been added'), 'success');                    $this->redirect(array('action' => 'company'));                } else {                    $this->Session->setFlash(__('company has not been added.'), 'error');                }            }        }        $this->loadModel("Country");        $this->loadModel("User");        $country = $this->Country->find("list", array("conditions" => array("status" => 1)));        $company = $this->User->find("list", array("conditions" => array("status" => 1, "user_role_id" => 2)));        $this->set("country", $country);        $this->set("company", $company);    }    function edit($user_id = 0, $id = null) {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('Employee', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'index');        $breadcrumb = array('pages' => $pages, 'active' => __('Edit Employee', true));        $this->set('breadcrumb', $breadcrumb);        $parentdata = $this->{$this->modelClass}->read(null, $user_id);        $this->set("id", $user_id);        $users = $this->{$this->modelClass}->find('list', array('fields' => array('username'))); // to get list for dropdowns        $this->set("users", $users);        $this->set("result", $parentdata);        if (!empty($this->data)) {            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->EditValidate()) {                $filename = $this->data{$this->modelClass}['image']['name'];                if ($filename != '') {                    $tempPath = $this->data{$this->modelClass}['image']['tmp_name'];                    $new_file_name = time() . '_' . $filename;                    if (move_uploaded_file($tempPath, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name)) {                        $image = $new_file_name;                    } else {                        $image = $parentdata{$this->modelClass}['image'];                    }                } else {                    $image = $parentdata{$this->modelClass}['image'];                }                $data['firstname'] = $this->data{$this->modelClass}['firstname'];                $data['lastname'] = $this->data{$this->modelClass}['lastname'];                $data['username'] = $this->data{$this->modelClass}['username'];                $data['email'] = $this->data{$this->modelClass}['email'];                $data['status'] = $this->data{$this->modelClass}['status'];                $data['image'] = $image;                $this->{$this->modelClass}->id = $user_id;                if ($this->{$this->modelClass}->save($data, false)) {                    $this->Session->setFlash(__('Employee has been edited'), 'success');                } else {                    $this->Session->setFlash(__('Error saving Employee.'), 'error');                }                $this->redirect(array('action' => 'index'));            }        } else {            if ($user_id == null)                die(__("No ID received"));            $data = $this->{$this->modelClass}->read(null, $user_id);            unset($data['Usermgmt']['password']);            $this->data = $data;//pr($this->data);        }    }    function edit_customer($user_id = 0, $id = null) {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('Passenger', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'customer');        $breadcrumb = array('pages' => $pages, 'active' => __('Edit Passenger', true));        $this->set('breadcrumb', $breadcrumb);        $parentdata = $this->{$this->modelClass}->read(null, $user_id);        $this->set("id", $user_id);        $users = $this->{$this->modelClass}->find('list', array('fields' => array('username'))); // to get list for dropdowns        $this->set("users", $users);        $this->set("result", $parentdata);        $this->loadModel('Country');        $country = $this->Country->find('list', array('order' => 'created desc'));        $this->set('country', $country);        if (!empty($this->data)) {            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->EditValidate()) {//pr($this->data); die;                $filename = $this->data{$this->modelClass}['image']['name'];                if ($filename != '') {                    $tempPath = $this->data{$this->modelClass}['image']['tmp_name'];                    $new_file_name = time() . '_' . $filename;                    if (move_uploaded_file($tempPath, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name)) {                        $image = $new_file_name;                    } else {                        $image = $parentdata{$this->modelClass}['image'];                    }                } else {                    $image = $parentdata{$this->modelClass}['image'];                }                $data = array();                $data['firstname'] = $this->data{$this->modelClass}['firstname'];//$data['lastname']		=	$this->data{$this->modelClass}['lastname'];                $data['username'] = $this->data{$this->modelClass}['firstname'];                $data['email'] = $this->data{$this->modelClass}['email'];//$data['password']		=	AuthComponent::password($this->data{$this->modelClass}['password']);                $data['status'] = $this->data{$this->modelClass}['status'];                $data['active'] = 1;                $data['image'] = $image;                $this->{$this->modelClass}->id = $user_id;                if ($this->{$this->modelClass}->save($data, false)) {                    $this->Session->setFlash(__('Passenger has been updated'), 'success');                } else {                    $this->Session->setFlash(__('Error updating Passenger.'), 'error');                }                $this->redirect(array('action' => 'customer'));            }        } else {            if ($user_id == null)                die(__("No ID received"));            $data = $this->{$this->modelClass}->read(null, $user_id);            unset($data['Usermgmt']['password']);            $this->data = $data;//pr($this->data);        }    }    function edit_employee($user_id = 0, $id = null) {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('Passenger', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'employee');        $breadcrumb = array('pages' => $pages, 'active' => __('Edit employee', true));        $this->set('breadcrumb', $breadcrumb);        $parentdata = $this->{$this->modelClass}->read(null, $user_id);        $this->set("id", $user_id);        $users = $this->{$this->modelClass}->find('list', array('fields' => array('username'))); // to get list for dropdowns        $this->set("users", $users);        $this->set("result", $parentdata);        $this->loadModel('Country');        $country = $this->Country->find('list', array('order' => 'created desc'));        $this->set('country', $country);        if (!empty($this->data)) {            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->EditValidate()) {                unset($this->request->data['User']['emp_id']);                $filename = $this->data{$this->modelClass}['image']['name'];                if ($filename != '') {                    $tempPath = $this->data{$this->modelClass}['image']['tmp_name'];                    $new_file_name = time() . '_' . $filename;                    if (move_uploaded_file($tempPath, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name)) {                        $image = $new_file_name;                    } else {                        $image = $parentdata{$this->modelClass}['image'];                    }                } else {                    $image = $parentdata{$this->modelClass}['image'];                }                $data = array();                $data['firstname'] = $this->data{$this->modelClass}['firstname'];//$data['lastname']		=	$this->data{$this->modelClass}['lastname'];                $data['username'] = $this->data{$this->modelClass}['firstname'];                $data['email'] = $this->data{$this->modelClass}['email'];//$data['password']		=	AuthComponent::password($this->data{$this->modelClass}['password']);                $data['status'] = $this->data{$this->modelClass}['status'];                $data['active'] = 1;                $data['image'] = $image;                $this->{$this->modelClass}->id = $user_id;//pr($data);die;                if ($this->{$this->modelClass}->save($data, false)) {                    $this->Session->setFlash(__('employee has been updated'), 'success');                } else {                    $this->Session->setFlash(__('Error updating employee.'), 'error');                }                $this->redirect(array('action' => 'employee'));            }        } else {            if ($user_id == null)                die(__("No ID received"));            $data = $this->{$this->modelClass}->read(null, $user_id);            unset($data['Usermgmt']['password']);            $this->data = $data;//pr($this->data);        }    }    function edit_individual($user_id = 0, $id = null) {        $this->set('tab_open', 'partners');        $this->{$this->modelClass}->hasOne = array("Company" => array("className" => "Company", "foreignKey" => "user_id"));        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $pages[__('Customer', true)] = array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'individual');        $breadcrumb = array('pages' => $pages, 'active' => __('Edit Individual', true));        $this->set('breadcrumb', $breadcrumb);        $this->{$this->modelClass}->unbindModel(array('belongsTo' => array('Company')), false);        $parentdata = $this->{$this->modelClass}->read(null, $user_id);        $this->set("id", $user_id);        $users = $this->{$this->modelClass}->find('list', array('fields' => array('username'))); // to get list for dropdowns        $this->set("users", $users);//pr($parentdata);        $this->set("result", $parentdata);//pr($parentdata); exit;        if (!empty($result['OperationCity'])) {            $lat = $result['OperationCity'][0]['lat'];            $lng = $result['OperationCity'][0]['lng'];        } else {            $lat = '26.826651';            $lng = '75.999';        }        $this->set("lat", $lat);        $this->set("lng", $lng);        $d = $this->{$this->modelClass}->findById($user_id);        $this->loadModel('OperationCity');        $oData = $this->OperationCity->find('all', array('conditions' => array('user_id' => $d['Usermgmt']['id'])));        $this->set('oData', $oData);        if (!empty($this->data)) {            $this->loadModel('User');            $check_duplicate = $this->User->find('count', array(                'conditions' => array(                    'User.mobile' => $this->request->data['Usermgmt']['mobile'],                    'User.user_role_id' => 2,                    'User.id !=' => $user_id                ),                'recursive' => -1            ));            if ($check_duplicate > 0) {                $this->Session->setFlash(__('This mobile number already exist.'), 'error');                $this->redirect(array('plugin' => "usermgmt", 'controller' => 'usermgmt', 'action' => 'edit_individual', $user_id));            }            $this->request->data{$this->modelClass}['id'] = $user_id;///pr($this->data);exit();// pr($this->data);exit();	            $data_chk[$this->modelClass]['firstname'] = $this->data{$this->modelClass}['firstname'];            $data_chk[$this->modelClass]['lastname'] = $this->data{$this->modelClass}['lastname'];            $data_chk[$this->modelClass]['mobile'] = $this->data{$this->modelClass}['mobile'];//$data_chk['license_no'] = $this->data{$this->modelClass}['license_no'];            $this->{$this->modelClass}->set($data_chk);//  pr($this->Usermgmt->EditValidate());exit;            if ($this->Usermgmt->EditValidate()) {//$this->{$this->modelClass}->set($this->data);//if ($this->{$this->modelClass}->EditValidate()) {                $filename = $this->data{$this->modelClass}['image']['name'];                if ($filename != '') {                    $tempPath = $this->data{$this->modelClass}['image']['tmp_name'];                    $new_file_name = time() . '_' . $filename;                    if (move_uploaded_file($tempPath, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name)) {                        $image = $new_file_name;                    } else {                        $image = $parentdata{$this->modelClass}['image'];                    }                } else {                    $image = $parentdata{$this->modelClass}['image'];                }                $filename_identity_proof = $this->data{$this->modelClass}['identity_proof_img']['name'];                if ($filename_identity_proof != '') {                    $tempPath_proof = $this->data{$this->modelClass}['identity_proof_img']['tmp_name'];                    $new_file_name_proof = time() . '_' . $filename_identity_proof;                    if (move_uploaded_file($tempPath_proof, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name_proof)) {                        $image_proof = $new_file_name_proof;                    } else {                        $image_proof = $parentdata{$this->modelClass}['identity_proof_img'];                    }                } else {                    $image_proof = $parentdata{$this->modelClass}['identity_proof_img'];                }                $filename_identity_proof = $this->data{$this->modelClass}['passport_proof_img']['name'];                if ($filename_identity_proof != '') {                    $tempPath_proof = $this->data{$this->modelClass}['passport_proof_img']['tmp_name'];                    $new_file_name_proof = time() . '_' . $filename_identity_proof;                    if (move_uploaded_file($tempPath_proof, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name_proof)) {                        $image_proof_passport = $new_file_name_proof;                    } else {                        $image_proof_passport = $parentdata{$this->modelClass}['passport_proof_img'];                    }                } else {                    $image_proof_passport = $parentdata{$this->modelClass}['passport_proof_img'];                }                $filename_identity_proof = $this->data{$this->modelClass}['aadhar_proof_img']['name'];                if ($filename_identity_proof != '') {                    $tempPath_proof = $this->data{$this->modelClass}['aadhar_proof_img']['tmp_name'];                    $new_file_name_proof = time() . '_' . $filename_identity_proof;                    if (move_uploaded_file($tempPath_proof, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name_proof)) {                        $image_proof_aadhar = $new_file_name_proof;                    } else {                        $image_proof_aadhar = $parentdata{$this->modelClass}['aadhar_proof_img'];                    }                } else {                    $image_proof_aadhar = $parentdata{$this->modelClass}['aadhar_proof_img'];                }                $filename_identity_proof = $this->data{$this->modelClass}['license_proof_img']['name'];                if ($filename_identity_proof != '') {                    $tempPath_proof = $this->data{$this->modelClass}['license_proof_img']['tmp_name'];                    $new_file_name_proof = time() . '_' . $filename_identity_proof;                    if (move_uploaded_file($tempPath_proof, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name_proof)) {                        $image_proof_license = $new_file_name_proof;                    } else {                        $image_proof_license = $parentdata{$this->modelClass}['license_proof_img'];                    }                } else {                    $image_proof_license = $parentdata{$this->modelClass}['license_proof_img'];                }                $data = array();                $this->loadModel('CompanyInformation');                if (isset($this->data["CompanyInformation"]['image']) && !empty($this->data["CompanyInformation"]['image'])) {                    $images = array();                    $i = 0;                    foreach ($this->data["CompanyInformation"]['image'] as $key => $value) {                        if (!empty($value["tmp_name"])) {                            $filename = time() . str_replace(" ", "_", $value['name']);                            $filename = time() . str_replace("/", "_", $filename);//pr($value['tmp_name']);exit();                            /* //pr($this->data["CompanyInformation"]['image']);exit();                              $fileData = fread(fopen($this->params['form']['File']['tmp_name'], "r"),                              $this->params['form']['File']['size']); *///pr(TAXI_IMAGE_STORE_PATH);exit();//pr(base64_decode($value['name']));exit();                            move_uploaded_file($this->data['CompanyInformation']['image'][$i]['tmp_name'], USER_DOC_STORE_PATH . $filename);//$this->Upload->upload($value,TAXI_DOC_STORE_PATH,$filename);//$this->Upload->upload($value,TAXI_IMAGE_STORE_PATH,$filename);                            $images["CompanyInformation"]["user_id"] = $user_id;                            $images["CompanyInformation"]["company_id"] = $parentdata['Company']['id'];                            $images["CompanyInformation"]["image"] = $filename;                            $this->CompanyInformation->saveAll($images);                        }                        $i++;                    }                }                $this->loadModel("Company");                /* if($this->data{$this->modelClass}['user_role_id']==5){                  $this->Company->id	=	$d["Company"]["id"];                  if($this->Company->exists()){                  $this->Company->delete($d["Company"]["id"]);                  }                  }else{ */                $this->request->data["Company"]["user_id"] = $user_id;// Conver time into 24 hours//$sfrom = date("H:i", strtotime($this->data['Company']['sfrom']));//$sto = date("H:i", strtotime($this->data['Company']['sto']));                $this->request->data["Company"]["sfrom"] = '';                $this->request->data["Company"]["sto"] = '';// Update Latitude Longitude with Garage Address//if ($this->data['lat'] != '') {//$this->request->data["Company"]["latitude"] = $this->data['lat'];//}//if ($this->data['lng'] != '') {// $this->request->data["Company"]["longitude"] = $this->data['lng'];//}//echo count($this->data['formatted_address']);//$this->request->data["Company"]["gaddress"] = $this->data['Company']['gaddress'];                $this->Company->id = $d["Company"]["id"];//pr($this->request->data["Company"]);exit();                $this->Company->save($this->data["Company"], false);                /* } *///$data['user_role_id']	=	$this->data{$this->modelClass}['user_role_id'];                $data['firstname'] = $this->data{$this->modelClass}['firstname'];//$data['lastname']		=	$this->data{$this->modelClass}['lastname'];                $data['username'] = $this->data{$this->modelClass}['firstname'];                $data['email'] = $this->data{$this->modelClass}['email'];//$data['password']		=	AuthComponent::password($this->data{$this->modelClass}['password']);                $data['status'] = $this->data{$this->modelClass}['status'];                $data['active'] = 1;                $data['image'] = $image;                $data['identity_proof_img'] = $image_proof;                $data['passport_proof_img'] = $image_proof_passport;                $data['aadhar_proof_img'] = $image_proof_aadhar;                $data['license_proof_img'] = $image_proof_license;                $u_id = $this->{$this->modelClass}->id;                $this->{$this->modelClass}->id = $u_id;                $this->loadModel("OperationCity");                if (isset($this->data['OperationCity']["state_id"][0]) && !empty($this->data['OperationCity']["state_id"][0])) {                    $operationcity = array();                    $noperationcity = array();//$oc = Operation City                    $oc = 0;                    foreach ($this->data['OperationCity']["state_id"] as $key => $value) {//$this->OperationCity->id	=	$this -> data['OperationCity']['id'][$oc];//pr($this -> data['OperationCity']);exit();                        /* if(isset($this -> data['OperationCity']['state_id'][$oc])) {                          $this->request->data["OperationCity"]["company_id"] = $d["Company"]["id"];                          }                          if(isset($this -> data['OperationCity']['state_id'][$oc])) {                          $this->request->data["OperationCity"]["user_id"] = $u_id;                          } *///$this->request->data["OperationCity"]["id"]	=	@$this->data["OperationCity"]["id"][$oc];                        $operationcity["user_id"] = $u_id;                        $operationcity["company_id"] = $d["Company"]["id"];                        $operationcity["state_id"] = $this->data['OperationCity']['state_id'][$oc];                        if (isset($this->data['OperationCity']['state_id'][$oc])) {                            $operationcity["state_id"] = $this->data['OperationCity']['state_id'][$oc];                        }                        if (isset($this->data['OperationCity']['city_id'][$oc])) {                            $operationcity["city_id"] = $this->data['OperationCity']['city_id'][$oc];                        }                        if (isset($this->data['OperationCity']['garage_address'][$oc])) {                            $operationcity["garage_address"] = $this->data['OperationCity']['garage_address'][$oc];                        }                        if (isset($this->data['OperationCity']['lat'][$oc])) {                            $operationcity["lat"] = $this->data['OperationCity']['lat'][$oc];                        }                        if (isset($this->data['OperationCity']['lng'][$oc])) {                            $operationcity["lng"] = $this->data['OperationCity']['lng'][$oc];                        }                        if (@$this->data["OperationCity"]["id"][$oc] != '') {//echo '1';                            $this->OperationCity->id = $this->data["OperationCity"]["id"][$oc];                            $this->OperationCity->save($operationcity, false);                        } else {//echo '2';                            $operationcity["OperationCity"]['user_id'] = $u_id;                            $operationcity["OperationCity"]['company_id'] = $d["Company"]["id"];                            $operationcity["OperationCity"]["state_id"] = $this->data['OperationCity']['state_id'][$oc];                            $operationcity["OperationCity"]["city_id"] = $this->data['OperationCity']['city_id'][$oc];                            $operationcity["OperationCity"]["garage_address"] = $this->data['OperationCity']['garage_address'][$oc];                            $operationcity["OperationCity"]["lat"] = $this->data['OperationCity']['lat'][$oc];                            $operationcity["OperationCity"]["lng"] = $this->data['OperationCity']['lng'][$oc];                            $operationcity["OperationCity"]["created"] = date('Y-m-d h:i:s');                            $operationcity["OperationCity"]["modified"] = date('Y-m-d h:i:s');                            $operationcity["OperationCity"]["status"] = 1;                            $this->OperationCity->saveAll($operationcity);                        }                        $oc++;                    }                }                $this->loadModel("City");                $citycodeData = $this->City->findById($this->data['Company']['city_id']);                $citycode = $citycodeData['City']['city_code'];//$unid = time();//$data['uniqid'] = $unid;                $data['city_id'] = $this->data['Company']['city_id'];                $data['state_id'] = $this->data['Company']['state_id'];                $data['pen_card'] = $this->data['Usermgmt']['pen_card'];                $data['mgf_vendor'] = isset($this->data['Usermgmt']['mgf_vendor']) && $this->data['Usermgmt']['mgf_vendor'] ? $this->data['Usermgmt']['mgf_vendor'] : 0;                $data['address'] = $this->data['Usermgmt']['address'];                $data['residence_address'] = $this->data['Usermgmt']['residence_address'];                $data['allow_corporate_booking'] = isset($this->data['Usermgmt']['allow_corporate_booking']) && $this->data['Usermgmt']['allow_corporate_booking'] ? $this->data['Usermgmt']['allow_corporate_booking'] : 0;                if ($this->{$this->modelClass}->save($data, false)) {                    //log                    $text_action = "updated";                    $json_data = json_encode($this->request->data);                    $this->global_logs("usermgmts", $u_id, 1, $text_action, $json_data);//$update_vp_data[$this->modelClass]['uniqid'] = 'VP' . $citycode . $u_id;                    $update_vp_data[$this->modelClass]['id'] = $u_id;                    $this->{$this->modelClass}->save($update_vp_data, false);                    $this->Session->setFlash(__('Vendor Partner has been updated'), 'success');                } else {                    $this->Session->setFlash(__('Error updating Individual.'), 'error');                }                $this->redirect(array('action' => 'individual'));            }        } else {            if ($user_id == null)                die(__("No ID received"));            $data = $this->{$this->modelClass}->read(null, $user_id);            unset($data['Usermgmt']['password']);            $this->loadModel('Country');            $country = $this->Country->find('list', array('order' => 'created desc'));            $this->set('country', $country);            $this->loadModel('State');            $state = $this->State->find('list', array('conditions' => array('State.country_id' => 1), array('order' => 'created desc')));            $this->set('state', $state);            $this->loadModel('City');            $city = $this->City->find('list', array(                'conditions' => array(                    'City.state_id' => $data['Usermgmt']['state_id']                ), array(                    'order' => 'created desc'                )            ));            $this->set('city', $city);            $data['Company']['vrerify_bank'] = $data['Company']['bank'];            $this->data = $data;// pr($this->data);        }        $this->loadModel("State");        $this->loadModel("City");//pr($user);        $state = $this->State->find("list", array("conditions" => array("country_id" => 1)));        $city = $this->City->find("list", array("conditions" => array("state_id" => $d['Company']["state_id"])));        $this->set("state", $state);        $this->set("city", $city);        /* $this->loadModel("Company");          $company	=	$this->Company->find("list",array("conditions"=>array(          "OR"=>array(array("status"=>1,"assign"=>0),          array("id"=>$d['Usermgmt']['company_id']))          )));          $this->set("company",$company); */        $this->set('title_for_layout', 'Edit Vendor Partner');    }    function edit_driver($user_id = 0, $id = null) {        $this->set('tab_open', 'partners');        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');//$pages[__('Driver', true)]		=	array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'driver');		        $is_success = 1;        $breadcrumb = array('pages' => $pages, 'active' => __('Edit Driver', true));        $this->set('breadcrumb', $breadcrumb);        $parentdata = $this->{$this->modelClass}->read(null, $user_id);        $this->set("id", $user_id);        $users = $this->{$this->modelClass}->find('list', array('fields' => array('username'))); // to get list for dropdowns        $user = $this->{$this->modelClass}->findById($user_id);        $this->set("users", $users);        $this->set("result", $parentdata);        $this->loadModel("Country");        $this->loadModel("State");        $this->loadModel("City");        $this->loadModel("User");        $this->loadModel("Company");        $country = $this->Country->find("list", array('fields' => array('id', 'name'), "conditions" => array("status" => "A")));        $this->set("country", $country);        $this->loadModel("UserState");        $state = $this->UserState->find("list", array("fields" => array("state_id", "state_name")));        $this->set("state", $state);        $this->loadModel("UserCity");        $city = $this->UserCity->find("list", array("fields" => array("city_id", "city_name")));        $this->set("city", $city);        if (!empty($this->data)) {            $this->loadModel('User');            $check_duplicate = $this->User->find('count', array(                'conditions' => array(                    'User.mobile' => $this->request->data['Usermgmt']['mobile'],                    'User.user_role_id' => 4,                    'User.id !=' => $user_id                ),                'recursive' => -1            ));            if ($check_duplicate > 0) {                $this->Session->setFlash(__('This mobile number already exist.'), 'error');                $this->redirect(array('plugin' => false, 'controller' => 'driver', 'action' => 'edit', $user_id));            }// pr($this->data);exit();	            $data_chk[$this->modelClass]['firstname'] = $this->data{$this->modelClass}['firstname'];            $data_chk[$this->modelClass]['lastname'] = $this->data{$this->modelClass}['lastname'];            $data_chk[$this->modelClass]['mobile'] = $this->data{$this->modelClass}['mobile'];//$data_chk['license_no'] = $this->data{$this->modelClass}['license_no'];            $this->{$this->modelClass}->set($data_chk);//  pr($this->Usermgmt->EditValidate());exit;            if ($this->Usermgmt->EditValidate()) {                $filename = $this->data{$this->modelClass}['image']['name'];                if (isset($this->request->data{$this->modelClass}['image']) && $this->request->data{$this->modelClass}['image']['name'] != "") {                    $allowed_extensions = array('jpg', 'jpeg', 'png', 'gif');                    $uploaded_image = $this->request->data{$this->modelClass}['image']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Driver Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadimageArray = $this->request->data{$this->modelClass}['image'];                    unset($this->request->data{$this->modelClass}['image']);                } else {                    unset($this->request->data{$this->modelClass}['image']);                }                $upload_image_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'photos';                $upload_address_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'address';                $upload_currentaddress_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'currentaddress';                $upload_criminal_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'criminal';                $upload_reference_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'reference';                $upload_dl_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'dl';                $upload_adhaar_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'adhaar';                $upload_voter_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'voter';                $upload_voter_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'voter';                $rationcard_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'drivers' . DS . 'rationcard';                if (isset($this->request->data{$this->modelClass}['address_verification_doc']) && $this->request->data{$this->modelClass}['address_verification_doc']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf');                    $uploaded_image = $this->request->data{$this->modelClass}['address_verification_doc']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Address Verification document extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadaddressArray = $this->request->data['Usermgmt']['address_verification_doc'];                    unset($this->request->data{$this->modelClass}['address_verification_doc']);                } else {                    unset($this->request->data{$this->modelClass}['address_verification_doc']);                }//Current address verification                if (isset($this->request->data{$this->modelClass}['curr_address_verification_doc']) && $this->request->data{$this->modelClass}['curr_address_verification_doc']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf');                    $uploaded_image = $this->request->data{$this->modelClass}['curr_address_verification_doc']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Current Address Verification document extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadcurrentaddressArray = $this->request->data['Usermgmt']['curr_address_verification_doc'];                    unset($this->request->data{$this->modelClass}['curr_address_verification_doc']);                } else {                    unset($this->request->data{$this->modelClass}['curr_address_verification_doc']);                }//End                if (isset($this->request->data{$this->modelClass}['criminal_background_doc']) && $this->request->data{$this->modelClass}['criminal_background_doc']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf');                    $uploaded_image = $this->request->data{$this->modelClass}['criminal_background_doc']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Criminal Background document extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadcriminalArray = $this->request->data['Usermgmt']['criminal_background_doc'];                    unset($this->request->data{$this->modelClass}['criminal_background_doc']);                } else {                    unset($this->request->data{$this->modelClass}['criminal_background_doc']);                }                if (isset($this->request->data{$this->modelClass}['reference_verification']) && $this->request->data{$this->modelClass}['reference_verification']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf');                    $uploaded_image = $this->request->data{$this->modelClass}['reference_verification']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Reference Verification document extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $uploadreferenceArray = $this->request->data{$this->modelClass}['reference_verification'];                    unset($this->request->data{$this->modelClass}['reference_verification']);                } else {                    unset($this->request->data{$this->modelClass}['reference_verification']);                }                if (isset($this->request->data{$this->modelClass}['driving_licence']) && $this->request->data{$this->modelClass}['driving_licence']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['driving_licence']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Driving Licence extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $drivinglicenceArray = $this->request->data['Usermgmt']['driving_licence'];                    unset($this->request->data{$this->modelClass}['driving_licence']);                } else {                    unset($this->request->data{$this->modelClass}['driving_licence']);                }                if (isset($this->request->data{$this->modelClass}['adhaar_card']) && $this->request->data{$this->modelClass}['adhaar_card']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['adhaar_card']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Driving Licence extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $adhaarcardArray = $this->request->data['Usermgmt']['adhaar_card'];                    unset($this->request->data{$this->modelClass}['adhaar_card']);                } else {                    unset($this->request->data{$this->modelClass}['adhaar_card']);                }                if (isset($this->request->data{$this->modelClass}['driver_voter_id']) && $this->request->data{$this->modelClass}['driver_voter_id']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['driver_voter_id']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Voter ID extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $voterIDArray = $this->request->data['Usermgmt']['driver_voter_id'];                    unset($this->request->data{$this->modelClass}['driver_voter_id']);                } else {                    unset($this->request->data{$this->modelClass}['driver_voter_id']);                }                if (isset($this->request->data{$this->modelClass}['ration_card_doc']) && $this->request->data{$this->modelClass}['ration_card_doc']['name'] != "") {                    $allowed_extensions = array('doc', 'docx', 'xls', 'xlsx', 'pdf', 'jpg', 'jpeg', 'png');                    $uploaded_image = $this->request->data{$this->modelClass}['ration_card_doc']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Ration card extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    }                    $RationcardArray = $this->request->data['Usermgmt']['ration_card_doc'];                    unset($this->request->data{$this->modelClass}['ration_card_doc']);                } else {                    unset($this->request->data{$this->modelClass}['ration_card_doc']);                }                $data = array();                $data['user_role_id'] = 4;///$data['password'] = AuthComponent::password($this->data{$this->modelClass}['password']);                $this->loadModel('Company');                $this->loadModel("Country");                $country = $this->Country->find("list", array("conditions" => array("status" => "A")));                $cdata = $this->Company->findById($this->data['Usermgmt']['company_id']);                $udata = $this->{$this->modelClass}->findById($cdata['Company']['user_id']);                if ($udata['Usermgmt']['user_role_id'] == 5) {                    $data['type'] = 1;                }                $data['firstname'] = $this->data{$this->modelClass}['firstname'];                $data['lastname'] = $this->data{$this->modelClass}['lastname'];                $this->request->data{$this->modelClass}['status'] = 1;                $this->request->data{$this->modelClass}['active'] = 1;//$this->request->data['Usermgmt']['password'] = Security::hash($this->request->data{$this->modelClass}['password'], 'md5');//pr($data);//pr($this->request->data); die;                $citycodeData = $this->City->findById($this->data['Usermgmt']['city_id']);                $citycode = $citycodeData['City']['city_code'];                $unid = time();//$data['uniqid'] = $unid;                $data['vendor_id'] = $cdata['Company']['user_id'];                $data['dob'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['dob']));                $data['license_to'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['license_to']));                $data['batch_start_date'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['batch_start_date']));                $data['batch_end_date'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['batch_end_date']));                $data['license_from'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['license_from']));                $data['license_to'] = date("Y-m-d", strtotime($this->data{$this->modelClass}['license_to']));                if ($this->Auth->user('user_role_id') == 6) {                    if ($this->Auth->user('driver_verification') != 1) {                        $this->request->data['Usermgmt']['verified'] = 2;                        $this->request->data['Usermgmt']['status'] = $user['Usermgmt']['status'];                    }                }                $pass = $this->data{$this->modelClass}['mobile'];                $data['password'] = AuthComponent::password($pass);                $this->{$this->modelClass}->set($this->request->data);//pr($data); die;                if ($this->{$this->modelClass}->save($data, false)) {                    $description = "Driver Updated";                    $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                    $all_data = $this->request->data;                    if ($this->Auth->user('user_role_id') == 1) {                        $user_type = 0;                    } else {                        $user_type = 1;                    }                    $this->insert_driver_log($user_id, $description, 1, $user_type, $this->Auth->user('id'), $user_name, $all_data);                    if ($this->Auth->user('user_role_id') == 6) {                        if ($this->Auth->user('driver_verification') != 1) {                            $this->insert_alerts("usermgmt", "index", 'partners', 'Driver Updated', 'driver_verification');                        }                    }//pr($data); die;//$update_driver_data[$this->modelClass]['uniqid'] = 'D' . $citycode . $user_id;                    $update_driver_data[$this->modelClass]['id'] = $user_id;                    $this->{$this->modelClass}->save($update_driver_data, false);                    if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {                        $file_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadimageArray['name']);                        $file_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_name);                        if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_image_folder . DS . $file_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.image' => "'" . $file_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    if (isset($uploadaddressArray) && $uploadaddressArray['name'] != "") {                        $file_address_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadaddressArray['name']);                        $file_address_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_address_name);                        if (move_uploaded_file($uploadaddressArray['tmp_name'], $upload_address_folder . DS . $file_address_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.address_verification_doc' => "'" . $file_address_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    if (isset($uploadcurrentaddressArray) && $uploadcurrentaddressArray['name'] != "") {                        $file_currentaddress_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadcurrentaddressArray['name']);                        $file_currentaddress_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_currentaddress_name);                        if (move_uploaded_file($uploadcurrentaddressArray['tmp_name'], $upload_currentaddress_folder . DS . $file_currentaddress_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.curr_address_verification_doc' => "'" . $file_currentaddress_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    if (isset($uploadcriminalArray) && $uploadcriminalArray['name'] != "") {                        $file_criminal_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadcriminalArray['name']);                        $file_criminal_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_criminal_name);                        if (move_uploaded_file($uploadcriminalArray['tmp_name'], $upload_criminal_folder . DS . $file_criminal_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.criminal_background_doc' => "'" . $file_criminal_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    if (isset($uploadreferenceArray) && $uploadreferenceArray['name'] != "") {                        $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($uploadreferenceArray['name']);                        $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                        if (move_uploaded_file($uploadreferenceArray['tmp_name'], $upload_reference_folder . DS . $file_reference_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.reference_verification' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    if (isset($drivinglicenceArray) && $drivinglicenceArray['name'] != "") {                        $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($drivinglicenceArray['name']);                        $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                        if (move_uploaded_file($drivinglicenceArray['tmp_name'], $upload_dl_folder . DS . $file_reference_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.driving_licence' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    if (isset($adhaarcardArray) && $adhaarcardArray['name'] != "") {                        $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($adhaarcardArray['name']);                        $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                        if (move_uploaded_file($adhaarcardArray['tmp_name'], $upload_adhaar_folder . DS . $file_reference_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.adhaar_card' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    if (isset($voterIDArray) && $voterIDArray['name'] != "") {                        $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($voterIDArray['name']);                        $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                        if (move_uploaded_file($voterIDArray['tmp_name'], $upload_voter_folder . DS . $file_reference_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.driver_voter_id' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    if (isset($RationcardArray) && $RationcardArray['name'] != "") {                        $file_reference_name = $this->{$this->modelClass}->id . '_' . time() . '_' . basename($RationcardArray['name']);                        $file_reference_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_reference_name);                        if (move_uploaded_file($RationcardArray['tmp_name'], $rationcard_folder . DS . $file_reference_name)) {                            $this->{$this->modelClass}->updateAll(array('Usermgmt.ration_card_doc' => "'" . $file_reference_name . "'"), array('Usermgmt.id' => $this->{$this->modelClass}->id));                        } else {                            $is_file_uploaded = 0;                        }                    }                    $this->loadModel('DriverInformation');                    if (isset($this->data["DriverInformation"]['image']) && !empty($this->data["DriverInformation"]['image'])) {                        $images = array();                        $i = 0;                        foreach ($this->data["DriverInformation"]['image'] as $key => $value) {                            if (!empty($value["tmp_name"])) {                                $filename = time() . str_replace(" ", "_", $value['name']);                                $filename = time() . str_replace("/", "_", $filename);//pr($value['tmp_name']);exit();                                /* //pr($this->data["CompanyInformation"]['image']);exit();                                  $fileData = fread(fopen($this->params['form']['File']['tmp_name'], "r"),                                  $this->params['form']['File']['size']); *///pr(TAXI_IMAGE_STORE_PATH);exit();//pr(base64_decode($value['name']));exit();                                move_uploaded_file($this->data['DriverInformation']['image'][$i]['tmp_name'], USER_DOC_STORE_PATH . $filename);//$this->Upload->upload($value,TAXI_DOC_STORE_PATH,$filename);//$this->Upload->upload($value,TAXI_IMAGE_STORE_PATH,$filename);                                $images["DriverInformation"]["user_id"] = $user_id;                                $images["DriverInformation"]["company_id"] = $this->data['Usermgmt']['company_id'];                                $images["DriverInformation"]["image"] = $filename;                                $this->DriverInformation->saveAll($images);                            } else {                                $allImages = $this->DriverInformation->find('all', array('conditions' => array('user_id' => $id)));                                foreach ($allImages as $image) {                                    $images["DriverInformation"]["id"] = $image['DriverInformation']['id'];                                    $this->DriverInformation->saveAll($images);                                }                            }                            $i++;                        }                    }                    $this->Session->setFlash(__('Driver has been edited'), 'success');                } else {                    $this->Session->setFlash('Error saving Driver.', 'error');                }                $this->redirect(array('plugin' => false, 'controller' => 'driver', 'action' => 'index'));            }        } else {            if ($user_id == null)                die(__("No ID received"));//pr($data); exit;            $data = $this->{$this->modelClass}->read(null, $user_id);            $data['Usermgmt']['dob'] = date("d-m-Y", strtotime($data['Usermgmt']['dob']));            $data['Usermgmt']['license_from'] = date("Y-m-d", strtotime($data['Usermgmt']['license_from']));            $data['Usermgmt']['license_to'] = date("Y-m-d", strtotime($data['Usermgmt']['license_to']));            $data['Usermgmt']['batch_start_date'] = date("Y-m-d", strtotime($data['Usermgmt']['batch_start_date']));            $data['Usermgmt']['batch_end_date'] = date("Y-m-d", strtotime($data['Usermgmt']['batch_end_date']));            $data['Usermgmt']['old_mobile'] = $data['Usermgmt']['mobile'];            unset($data['Usermgmt']['password']);            $this->data = $data;            $this->set('edit_driver_data', $data);//pr($this->data);        }        $this->loadModel("User");        $this->loadModel("Company");//$company = $this->Company->find("list", array("conditions" => array("user_id" => $data['Usermgmt']['vendor_id'], "status" => 1)));        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1,            //"user_id" => $data['Usermgmt']['vendor_id']            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'fields' => array(                'Company.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['Company']['id']] = $vl['Company']['name'] . ' ( ' . $vl['User']['uniqid'] . ' ) ';            }        }        $this->set("company", $companyarray);        $vlarray = array();        $vendors_list = $this->User->find('all', array(            'conditions' => array(                'User.user_role_id' => 2            ),            'fields' => array(                'User.id', 'User.email', 'User.uniqid', 'User.firstname', 'User.lastname'            )        ));        if (!empty($vendors_list)) {            foreach ($vendors_list as $key => $vl) {                $vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' ) ';            }        }        $this->set("vendors_list", $vlarray);        $this->set('title_for_layout', 'Edit Driver');    }    function edit_company($user_id = 0, $id = null) {        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');//$pages[__('Driver', true)]		=	array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'driver');		        $breadcrumb = array('pages' => $pages, 'active' => __('Edit company', true));        $this->set('breadcrumb', $breadcrumb);        $parentdata = $this->{$this->modelClass}->read(null, $user_id);        $this->set("id", $user_id);        $users = $this->{$this->modelClass}->find('list', array('fields' => array('username'))); // to get list for dropdowns        $user = $this->{$this->modelClass}->findById($user_id);        $this->set("users", $users);        $this->set("result", $parentdata);        if (!empty($this->data)) {            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->EditValidate()) {                $filename = $this->data{$this->modelClass}['image']['name'];                if ($filename != '') {                    $tempPath = $this->data{$this->modelClass}['image']['tmp_name'];                    $new_file_name = time() . '_' . $filename;                    if (move_uploaded_file($tempPath, ALBUM_UPLOAD_IMAGE_PATH . $new_file_name)) {                        $image = $new_file_name;                    } else {                        $image = $parentdata{$this->modelClass}['image'];                    }                } else {                    $image = $parentdata{$this->modelClass}['image'];                }                $data['firstname'] = $this->data{$this->modelClass}['firstname'];                $data['lastname'] = $this->data{$this->modelClass}['lastname'];                $data['username'] = $this->data{$this->modelClass}['username'];                $data['email'] = $this->data{$this->modelClass}['email'];                $data['status'] = $this->data{$this->modelClass}['status'];                $data['image'] = $image;                $this->{$this->modelClass}->id = $user_id;                if ($this->{$this->modelClass}->save($data, false)) {                    $this->Session->setFlash(__('company has been edited'), 'success');                } else {                    $this->Session->setFlash('Error saving company.', 'error');                }                $this->redirect($this->referer());            }        } else {            if ($user_id == null)                die(__("No ID received"));            $data = $this->{$this->modelClass}->read(null, $user_id);            unset($data['Usermgmt']['password']);            $this->data = $data;//pr($this->data);        }        $this->loadModel("Country");        $this->loadModel("State");        $this->loadModel("City");        $this->loadModel("User");        $company = $this->User->find("list", array("conditions" => array("status" => 1, "user_role_id" => 2)));//pr($user);        $state = $this->State->find("list", array("conditions" => array("country_id" => $user['Usermgmt']["country_id"])));        $city = $this->City->find("list", array("conditions" => array("state_id" => $user['Usermgmt']["state_id"])));        $country = $this->Country->find("list", array("conditions" => array("status" => 1)));        $this->set("country", $country);        $this->set("state", $state);        $this->set("city", $city);        $this->set("company", $company);    }    function change_password($user_id = 0, $id = null) {        $this->set('tab_open', 'partners');        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Change Password', true));        $this->set('breadcrumb', $breadcrumb);        $parentdata = $this->{$this->modelClass}->read(null, $user_id);        $this->set("id", $user_id);        $users = $this->{$this->modelClass}->find('list', array('fields' => array('username')));        $this->set("users", $users);        $this->set("result", $parentdata);        if (!empty($this->data)) {//pr($this->data); exit;            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->ChangePassword()) {                $data = array();                $data['password'] = AuthComponent::password($this->data{$this->modelClass}['password']);                $this->{$this->modelClass}->id = $user_id;                if ($this->{$this->modelClass}->save($data, false)) {                    $this->Session->setFlash(__('Password has been successfully changed'), 'success');                } else {                    $this->Session->setFlash(__('Error updating password.'), 'error');                }                $this->redirect($this->referer());            }        } else {            if ($user_id == null)                die(__("No ID received"));            $data = $this->{$this->modelClass}->read(null, $user_id);            unset($data['Usermgmt']['password']);            $this->data = $data;        }    }    public function remove_operation_address() {        if ($this->request->is('Ajax')) {//$this->data['cities_id'] is OperationCity id            if ($this->data['cities_id'] != null) {// Load OperationCity Model                $this->loadModel('OperationCity');// Remove Data from unique id or OperationCity id                if ($this->OperationCity->delete($this->data['cities_id'])) {//$this->Session->setFlash(__('Operational Cities has been deleted'),'success');                    echo '1';                } else {//$this->Session->setFlash(__('Operational Cities has not been deleted'),'success');                    echo '2';                }            }        }        exit;    }    function delete_doc() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] == null) {                echo json_encode(array('succ' => 0, 'msg' => 'Some error occurred!'));                die;            } else {                $this->loadModel('CompanyInformation');                $this->CompanyInformation->id = $this->data['id'];                $this->CompanyInformation->saveField("status", 0);                $this->CompanyInformation->delete($this->data['id']);                $this->Session->setFlash(__('Docs has been deleted.'), 'success');                echo json_encode(array('succ' => 1, 'msg' => 'Docs has been deleted'));                die;            }        }        exit;    }    function delete_driver_doc() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] == null) {                echo 'error';            } else {                $this->loadModel('DriverInformation');                $this->DriverInformation->id = $this->data['id'];                $this->DriverInformation->saveField("status", 0);                $this->DriverInformation->delete($this->data['id']);                $this->Session->setFlash(__('Docs has been deleted.'), 'success');                echo 'Success';            }        }        exit;    }    public function delete() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                if ($this->{$this->modelClass}->delete($this->data['id'])) {                    $this->Session->setFlash(__('User has been deleted'), 'success');                    echo 'Success';                } else {                    $this->Session->setFlash(__('User has not been deleted'), 'success');                    echo 'error';                }            }        }        exit;    }    public function delete_company() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $this->loadModel("Company");////		$this->{$this->modelClass}->hasOne = array("Company" => array("className" => "Company", "foreignKey" => "user_id", 'dependent' => true));////		$this->Company->virtualFields = array(//		    'count_taxi' => 'select count(company_id) from taxis where taxis.company_id=Company.id',//		    'count_driver' => 'select count(company_id) from users where users.company_id=Company.id',//		    //'count_assign' => 'select count(company_id) from assigns where assigns.company_id=Company.id and assigns.to >= now()'//		);////		$data = $this->{$this->modelClass}->findById($this->data['id']);////		//pr($data);////		if ($data["Company"]["count_taxi"] >= 1 || $data["Company"]["count_driver"] >= 1) {////		    echo "Dependent";//		    die;//		}                if ($this->{$this->modelClass}->delete($this->data['id'])) {                    $this->loadModel("Assign");                    $this->Company->deleteAll(array("user_id" => $this->data['id']));// $this->loadModel("Rating");//$this->Rating->deleteAll(array("rat_id"=>$this->data['id']),false);                    /* 					$condition	=	array("rat_id"=>$this->data['id']);                      $this->Rating->deleteAll($condition, false);                     */// $this->Rating->query("DELETE FROM ratings WHERE rat_id=" . $data["Company"]['id'] . " and rating_type=1;");                    echo json_encode(array('succ' => 1, 'msg' => 'Business has been deleted'));                    die;                } else {                    echo json_encode(array('succ' => 1, 'msg' => 'Business has not been deleted'));                    die;                }            }        }        exit;    }    public function delete_driver() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $this->loadModel("User");                if ($this->{$this->modelClass}->delete($this->data['id'])) {                    echo json_encode(array('succ' => 1, 'msg' => 'Driver has been deleted'));                    die;                } else {                    echo json_encode(array('succ' => 0, 'msg' => 'Some error occurred!'));                    die;                }            }        }        exit;    }    public function verified_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                $userData = $all_data;                $on = date("d-m-y h:i A");                if ($all_data[$this->modelClass]['verified'] == 1) {                    $new_value = 0;                    $data['verified'] = 0;                    $status = 5;                    $description = "Driver Unverified";                    $msg = "Driver Name " . $userData['Usermgmt']['firstname'] . " Mobile No " . $userData['Usermgmt']['mobile'] . " has been Unverified on " . $on . "";                } else {                    $new_value = 1;                    $data['verified'] = 1;                    $status = 4;                    $description = "Driver Verified";                    $msg = "Driver Name " . $userData['Usermgmt']['firstname'] . " Mobile No " . $userData['Usermgmt']['mobile'] . " has been Verified on " . $on . "";                }                // pr($data);exit;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                $all_data = $data;                if ($this->Auth->user('user_role_id') == 1) {                    $user_type = 0;                } else {                    $user_type = 1;                }                $vendor_id = $userData['Usermgmt']['vendor_id'];                $vendorData = $this->{$this->modelClass}->findById($vendor_id);                if ($vendorData) {                    if ($vendorData['Usermgmt']['device_token']) {                        $device_token = $vendorData['Usermgmt']['device_token'];                        $API_KEY = VENDOR_API_KEY;                        $this->SendPushNotification($device_token, $API_KEY, $msg);                    }                }                $this->insert_driver_log($this->data['id'], $description, $status, $user_type, $this->Auth->user('id'), $user_name, $all_data);                echo true;            }        }        exit;    }    public function SendPushNotification($deviceToken = '', $API_KEY = '', $msg) {        $fields = array();        //$API_KEY = 'AIzaSyD6qtUxHZfVIwHkzry0Rjuxs1P4-PFj0So';			        $url = 'https://fcm.googleapis.com/fcm/send';        $fields = array(            'registration_ids' => array($deviceToken),            'data' => array("message" => $msg)        );        $fields = json_encode($fields);        $headers = array('Authorization: key=' . $API_KEY, 'Content-Type: application/json');        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, $url);        curl_setopt($ch, CURLOPT_POST, true);        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);        $result = curl_exec($ch);        //print_r($result); exit;        curl_close($ch);        //return $result;        return true;    }    public function change_status() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {//$getdata = $this->{$this->modelClass}->find('first', array('conditions' => array('id' => $this->data['id'])));                $getdata = $this->{$this->modelClass}->findById($this->data['id']);                if ($getdata[$this->modelClass]['status'] == 1) {                    $data['status'] = 0;                    $data['status_by_admin'] = 0;                    $status = 3;                    $description = "Driver Inactivated";                } else {                    $data['status'] = 1;                    $data['status_by_admin'] = 1;                    $status = 2;                    $description = "Driver Activated";                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                $all_data = $data;                if ($this->Auth->user('user_role_id') == 1) {                    $user_type = 0;                } else {                    $user_type = 1;                }//                //log//                    $text_action = ($getdata[$this->modelClass]['status']=='1')?"activated":"inactivated";//                    $action_type = ($getdata[$this->modelClass]['status']=='1')?"2":"3";//                    $json_data = json_encode($this->request->data);//                    $this->global_logs("usermgmts", $this->data['id'], $action_type, $text_action, $json_data);//					                $this->insert_driver_log($this->data['id'], $description, $status, $user_type, $this->Auth->user('id'), $user_name, $all_data);                echo json_encode(array('succ' => 1, 'msg' => 'Status changed successfully'));                die;            }        }        exit;    }    function detail_customer($id = 0) {        $result = $this->{$this->modelClass}->findById($id);        $this->set("result", $result);    }    function detail_employee($id = 0) {        $result = $this->{$this->modelClass}->findById($id);        $this->set("result", $result);    }    function detail_individual($id = 0) {        $this->{$this->modelClass}->unbindModel(array('belongsTo' => array('Company')), false);//$this->{$this->modelClass}->unbindModel(array('hasMany' => array("City")), false);        $result = $this->{$this->modelClass}->findById($id);        $this->loadModel("Company");        $this->set('tab_open', 'partners');        $this->Company->virtualFields = array(            'country' => 'select name from countries where countries.id=Company.country_id',            'state' => 'select name from states where states.id=Company.state_id',            'city' => 'select name from cities where cities.id=Company.city_id',        );        $this->{$this->modelClass}->hasOne = array("Company" => array("className" => "Company", "foreignKey" => "user_id"));        $this->Company->hasMany = array("Taxi" => array("className" => "Taxi", "foreignKey" => "company_id"));        $result = $this->{$this->modelClass}->findById($id);        $this->set("result", $result);//$this->loadModel("Taxi");//        $this->Taxi->virtualFields = array(//	    "motor_category" => "select name from motor_categories where id=Taxi.motor_category_id",//	    "motor_type" => "select name from motor_types where id=Taxi.motor_type_id",//	    "motor" => "select name from motors where id=Taxi.motor_id",//	    "motor_model" => "select name from motor_models where id=Taxi.motor_model_id",//	    "service_category" => "select name from service_categories where id=Taxi.service_category_id",//	);//$taxi = $this->Taxi->find("all", array("conditions" => array("company_id" => $result["Company"]["id"])));// $this->set("taxi", $taxi);// $this->loadModel("User");//$driver = $this->User->find("all", array("conditions" => array("user_role_id" => 4, "company_id" => $result["Company"]["id"])));//$this->set("driver", $driver);        $this->loadModel("OperationCity");        $OperationCity = $this->OperationCity->find("all", array("conditions" => array("company_id" => $result["Company"]["id"]),            'group' => array('OperationCity.city_id'),        ));        $this->set("OperationCity", $OperationCity);    }    function detail_driver($id = 0) {        $this->set('tab_open', 'partners');        //$result = $this->{$this->modelClass}->findById($id);        $result = $this->Usermgmt->find('first', array(            'conditions' => array(                'Usermgmt.id' => $id,            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'Vendor',                    'type' => 'LEFT',                    'conditions' => array(                        'Vendor.id = Usermgmt.vendor_id'                    )                )),            'fields' => array(                'Usermgmt.*', 'Vendor.firstname', 'Vendor.lastname', 'Vendor.uniqid'            )        ));        $this->set("result", $result);        $this->loadModel('UserDocument');        $RegistrationCertificate = $this->UserDocument->find('all', array('conditions' => array('UserDocument.user_id' => $id, 'UserDocument.type' => 1)));        $this->set("RegistrationCertificate", $RegistrationCertificate);        $AdhaarCard = $this->UserDocument->find('all', array('conditions' => array('UserDocument.user_id' => $id, 'UserDocument.type' => 2)));        $this->set("AdhaarCard", $AdhaarCard);        $RationCard = $this->UserDocument->find('all', array('conditions' => array('UserDocument.user_id' => $id, 'UserDocument.type' => 3)));        //pr($RationCard);        $this->set("RationCard", $RationCard);        $VoterId = $this->UserDocument->find('all', array('conditions' => array('UserDocument.user_id' => $id, 'UserDocument.type' => 4)));        $this->set("VoterId", $VoterId);    }    function detail_company($id = 0) {        $result = $this->{$this->modelClass}->findById($id);        $this->set("result", $result);    }    public function status_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                $userData = $all_data;                $on = date("d-m-y h:i A");                if ($all_data[$this->modelClass]['status'] == 1) {                    $new_value = 0;                    $data['status'] = 0;                    $msg = "Driver Name " . $userData['Usermgmt']['firstname'] . " Mobile No " . $userData['Usermgmt']['mobile'] . " has been Inactivated on " . $on . "";                } else {                    $new_value = 1;                    $data['status'] = 1;                    $msg = "Driver Name " . $userData['Usermgmt']['firstname'] . " Mobile No " . $userData['Usermgmt']['mobile'] . " has been activated on " . $on . "";                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $vendor_id = $userData['Usermgmt']['vendor_id'];                $vendorData = $this->{$this->modelClass}->findById($vendor_id);                if ($vendorData) {                    if ($vendorData['Usermgmt']['device_token']) {                        $device_token = $vendorData['Usermgmt']['device_token'];                        $API_KEY = VENDOR_API_KEY;                        $this->SendPushNotification($device_token, $API_KEY, $msg);                    }                }                echo $new_value;            }        }        exit;    }    function dateRange($first, $last, $step = '+1 day', $format = 'm/d/Y') {        $dates = array();        $current = strtotime($first);        $last = strtotime($last);        while ($current <= $last) {            $dates[] = date($format, $current);            $current = strtotime($step, $current);        }        return $dates;    }    function showevents($tid = null) {        if (isset($tid)) {            $this->loadModel('Assigns');            $date = $this->Assigns->find('all', array(                'conditions' => array('driver_id' => $tid), //array of conditions                'fields' => array('from', 'to') //array of field names            ));            $total = $this->Assigns->find('count', array(                'conditions' => array('driver_id' => $tid), //array of conditions                'fields' => array('from', 'to') //array of field names            ));            if ($total == 0) {                echo '<p class="alert alert-warning" style="line-height: 20px; margin: 30px 0;"><i class="icon icon-info"></i> Sorry there are no booking founds!</p>';                exit();            } else {                $edate = array();                foreach ($date as $ndate) {                    $edate['from'] = date('m/d/Y', strtotime($ndate['Assigns']['from']));                    $edate['to'] = date('m/d/Y', strtotime($ndate['Assigns']['to']));                }                ?>                <div id="neventCal"></div>                <script>                    //var myevents = ["08/23/2014","08/25/2014"];                    var myevents = <?php echo stripslashes(json_encode($this->dateRange($edate['from'], $edate['to']))); ?>                    /*var myevents = [                                          { Title: "Five K for charity", Date: new Date("08/20/2014")},                                           { Title: "Dinner", Date: new Date("08/22/2014")},                                           { Title: "Meeting with manager", Date: new Date("08/21/2014")},                                          { Title: "Dinner", Date: new Date("09/02/2014")},                                           { Title: "Meeting with manager", Date: new Date("09/21/2014")}                                          ];*/                    //console.log(myevents);                    $("#neventCal").datepicker({                        changeMonth: true,                        changeYear: true,                        dateFormat: 'm/d/Y',                        /*minDate: new Date(),                                                  maxDate: "+3",*/                        beforeShowDay: function (date) {                            var result = [true, '', null];                            var matching = $.grep(myevents, function (event) {                                var f = new Date(event.valueOf());                                if (f.valueOf() == date.valueOf()) {                                    return f.valueOf() == date.valueOf();                                }                            });                            if (matching.length) {                                result = [true, 'yesitisbook', null];                            } else {                                return result = [true, 'noitisnotbook', null];                            }                            return result;                        }                    });                    //dialog.dialog( "open" );                </script>                <?php            }        }        exit;    }    public function show_fav_lo() {        $this->loadModel("FavoriteLocation");        $result = $this->FavoriteLocation->find("all", array("conditions" => array("user_id" => $this->data['id'])));        $this->set("result", $result);        $this->loadModel("FavoriteJourny");        $booking_ids = $this->FavoriteJourny->find("list", array("conditions" => array("user_id" => $this->data['id']), "fields" => array("booking_location_id", "booking_location_id")));//pr($booking_ids);//die;        $this->loadModel("BookingLocation");        $this->BookingLocation->virtualFields = array('pd' => "CONCAT(BookingLocation.pickup_location, ' ', BookingLocation.drop_location)");        $result2 = $this->BookingLocation->find("all", array("conditions" => array("id" => $booking_ids), "group" => "pd", 'fields' => array("pd", "pickup_location", 'drop_location', 'modified', 'created')));        $this->set("result2", $result2);    }    public function check_mobile() {        if ($this->request->is('Ajax')) {            $mobile = $this->request->data['mobile'];            $this->loadModel('User');            $check_duplicate = $this->User->find('count', array(                'conditions' => array(                    'User.mobile' => $mobile                ),                'recursive' => -1            ));            if ($check_duplicate > 0) {                echo "NOT_OK";            } else {                echo "OK";            }            exit;        }    }    public function check_mobile_driver() {        if ($this->request->is('Ajax')) {            $mobile = $this->request->data['mobile'];            $this->loadModel('User');            $check_duplicate = $this->User->find('count', array(                'conditions' => array(                    'User.mobile' => $mobile                ),                'recursive' => -1            ));            if ($check_duplicate > 0) {                echo "NOT_OK";            } else {                echo "OK";            }            exit;        }    }    function vendors() {        $this->set('tab_open', 'invoice');        $this->loadModel("Company");        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Individual'));        $this->set('breadcrumb', $breadcrumb);        $limitValue = $limit = 25;        $this->update_alert_seen("usermgmt", "vendors");        $this->Prg->commonProcess();        $recharge_history = array(            'TO' => 'Today',            'YD' => 'Yesterday',            'LW' => 'Last 7 Days',            'LM' => 'Last 30 Days',            'CM' => 'Current Month',        );        $this->set('recharge_history_list', $recharge_history);//$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $conditions = array();        array_push($conditions, array('user_role_id' => array(2, 5)));        $order_arr = array($this->modelClass . '.created' => 'desc');        if (!empty($this->request->query)) {//            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {//                array_push($conditions, array('Usermgmt.state_id' => $this->request->query['state_id']));//                $this->set("state_id", $this->request->query['state_id']);//            }//            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));                $this->set("city_id", $this->request->query['city_id']);            }            if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {                array_push($conditions, array('Usermgmt.id' => $this->request->query['firstname']));                $this->set("firstname", $this->request->query['firstname']);            }            if (isset($this->request->query['uniqid']) && $this->request->query['uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid LIKE' => "%" . $this->request->query['uniqid'] . "%"));                $this->set("uniqid", $this->request->query['uniqid']);            }//            if (isset($this->request->query['mobile']) && $this->request->query['mobile'] != "") {//                array_push($conditions, array('Usermgmt.mobile' => $this->request->query['mobile']));//                $this->set("mobile", $this->request->query['mobile']);//            }//            if (isset($this->request->query['total_balance_order']) && $this->request->query['total_balance_order'] != "") {                $order_arr = array($this->modelClass . '.total_balance' => $this->request->query['total_balance_order']);                $this->set("total_balance_order", $this->request->query['total_balance_order']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                if ($this->request->query['status'] == 1) {                    array_push($conditions, array('Usermgmt.total_balance > ' => MINIMUM_AMOUNT_FOR_VENDOR));                    array_push($conditions, array('Usermgmt.status' => 1));                } else if ($this->request->query['status'] == 2) {                    array_push($conditions, array('Usermgmt.total_balance < ' => MINIMUM_AMOUNT_FOR_VENDOR));                    array_push($conditions, array('Usermgmt.status' => 1));                } else if ($this->request->query['status'] == 0) {                    array_push($conditions, array('Usermgmt.status' => 0));                }                $this->set("status", $this->request->query['status']);            }            $this->set("from_date", $this->request->query['from_date']);            $this->set("to_date", $this->request->query['to_date']);            if ((isset($this->request->query['from_date']) && $this->request->query['from_date']) || (isset($this->request->query['to_date']) && $this->request->query['to_date'])) {                if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                    array_push($conditions, array('(date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ? AND date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));                } else                if (@$this->request->query['from_date']) {                    array_push($conditions, array('date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ' => $this->request->query['from_date']));                } else                if (@$this->request->query['to_date']) {                    array_push($conditions, array('date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ' => $this->request->query['to_date']));                }            } else {                if (isset($this->request->query['recharge_history']) && $this->request->query['recharge_history']) {                    $rch = $this->request->query['recharge_history'];                    if ($rch == "TO") {                        $from_date = date("Y-m-d");                        $to_date = date("Y-m-d");                    } else if ($rch == "LW") {                        $from_date = date('Y-m-d', strtotime('-7 days'));                        $to_date = date('Y-m-d');                    } else if ($rch == "YD") {                        $from_date = date('Y-m-d', strtotime('-1 days'));                        $to_date = date('Y-m-d', strtotime('-1 days'));                    } else if ($rch == "LM") {                        $from_date = date('Y-m-d', strtotime('-30 days'));                        $to_date = date('Y-m-d');                    } else if ($rch == "CM") {                        $current_year = date("Y");                        $current_month = date("n");                        $from_date = $current_year . "-" . $current_month . "-01";                        $to_date = date('Y-m-d');                    }                    //echo $from_date." ".$to_date;                    array_push($conditions, array('(date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ? AND date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ?)' => array($from_date, $to_date)));                    $this->set("recharge_history", $this->request->query['recharge_history']);                }            }        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        //	$this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Individual / Company');        //pr($conditions); exit;        $this->{$this->modelClass}->belongsTo = array(            'State' => array(                'className' => 'State',                'foreignKey' => 'state_id'            ),            'City' => array(                'className' => 'City',                'foreignKey' => 'city_id'        ));        $this->Usermgmt->virtualFields = array(            'total_recharge' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.type=4',            'total_credit' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.amount_type=0',            'total_debit' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.amount_type=1',        );        $this->paginate = array(            'conditions' => array($conditions),            'fields' => array(                'Usermgmt.status', 'Usermgmt.created', 'Usermgmt.firstname', 'Usermgmt.lastname', 'Usermgmt.email', 'Usermgmt.address',                'Usermgmt.mobile', 'Usermgmt.image', 'total_recharge', 'total_credit', 'total_debit', 'Usermgmt.uniqid', 'Usermgmt.total_balance', 'Usermgmt.last_recharge_date', 'Usermgmt.last_recharge_amount', 'Usermgmt.state_id', 'Usermgmt.city_id', 'State.name', 'City.name'            ),            'recursive' => 5,            'limit' => $limit,            'order' => $order_arr        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);// pr($this->paginate()); exit;        $this->set('result', $this->paginate());        $this->loadModel("State");        $country = $this->State->find("list");        $this->set("states", $country);        $this->loadModel("City");        $city = $this->City->find("list");        $this->set("city", $city);        $this->set('page', $page);// pr($this->paginate());//  die; //        $count_new_bookings = $this->Usermgmt->find('count', array(//            'conditions' => $conditions//        ));//        $this->set("count_new_bookings", $count_new_bookings);        $this->set('title_for_layout', 'Vendor SOA');        $this->loadModel("Company");//$company = $this->Company->find("list", array("conditions" => array("status" => 1)));        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'order' => array('Company.name' => 'asc'),            'fields' => array(                'Company.id', 'User.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['User']['id']] = $vl['Company']['name'] . ' (' . $vl['User']['uniqid'] . ')';            }        }        $this->set("company", $companyarray);    }    function driversoa() {        $this->set('tab_open', 'invoice');        $this->loadModel("Company");        $pages[__('Dashboard', true)] = array('plugin' => '', 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Individual'));        $this->set('breadcrumb', $breadcrumb);        $limitValue = $limit = 25;        $this->update_alert_seen("usermgmt", "Driver SOA");        $this->Prg->commonProcess();        $recharge_history = array(            'TO' => 'Today',            'YD' => 'Yesterday',            'LW' => 'Last 7 Days',            'LM' => 'Last 30 Days',            'CM' => 'Current Month',        );        $this->set('recharge_history_list', $recharge_history);        //$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $conditions = array();        array_push($conditions, array('user_role_id' => array(4)));        $order_arr = array($this->modelClass . '.created' => 'desc');        if (!empty($this->request->query)) {//            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {//                array_push($conditions, array('Usermgmt.state_id' => $this->request->query['state_id']));//                $this->set("state_id", $this->request->query['state_id']);//            }//            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));                $this->set("city_id", $this->request->query['city_id']);            }            if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {                array_push($conditions, array('Usermgmt.id' => $this->request->query['firstname']));                $this->set("firstname", $this->request->query['firstname']);            }            if (isset($this->request->query['uniqid']) && $this->request->query['uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid LIKE' => "%" . $this->request->query['uniqid'] . "%"));                $this->set("uniqid", $this->request->query['uniqid']);            }//            if (isset($this->request->query['mobile']) && $this->request->query['mobile'] != "") {//                array_push($conditions, array('Usermgmt.mobile' => $this->request->query['mobile']));//                $this->set("mobile", $this->request->query['mobile']);//            }//            if (isset($this->request->query['total_balance_order']) && $this->request->query['total_balance_order'] != "") {                $order_arr = array($this->modelClass . '.total_balance' => $this->request->query['total_balance_order']);                $this->set("total_balance_order", $this->request->query['total_balance_order']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                if ($this->request->query['status'] == 1) {                    array_push($conditions, array('Usermgmt.total_balance > ' => MINIMUM_AMOUNT_FOR_VENDOR));                    array_push($conditions, array('Usermgmt.status' => 1));                } else if ($this->request->query['status'] == 2) {                    array_push($conditions, array('Usermgmt.total_balance < ' => MINIMUM_AMOUNT_FOR_VENDOR));                    array_push($conditions, array('Usermgmt.status' => 1));                } else if ($this->request->query['status'] == 0) {                    array_push($conditions, array('Usermgmt.status' => 0));                }                $this->set("status", $this->request->query['status']);            }            $this->set("from_date", $this->request->query['from_date']);            $this->set("to_date", $this->request->query['to_date']);            if ((isset($this->request->query['from_date']) && $this->request->query['from_date']) || (isset($this->request->query['to_date']) && $this->request->query['to_date'])) {                if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                    array_push($conditions, array('(date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ? AND date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));                } else                if (@$this->request->query['from_date']) {                    array_push($conditions, array('date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ' => $this->request->query['from_date']));                } else                if (@$this->request->query['to_date']) {                    array_push($conditions, array('date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ' => $this->request->query['to_date']));                }            } else {                if (isset($this->request->query['recharge_history']) && $this->request->query['recharge_history']) {                    $rch = $this->request->query['recharge_history'];                    if ($rch == "TO") {                        $from_date = date("Y-m-d");                        $to_date = date("Y-m-d");                    } else if ($rch == "LW") {                        $from_date = date('Y-m-d', strtotime('-7 days'));                        $to_date = date('Y-m-d');                    } else if ($rch == "YD") {                        $from_date = date('Y-m-d', strtotime('-1 days'));                        $to_date = date('Y-m-d', strtotime('-1 days'));                    } else if ($rch == "LM") {                        $from_date = date('Y-m-d', strtotime('-30 days'));                        $to_date = date('Y-m-d');                    } else if ($rch == "CM") {                        $current_year = date("Y");                        $current_month = date("n");                        $from_date = $current_year . "-" . $current_month . "-01";                        $to_date = date('Y-m-d');                    }                    //echo $from_date." ".$to_date;                    array_push($conditions, array('(date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ? AND date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ?)' => array($from_date, $to_date)));                    $this->set("recharge_history", $this->request->query['recharge_history']);                }            }        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        //	$this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $pageHeading = __('Individual / Company');        //pr($conditions); exit;        $this->{$this->modelClass}->belongsTo = array(            'State' => array(                'className' => 'State',                'foreignKey' => 'state_id'            ),            'City' => array(                'className' => 'City',                'foreignKey' => 'city_id'        ));        $this->Usermgmt->virtualFields = array(            'total_recharge' => 'Select sum(amount) from driver_sos Where user_id=Usermgmt.id AND driver_sos.type=4',            'total_credit' => 'Select sum(amount) from driver_sos Where user_id=Usermgmt.id AND driver_sos.amount_type=0',            'total_debit' => 'Select sum(amount) from driver_sos Where user_id=Usermgmt.id AND driver_sos.amount_type=1',        );        $this->paginate = array(            'conditions' => array($conditions),            'fields' => array(                'Usermgmt.status', 'Usermgmt.created', 'Usermgmt.firstname', 'Usermgmt.lastname', 'Usermgmt.email', 'Usermgmt.address',                'Usermgmt.mobile', 'Usermgmt.image', 'total_recharge', 'total_credit', 'total_debit', 'Usermgmt.uniqid', 'Usermgmt.total_balance', 'Usermgmt.last_recharge_date', 'Usermgmt.last_recharge_amount', 'Usermgmt.state_id', 'Usermgmt.city_id', 'State.name', 'City.name'            ),            'recursive' => 5,            'limit' => $limit,            'order' => $order_arr        );        $this->set('pageHeading', Inflector::singularize($pageHeading));        $this->set('back', $pageHeading);        $this->set('result', $this->paginate());        $this->loadModel("State");        $country = $this->State->find("list");        $this->set("states", $country);        $this->loadModel("City");        $city = $this->City->find("list");        $this->set("city", $city);        $this->set('page', $page);        $this->set('title_for_layout', 'Vendor SOA');        $this->loadModel("Company");        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'order' => array('Company.name' => 'asc'),            'fields' => array(                'Company.id', 'User.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['User']['id']] = $vl['Company']['name'] . ' (' . $vl['User']['uniqid'] . ')';            }        }        $this->set("company", $companyarray);    }    public function exportsos($value) {        $this->layout = false;        $value = base64_decode(base64_decode($value));        $value = json_decode($value, true);        $conditions = array();        $limitValue = $limit = 25;        $conditions = array();        array_push($conditions, array('user_role_id' => array(4)));        $order_arr = array($this->modelClass . '.created' => 'desc');        if (!empty($this->request->query)) {            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));            }            if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {                array_push($conditions, array('Usermgmt.id' => $this->request->query['firstname']));            }            if (isset($this->request->query['uniqid']) && $this->request->query['uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid LIKE' => "%" . $this->request->query['uniqid'] . "%"));            }            if (isset($this->request->query['total_balance_order']) && $this->request->query['total_balance_order'] != "") {                $order_arr = array($this->modelClass . '.total_balance' => $this->request->query['total_balance_order']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                if ($this->request->query['status'] == 1) {                    array_push($conditions, array('Usermgmt.total_balance > ' => MINIMUM_AMOUNT_FOR_VENDOR));                    array_push($conditions, array('Usermgmt.status' => 1));                } else if ($this->request->query['status'] == 2) {                    array_push($conditions, array('Usermgmt.total_balance < ' => MINIMUM_AMOUNT_FOR_VENDOR));                    array_push($conditions, array('Usermgmt.status' => 1));                } else if ($this->request->query['status'] == 0) {                    array_push($conditions, array('Usermgmt.status' => 0));                }            }            if ((isset($this->request->query['from_date']) && $this->request->query['from_date']) || (isset($this->request->query['to_date']) && $this->request->query['to_date'])) {                if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                    array_push($conditions, array('(date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ? AND date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));                } else                if (@$this->request->query['from_date']) {                    array_push($conditions, array('date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ' => $this->request->query['from_date']));                } else                if (@$this->request->query['to_date']) {                    array_push($conditions, array('date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ' => $this->request->query['to_date']));                }            } else {                if (isset($this->request->query['recharge_history']) && $this->request->query['recharge_history']) {                    $rch = $this->request->query['recharge_history'];                    if ($rch == "TO") {                        $from_date = date("Y-m-d");                        $to_date = date("Y-m-d");                    } else if ($rch == "LW") {                        $from_date = date('Y-m-d', strtotime('-7 days'));                        $to_date = date('Y-m-d');                    } else if ($rch == "LM") {                        $from_date = date('Y-m-d', strtotime('-30 days'));                        $to_date = date('Y-m-d');                    } else if ($rch == "CM") {                        $current_year = date("Y");                        $current_month = date("n");                        $from_date = $current_year . "-" . $current_month . "-01";                        $to_date = date('Y-m-d');                    }                    array_push($conditions, array('(date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ? AND date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ?)' => array($from_date, $to_date)));                }            }        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $export_type = ((isset($this->params->named['export_type']) && $this->params->named['export_type'] != "") ? $this->params->named['export_type'] : 'pdf');        $this->{$this->modelClass}->belongsTo = array(            'State' => array(                'className' => 'State',                'foreignKey' => 'state_id'            ),            'City' => array(                'className' => 'City',                'foreignKey' => 'city_id'        ));//pr($order_arr); exit;        $this->Usermgmt->virtualFields = array(            'total_recharge' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.type=4',            'total_credit' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.amount_type=0',            'total_debit' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.amount_type=1',        );        $result = $this->Usermgmt->find('all', array(            'conditions' => array($conditions),            'fields' => array(                'Usermgmt.status', 'Usermgmt.created', 'Usermgmt.firstname', 'Usermgmt.lastname', 'Usermgmt.email', 'Usermgmt.address',                'Usermgmt.mobile', 'Usermgmt.image', 'total_recharge', 'total_credit', 'total_debit', 'Usermgmt.uniqid', 'Usermgmt.total_balance', 'Usermgmt.last_recharge_date', 'Usermgmt.last_recharge_amount', 'Usermgmt.state_id', 'Usermgmt.city_id', 'State.name', 'City.name'            ),            'recursive' => 5,            'order' => $order_arr        ));        $count_new_bookings = $this->Usermgmt->find('count', array(            'conditions' => $conditions        ));//pr($result);exit;        $header = array('S.No.', 'Vendor ID', 'Vendor Name', 'Company Name', 'Mobile No', 'City', 'Last Recharge Amount', 'Last Recharge Date', 'Total Recharge Amount', 'Total Credit Amount', 'Total Debit Amount', 'Current Balance', 'Account Status');        $i = 1;        if (!empty($result)) {            if ($page == 0 || $page == 1) {                $i = $count_new_bookings;            } else {                $i = $count_new_bookings - $limit * ($page - 1);            }            foreach ($result as $key => $res) {                $result_value[$key]['S.No.'] = $i;                $result_value[$key]['Vendor ID'] = $res['Usermgmt']['uniqid'];                $result_value[$key]['Vendor Name'] = $res['Usermgmt']['firstname'] . " " . $res['Usermgmt']['lastname'];                $result_value[$key]['Company Name'] = ((isset($res['Company'][0]['name']) && $res['Company'][0]['name'] != NULL) ? $res['Company'][0]['name'] : 'N.A');                $result_value[$key]['Mobile No'] = $res['Usermgmt']['mobile'] ? $res['Usermgmt']['mobile'] : "N.A";                $result_value[$key]['City'] = isset($res['OperationCity'][0]['City']['name']) ? $res['OperationCity'][0]['City']['name'] : 'N.A';                $result_value[$key]['Last Recharge Amount'] = $res['Usermgmt']['last_recharge_amount'] ? $res['Usermgmt']['last_recharge_amount'] : "N.A";                $result_value[$key]['Last Recharge Date'] = $res['Usermgmt']['last_recharge_date'] ? date("d-m-Y H:i", strtotime($res['Usermgmt']['last_recharge_date'])) : "N.A";                $result_value[$key]['Total Recharge Amount'] = $res['Usermgmt']['total_recharge'] ? number_format($res['Usermgmt']['total_recharge'], 2) : "N.A";                $result_value[$key]['Total Credit Amount'] = $res['Usermgmt']['total_credit'] ? number_format($res['Usermgmt']['total_credit'], 2) : "N.A";                $result_value[$key]['Total Debit Amount'] = $res['Usermgmt']['total_debit'] ? number_format($res['Usermgmt']['total_debit'], 2) : "N.A";                if ($res['Usermgmt']['total_balance'] >= 0) {                    $c_balance = number_format($res['Usermgmt']['total_balance'], 2);                } else {                    $c_balance = "(" . number_format(abs($res['Usermgmt']['total_balance']), 2) . ")";                }                $result_value[$key]['Current Balance'] = $c_balance;                if ($res['Usermgmt']['status'] == 1) {                    if ($res['Usermgmt']['total_balance'] > MINIMUM_AMOUNT_FOR_VENDOR) {                        $status = "Active";                    } else {                        $status = "Hold";                    }                } else {                    $status = "Inactive";                }                $result_value[$key]['Account Status'] = $status;                $i--;            }        }        $this->export_file($header, $result_value, $export_type);        die;    }    public $driver_payment_status = array(        '1' => 'Incentive',        '2' => 'Penalties',    );    public function driver_payment($uid = '') {        $this->set('tab_open', 'invoice');        if ($uid == "") {            $this->redirect(array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'vendors'));        }        //echo $first_char;        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $limitValue = 25;        $limit = 25;        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->set('uid', $uid);        //vendor name//        $this->loadModel("User");        $user_dtls = $this->User->find('first', array(            'conditions' => array(                "User.uniqid" => $uid            ),            'fields' => array(                'User.id', 'User.firstname', 'User.lastname'            )        ));        $this->set('user_dtls', $user_dtls);        ///echo $user_dtls['User']['id'];        $conditions = array("DriverPayment.user_id" => $user_dtls['User']['id']);        if (!empty($this->request->query)) {            if (isset($this->request->query['transaction_id']) && $this->request->query['transaction_id'] != "") {                array_push($conditions, array('DriverPayment.walletSysTransactionId' => "" . $this->request->query['transaction_id'] . ""));                $this->set("transaction_id", $this->request->query['transaction_id']);            }            if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                array_push($conditions, array('(DATE_FORMAT(DriverPayment.created, "%Y-%m-%d") >= ? AND DATE_FORMAT(DriverPayment.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));            } else            if (@$this->request->query['from_date']) {                array_push($conditions, array('DATE_FORMAT(DriverPayment.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));            } else            if (@$this->request->query['to_date']) {                array_push($conditions, array('DATE_FORMAT(DriverPayment.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));            }            $this->set("from_date", @$this->request->query['from_date']);            $this->set("to_date", @$this->request->query['to_date']);        }        $this->loadModel("DriverPayment");        $this->loadModel("DriverPayment");        $this->paginate = array(            'conditions' => $conditions,            'joins' => array(                array(                    'table' => 'driver_sos',                    'alias' => 'DriverSos',                    'type' => 'INNER',                    'conditions' => array(                        'DriverSos.id = DriverPayment.driver_sos_id '                    )                )            ),            'fields' => array('DriverSos.*', 'DriverPayment.*'),            'limit' => $limit,            'page' => $page,            'order' => array('DriverPayment.id' => 'desc')        );        // pr($this->paginate('DriverSos'));        $this->set('invoices_list', $this->paginate('DriverPayment'));        $this->set('page', $page);        $this->set('title_for_layout', $user_dtls['User']['firstname'] . " - Account Statement");        $this->set("payment_status", $this->driver_payment_status);    }    public function export($value) {        $this->layout = false;        $value = base64_decode(base64_decode($value));        $value = json_decode($value, true);        $conditions = array();        $limitValue = $limit = 25;        $conditions = array();        array_push($conditions, array('user_role_id' => array(2, 5)));        $order_arr = array($this->modelClass . '.created' => 'desc');        if (!empty($this->request->query)) {            if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                array_push($conditions, array('Usermgmt.city_id' => "" . $this->request->query['city_id'] . ""));            }            if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {                array_push($conditions, array('Usermgmt.id' => $this->request->query['firstname']));            }            if (isset($this->request->query['uniqid']) && $this->request->query['uniqid'] != "") {                array_push($conditions, array('Usermgmt.uniqid LIKE' => "%" . $this->request->query['uniqid'] . "%"));            }            if (isset($this->request->query['total_balance_order']) && $this->request->query['total_balance_order'] != "") {                $order_arr = array($this->modelClass . '.total_balance' => $this->request->query['total_balance_order']);            }            if (isset($this->request->query['status']) && $this->request->query['status'] != "") {                if ($this->request->query['status'] == 1) {                    array_push($conditions, array('Usermgmt.total_balance > ' => MINIMUM_AMOUNT_FOR_VENDOR));                    array_push($conditions, array('Usermgmt.status' => 1));                } else if ($this->request->query['status'] == 2) {                    array_push($conditions, array('Usermgmt.total_balance < ' => MINIMUM_AMOUNT_FOR_VENDOR));                    array_push($conditions, array('Usermgmt.status' => 1));                } else if ($this->request->query['status'] == 0) {                    array_push($conditions, array('Usermgmt.status' => 0));                }            }            if ((isset($this->request->query['from_date']) && $this->request->query['from_date']) || (isset($this->request->query['to_date']) && $this->request->query['to_date'])) {                if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                    array_push($conditions, array('(date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ? AND date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));                } else                if (@$this->request->query['from_date']) {                    array_push($conditions, array('date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ' => $this->request->query['from_date']));                } else                if (@$this->request->query['to_date']) {                    array_push($conditions, array('date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ' => $this->request->query['to_date']));                }            } else {                if (isset($this->request->query['recharge_history']) && $this->request->query['recharge_history']) {                    $rch = $this->request->query['recharge_history'];                    if ($rch == "TO") {                        $from_date = date("Y-m-d");                        $to_date = date("Y-m-d");                    } else if ($rch == "LW") {                        $from_date = date('Y-m-d', strtotime('-7 days'));                        $to_date = date('Y-m-d');                    } else if ($rch == "LM") {                        $from_date = date('Y-m-d', strtotime('-30 days'));                        $to_date = date('Y-m-d');                    } else if ($rch == "CM") {                        $current_year = date("Y");                        $current_month = date("n");                        $from_date = $current_year . "-" . $current_month . "-01";                        $to_date = date('Y-m-d');                    }                    array_push($conditions, array('(date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") >= ? AND date_format(Usermgmt.last_recharge_date, "%Y-%m-%d") <= ?)' => array($from_date, $to_date)));                }            }        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $export_type = ((isset($this->params->named['export_type']) && $this->params->named['export_type'] != "") ? $this->params->named['export_type'] : 'pdf');        $this->{$this->modelClass}->belongsTo = array(            'State' => array(                'className' => 'State',                'foreignKey' => 'state_id'            ),            'City' => array(                'className' => 'City',                'foreignKey' => 'city_id'        ));//pr($order_arr); exit;        $this->Usermgmt->virtualFields = array(            'total_recharge' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.type=4',            'total_credit' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.amount_type=0',            'total_debit' => 'Select sum(amount) from payments Where user_id=Usermgmt.id AND payments.amount_type=1',        );        $result = $this->Usermgmt->find('all', array(            'conditions' => array($conditions),            'fields' => array(                'Usermgmt.status', 'Usermgmt.created', 'Usermgmt.firstname', 'Usermgmt.lastname', 'Usermgmt.email', 'Usermgmt.address',                'Usermgmt.mobile', 'Usermgmt.image', 'total_recharge', 'total_credit', 'total_debit', 'Usermgmt.uniqid', 'Usermgmt.total_balance', 'Usermgmt.last_recharge_date', 'Usermgmt.last_recharge_amount', 'Usermgmt.state_id', 'Usermgmt.city_id', 'State.name', 'City.name'            ),            'recursive' => 5,            'order' => $order_arr        ));        $count_new_bookings = count($result);//        $count_new_bookings = $this->Usermgmt->find('count', array(//            'conditions' => $conditions//        ));//pr($result);exit;        $header = array('S.No.', 'Vendor ID', 'Vendor Name', 'Company Name', 'Mobile No', 'City', 'Last Recharge Amount', 'Last Recharge Date', 'Total Recharge Amount', 'Total Credit Amount', 'Total Debit Amount', 'Current Balance', 'Account Status');        $i = 1;        if (!empty($result)) {            if ($page == 0 || $page == 1) {                $i = $count_new_bookings;            } else {                $i = $count_new_bookings - $limit * ($page - 1);            }            foreach ($result as $key => $res) {                $result_value[$key]['S.No.'] = $i;                $result_value[$key]['Vendor ID'] = $res['Usermgmt']['uniqid'];                $result_value[$key]['Vendor Name'] = $res['Usermgmt']['firstname'] . " " . $res['Usermgmt']['lastname'];                $result_value[$key]['Company Name'] = ((isset($res['Company'][0]['name']) && $res['Company'][0]['name'] != NULL) ? $res['Company'][0]['name'] : 'N.A');                $result_value[$key]['Mobile No'] = $res['Usermgmt']['mobile'] ? $res['Usermgmt']['mobile'] : "N.A";                $result_value[$key]['City'] = isset($res['OperationCity'][0]['City']['name']) ? $res['OperationCity'][0]['City']['name'] : 'N.A';                $result_value[$key]['Last Recharge Amount'] = $res['Usermgmt']['last_recharge_amount'] ? $res['Usermgmt']['last_recharge_amount'] : "N.A";                $result_value[$key]['Last Recharge Date'] = $res['Usermgmt']['last_recharge_date'] ? date("d-m-Y H:i", strtotime($res['Usermgmt']['last_recharge_date'])) : "N.A";                $result_value[$key]['Total Recharge Amount'] = $res['Usermgmt']['total_recharge'] ? number_format($res['Usermgmt']['total_recharge'], 2) : "N.A";                $result_value[$key]['Total Credit Amount'] = $res['Usermgmt']['total_credit'] ? number_format($res['Usermgmt']['total_credit'], 2) : "N.A";                $result_value[$key]['Total Debit Amount'] = $res['Usermgmt']['total_debit'] ? number_format($res['Usermgmt']['total_debit'], 2) : "N.A";                if ($res['Usermgmt']['total_balance'] >= 0) {                    $c_balance = number_format($res['Usermgmt']['total_balance'], 2);                } else {                    $c_balance = "(" . number_format(abs($res['Usermgmt']['total_balance']), 2) . ")";                }                $result_value[$key]['Current Balance'] = $c_balance;                if ($res['Usermgmt']['status'] == 1) {                    if ($res['Usermgmt']['total_balance'] > MINIMUM_AMOUNT_FOR_VENDOR) {                        $status = "Active";                    } else {                        $status = "Hold";                    }                } else {                    $status = "Inactive";                }                $result_value[$key]['Account Status'] = $status;                $i--;            }        }        $this->export_file($header, $result_value, $export_type);        die;    }    function send_message_vendors() {        $this->autoRender = false;//$this->set("booking_detail", $booking_detail);        $this->loadModel("City");        $city = $this->City->find("list", array('conditions' => array("status" => 1)));        $this->set("city_list", $city);        $this->render('send_message_vendors');    }    function push_message() {        $message_text = $this->request->data['message_text'];        $cities = $this->request->data['SentMessage']['city_id'];        if (!empty($cities)) {            if ($this->Auth->user('user_role_id') == 1) {                $user_type = 0;            } else {                $user_type = 1;            }            $message = $this->request->data['message_text'];            $user_id = $this->Auth->user('id');            $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');            $this->loadModel("SentMessage");            $this->loadModel('User');            $vendor_details = $this->User->find('all', array(                'conditions' => array(                    'User.user_role_id' => 2,                    'User.status' => 1,                    'User.city_id' => $cities,                ),                'fields' => array(                    'User.id', 'User.mobile')                    )            );            // pr($vendor_details);exit;            $Phone_Arr = array();            $sent_to = array();            if (!empty($vendor_details)) {                foreach ($vendor_details as $data) {                    if ($data['User']['mobile']) {                        $Phone_Arr[] = '91' . trim($data['User']['mobile']);                        $sent_to[] = $data['User']['id'];                    }                }            }            if ($message_text) {                //$Phone_Arr = array();                $message_text = urldecode($message_text);//                $Phone_Arr[] = "919012333233";                $Phone_Arr[] = "919289938326"; //active//                $Phone_Arr[] = "919716335846";//                $Phone_Arr[] = "918587030121";                $Phone_Arr[] = "918826355579"; //active//                $Phone_Arr[] = "919310456789";//                $Phone_Arr[] = "919871758925";//                $Phone_Arr[] = "917023311807";//                $Phone_Arr[] = "918058450319";//                $Phone_Arr[] = "918130023094";//                $Phone_Arr[] = "4130023095";//                $Phone_Arr[] = "914130023095";                $Phone_Arr[] = "917023311807";                //pr($Phone_Arr); exit;                $response = $this->send_message_multiple($Phone_Arr, $message_text);                // pr($response); exit;                $responses = array();                if ($response) {                    $responses = explode("status=1", $response);                }                $new_arr = array();                if (!empty($responses)) {                    foreach ($responses as $i => $text) {                        if ($text) {                            $texts = explode("-", $text);                            if (!empty($texts)) {                                if (isset($texts[1]) && $texts[1]) {                                    $numbers = $texts[1];                                    if ($numbers) {                                        $number_ar = explode(",", $numbers);                                        $mobile_num = $number_ar[0];                                        if ($mobile_num) {                                            $new_arr[] = trim(substr($mobile_num, 2));                                        }                                    }                                }                            }                        }                    }                }                //delivered to//                $vendor_details_dl = $this->User->find('all', array(                    'conditions' => array(                        'User.user_role_id' => 2,                        'User.status' => 1,                        'User.mobile' => $new_arr,                    ),                    'fields' => array(                        'User.id', 'User.mobile')                        )                );                $delivered_arr = array();                if (!empty($vendor_details_dl)) {                    foreach ($vendor_details_dl as $dts) {                        $delivered_arr[] = $dts['User']['id'];                    }                }                $ArrIns = array();                $ArrIns['SentMessage']['city_ids'] = !empty($cities) ? implode(",", $cities) : "";                $ArrIns['SentMessage']['sent_to'] = !empty($sent_to) ? implode(",", $sent_to) : "";                $ArrIns['SentMessage']['delivered_to'] = !empty($delivered_arr) ? implode(",", $delivered_arr) : "";                $ArrIns['SentMessage']['message'] = $message;                $ArrIns['SentMessage']['type'] = 0;                $ArrIns['SentMessage']['user_type'] = $user_type;                $ArrIns['SentMessage']['user_id'] = $user_id;                $ArrIns['SentMessage']['user_name'] = $user_name;                $ArrIns['SentMessage']['created'] = date("Y-m-d H:i:s");                $this->SentMessage->save($ArrIns);                $insert_id = $this->SentMessage->getLastInsertId();                $text_action = "added";                $json_data = json_encode($this->request->data);                $this->global_logs("sent_messages", $insert_id, 0, $text_action, $json_data);                //pr($new_arr);                //save to databse//                $this->Session->setFlash(__('Message sent successfully.'), 'success');                $this->redirect(array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'messages'));            } else {                $this->Session->setFlash(__('Please enter message.'), 'error');                $this->redirect(array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'messages'));            }        } else {            $this->Session->setFlash(__('Please select atleast one city.'), 'error');            $this->redirect(array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'messages'));        }        //exit;    }    function send_otp() {        $mobile = $this->data['mobile'];        $tp_sent = "";        if ($mobile) {            $mobpattrn = "/^[789][0-9]{9}$/";            if (preg_match($mobpattrn, $mobile)) {                $this->loadModel("Otp");                $otp = rand(1000, 9999);                // delete otp once verified                $sql2 = "delete from otps where otps.mobile=$mobile";                $this->Otp->query($sql2);                $this->Otp->create();                $ctime = date("Y-m-d H:i:s ", time());                $expire_time = date('Y-m-d H:i:s', strtotime('+30 minutes', strtotime(date("Y-m-d H:i:s ", time()))));                $datas['Otp']['mobile'] = $mobile;                $datas['Otp']['otp'] = $otp;                $datas['Otp']['created'] = $ctime;                $datas['Otp']['verified'] = 0;                $datas['Otp']['expire_time'] = $expire_time;                $this->Otp->save($datas);                $phone_no = "+91" . $mobile;                $msg = "Your Verification Code is " . $otp . ". This code is applicable for 30 minutes only";                $msg = urldecode($msg);                $this->send_message($phone_no, $msg, 1);                $tp_sent = 1;            }        }        echo $tp_sent;        exit;    }    function verify_otp() {        $mobile = $this->data['mobile'];        $otp = $this->data['code'];        $verified = "";        if ($mobile) {            $mobpattrn = "/^[789][0-9]{9}$/";            if (preg_match($mobpattrn, $mobile)) {                $this->loadModel("Otp");                $ctime = date("Y-m-d H:i:s ", time());                $sql = "select id,expire_time from otps WHERE otps.mobile=$mobile AND otps.otp='$otp' ORDER by otps.id DESC limit 1";                $o = $this->Otp->query($sql);                if (count($o) > 0) {                    $otpdata = $o;                    if (strtotime($ctime) <= strtotime($otpdata[0]['otps']['expire_time'])) {                        // verify customer                        $sql1 = "update otps set otps.verified=1 WHERE otps.mobile=$mobile";                        $this->Otp->query($sql1);                        $verified = 1;                    } else {                        $verified = 2;                    }                }            }        }        echo $verified;        exit;    }    public function messages() {        $this->loadModel('SentMessage');        $limitValue = $limit = 25;        $limitValue = 25;        $this->set('limitValue', $limitValue);        $conditions = array();        if ($this->request->is('get') && !isset($this->request->data['recordsPerPage'])) {            if (!empty($this->request->query)) {                if ($this->request->query['submit_button'] == 'Reset') {                    $this->redirect(array('plugin' => 'usermgmt', 'controller' => 'usermgmt', 'action' => 'messages'));                } else {                    if (isset($this->request->query['city_id']) && $this->request->query['city_id'] != "") {                        $ct_id = $this->request->query['city_id'];                        array_push($conditions, "FIND_IN_SET($ct_id,SentMessage.city_ids)");                        $this->set("city_id", $this->request->query['city_id']);                    }                    if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                        array_push($conditions, array('(DATE_FORMAT(SentMessage.created, "%Y-%m-%d") >= ? AND DATE_FORMAT(SentMessage.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));                    } else                    if (@$this->request->query['from_date']) {                        array_push($conditions, array('DATE_FORMAT(SentMessage.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));                    } else                    if (@$this->request->query['to_date']) {                        array_push($conditions, array('DATE_FORMAT(SentMessage.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));                    }                    $this->set("from_date", @$this->request->query['from_date']);                    $this->set("to_date", @$this->request->query['to_date']);                    if (isset($this->request->query['firstname']) && $this->request->query['firstname'] != "") {                        //pr($this->request->query['firstname']);                         array_push($conditions, array('SentMessage.user_name LIKE' => "%" . $this->request->query['firstname'] . "%"));                        $this->set("firstname", $this->request->query['firstname']);                    }                }            }        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        //$limit = ((isset($this->request->data['recordsPerPage']) && $this->request->data['recordsPerPage'] != "") ? $this->request->data['recordsPerPage'] : 10);        //pr($conditions);        $this->paginate = array(            'conditions' => $conditions,            'limit' => $limitValue,            'order' => array("id" => "DESC"),        );        $this->set('limit', $limit);        $this->set('users_list', $this->paginate('SentMessage'));//        $count_new_bookings = $this->SentMessage->find('count', array(//            'conditions' => $conditions//        ));//        $this->set("count_new_bookings", $count_new_bookings);        $this->set('tab_open', 'partners');        $this->set('reg_from', $this->reg_from);        $this->set('page', $page);        $this->set('title_for_layout', 'Messages');        ////        $user_list = array();        //admin datas//        $this->loadModel('User');        $user_dttls_ad = $this->User->find('first', array(            'conditions' => array(                'User.id' => 1,            ),            'fields' => array('firstname', 'id', 'lastname'),        ));        if (!empty($user_dttls_ad)) {            $user_list[$user_dttls_ad['User']['firstname'] . " " . $user_dttls_ad['User']['lastname']] = $user_dttls_ad['User']['firstname'] . " " . $user_dttls_ad['User']['lastname'];        }        //ends//        $this->loadModel('AccessRightUser');        $user_dttls = $this->AccessRightUser->find('all', array(            'conditions' => array(                'AccessRightUser.status' => 1,            ),            'fields' => array('firstname', 'id', 'employee_id'),        ));        if (!empty($user_dttls)) {            foreach ($user_dttls as $dts) {                $user_list[$dts['AccessRightUser']['firstname']] = $dts['AccessRightUser']['firstname'];            }        }        $this->set('user_dttls', $user_list);        $this->loadModel("City");        $city = $this->City->find("list", array('conditions' => array("status" => 1)));        $this->set("city", $city);    }    function message_users($id, $type) {        $this->autoRender = false;        $this->loadModel('SentMessage');        $msg_records = $this->SentMessage->find('first', array(            'conditions' => array(                'SentMessage.id' => $id,            ),        ));        //pr($msg_records);        $users_list = array();        if (!empty($msg_records)) {            $title = "";            $conditions = array();            if ($type == 'sent_to') {                $users_list = $msg_records['SentMessage']['sent_to'];                $title = "Sent To";            } else {                $users_list = $msg_records['SentMessage']['delivered_to'];                $title = "Delivered To";            }            $users_Arr = explode(",", $users_list);            $conditions = array(                'Company.user_id' => $users_Arr,            );            $this->loadModel('Company');            $users_list = $this->Company->find('all', array(                'conditions' => $conditions,                'fields' => array('name', 'id'),            ));        }        //pr($users_list);exit;        $this->set('count_new_bookings', count($users_list));        $this->set('title', $title);        $this->set('users_list', $users_list);        $this->render('message_users');    }    function get_city_all() {// Load Fare Settings        $this->layout = false;        $subcategory = array();        if ($this->request->is('Ajax')) {            if ($this->data) {                $this->loadModel("UserCity");                $subcategory = $this->UserCity->find('list', array(                    'conditions' => array(                        'UserCity.state_id' => $this->data['cat_id'],                    ),                    'fields' => array('UserCity.city_id', 'UserCity.city_name'),                ));                /* $data = $this->City->query("SELECT cities.id,cities.name FROM operation_cities                  INNER JOIN cities                  ON                  operation_cities.city_id = cities.id                  WHERE                  operation_cities.company_id = '". $this->data['company_id']."'                  AND                  operation_cities.state_id = '". $this->data['cat_id']."'");                  pr($data); */            }            echo json_encode($subcategory);        }        die;    }}