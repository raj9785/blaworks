<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 *//** * MotorModels Users Controller * * @package MotorModels * @subpackage users.controllers */class MotorModelsController extends MotorModelAppController {    /**     * Controller name     *     * @var string     */    var $name = 'MotorModels';    /**     * Helpers     *     * @var array     */    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    //public $paginate = array('limit'=>5,'order'=>'MotorModel.id','page'=>1);    /**     * Components     *     * @var array     */    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(	array('field' => 'name', 'type' => 'value')    );    // public $presetVars = 	true;    public function beforeFilter() {	parent::beforeFilter();	$this->set('model', $this->modelClass);	$this->loadModel("Motor");    }    /**     * Admin Index     *     * @return void     */    function index() {	//echo "yo";die;	$this->set('tab_open', 'vehicles');	// Breadcrumb	$this->loadModel('User');	$vendors_list = $this->User->find('all', array(	    'conditions' => array(		'User.user_role_id' => 2	    ),	    'fields' => array(		'User.id', 'User.email', 'User.firstname', 'User.lastname', 'User.uniqid'	    )	));	$vlarray = array();	if (!empty($vendors_list)) {	    foreach ($vendors_list as $key => $vl) {		$vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' )';	    }	}	$this->set('vlarray', $vlarray);	$pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');	$breadcrumb = array('pages' => $pages, 'active' => __('Article MotorModel', true));	$this->set('breadcrumb', $breadcrumb);	$pageHeading = 'Vehicle Model Management';	$this->set('pageHeading', $pageHeading);// Pagging	if (!empty($this->data)) {	    if (!empty($this->data['id'])) {		$submit_aciton = $this->data['MotorModel']['my_action'];		foreach ($this->data['id'] as $mainid) {		    if ($mainid != '') {			if ($submit_aciton == 'delete') {			    $this->MotorModel->delete($mainid);			    $message = "Deleted Successfully";			}			if ($submit_aciton == 'active') {			    $this->MotorModel->updateAll(array('MotorModel.status' => '1'), array('MotorModel.id' => $mainid));			    $message = "Activated Successfully";			}			if ($submit_aciton == 'inactive') {			    $this->MotorModel->updateAll(array('MotorModel.status' => '0'), array('MotorModel.id' => $mainid));			    $message = "Inactivated Successfully";			}		    }		}		$this->Session->setFlash($message, 'success');	    } else {		if (!empty($this->data) && isset($this->data['recordsPerPage'])) {		    $limitValue = $limit = $this->data['recordsPerPage'];		    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);		} else {		    // pr($this->data);		    $this->Prg->commonProcess();		}	    }	}//set the limitvalue for records	$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');	$this->set('limitValue', $limitValue);	$this->set('limit', $limit);// searching	$this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;	$parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);	if (@$this->passedArgs['vehicle_manufacturer']) {	    $parsedConditions[] = array('Motor.id ' => $this->passedArgs['vehicle_manufacturer']);	    $Motorname = $this->passedArgs['vehicle_manufacturer'];	    $this->set("vehicle_manufacturer", $this->passedArgs['vehicle_manufacturer']);	} else {	    $Motorname = "";	}	if (@$this->passedArgs['motor_type_id']) {	    $parsedConditions[] = array('MotorType.id' => $this->passedArgs['motor_type_id']);	    $motor_type_id = $this->passedArgs['motor_type_id'];	    $this->set("motor_type_id", $this->passedArgs['motor_type_id']);	} else {	    $Categoryname = "";	}	if (@$this->passedArgs['id']) {	    $parsedConditions[] = array('MotorModel.id ' => $this->passedArgs['id']);	    $id = $this->passedArgs['id'];	    $this->set("id", $this->passedArgs['id']);	} else {	    $id = "";	}	if(@$this->params->named['from_date'] and @$this->params->named['to_date']) {    	array_push($parsedConditions, array('(from_unixtime(MotorModel.created, "%Y-%m-%d") >= ? AND from_unixtime(MotorModel.created, "%Y-%m-%d") <= ?)' => array($this->params->named['from_date'], $this->params->named['to_date'])));    } else	if(@$this->params->named['from_date']) {    	array_push($parsedConditions, array('from_unixtime(MotorModel.created, "%Y-%m-%d") >= ' => $this->params->named['from_date']));    } else	if(@$this->params->named['to_date']) {    	array_push($parsedConditions, array('from_unixtime(MotorModel.created, "%Y-%m-%d") <= ' => $this->params->named['to_date']));    }	if (isset($this->passedArgs['Typename'])) {	    // $parsedConditions[] = array('MotorType.name like ' => "%" . $this->passedArgs['Typename'] . "%");	    $parsedConditions[] = array('MotorType.name like ' => "%" . $this->passedArgs['Typename'] . "%");	    $Typename = $this->passedArgs['Typename'];	    $this->set("Typename", $this->passedArgs['Typename']);	} else {	    $Typename = "";	}	//pr($this->request->data); exit;	if (!empty($this->data)) {	    if (isset($this->request->data['Taxi']['motor_type_id']) && $this->request->data['Taxi']['motor_type_id'] != "") {		array_push($cond, array('Taxi.motor_type_id' => $this->request->data['Taxi']['motor_type_id']));		$this->set("Typename", $this->request->data['Taxi']['motor_type_id']);	    }	    if (isset($this->request->data['Taxi']['motor_model_id']) && $this->request->data['Taxi']['motor_model_id'] != "") {		array_push($cond, array('Taxi.motor_model_id' => "" . $this->request->data['Taxi']['motor_model_id'] . ""));		$this->set("mdel_name", $this->request->data['Taxi']['motor_model_id']);	    }	    if ((isset($this->request->query['from_date']) && $this->request->query['from_date'] != "") && (isset($this->request->query['to_date']) && $this->request->query['to_date'] != "")) {		array_push($conditions, array('Taxi.created BETWEEN ? AND ?' => array($this->request->query['from_date'], $this->request->query['to_date'])));		$this->set("from_date", $this->request->query['from_date']);		$this->set("to_date", $this->request->query['to_date']);	    }	}	$this->paginate = array(	    'conditions' => array($parsedConditions),	    'limit' => $limit,	    'order' => array($this->modelClass . '.created' => 'desc')	);	$page = ((isset($this->params['named']['page']) && $this->params['named']['page'] != NULL) ? $this->params['named']['page'] : 0);	$this->set('result', $this->paginate());//	$count_new_bookings = $this->MotorModel->find('count', array(//	    'conditions' => $parsedConditions//	));//	$this->set("count_new_bookings", $count_new_bookings);	$this->set("page", $page);	$this->set('Motorname', $Motorname);	// $this->set('Categoryname', $Categoryname);	$this->set('Typename', $Typename);	//pr($this->paginate());die;	$this->loadModel("MotorType");	$motor_type_id = $this->MotorType->find("list", array('order' => array(		'MotorType.order' => 'ASC'	)));	$this->set("motor_type_id", $motor_type_id);	$this->loadModel("MotorModel");	$motor_model_id = $this->MotorModel->find("list");	$this->set("motor_model_id", $motor_model_id);	$this->loadModel("Motor");	$vehicle_manufacturer = $this->Motor->find("list");	$this->set("vehicle_manufacturer", $vehicle_manufacturer);        $this->set('title_for_layout', 'Vehicle Models');    }    function add() {	$this->set('tab_open', 'vehicles');	$pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');	$breadcrumb = array('pages' => $pages, 'active' => __('Article MotorModel', true));	$this->set('breadcrumb', $breadcrumb);	$pageHeading = 'Article MotorModel';	$this->set('pageHeading', $pageHeading);	$motor_type = $this->MotorModel->MotorType->find('list', array(	    'conditions' => array(		'MotorType.status' => 1	    ),	    'fields' => array(		'MotorType.id', 'MotorType.name'	    )	));	$this->set('motor_type', $motor_type);	// cities list	$this->loadModel('City');	$cities_list = $this->City->find('all', array(	    'conditions' => array(		'City.status' => 1	    ),	    'fields' => array(		'City.id', 'City.name'	    )	));	$this->set('cities_list', $cities_list);	if (!empty($this->data)) {	    $upload_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . DS . 'uploads' . DS . 'motor_images';	    $thumb_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . DS . 'uploads' . DS . 'motor_images' . DS . 'large';	    $thumb_folder2 = WEBSITE_APP_WEBROOT_ROOT_PATH . DS . 'uploads' . DS . 'motor_images' . DS . 'small';	    if (isset($this->request->data['MotorModel']['image']) && $this->request->data['MotorModel']['image']['name'] != "") {		$allowed_extensions = array('jpg', 'jpeg', 'png', 'gif');		$uploaded_image = $this->request->data['MotorModel']['image']['name'];		$imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);		$uploadedImagesize = getimagesize($this->request->data['MotorModel']['image']['tmp_name']);		$uploadedImageWidth = $uploadedImagesize[0];		$uploadedImageHeight = $uploadedImagesize[1];		if (!in_array($imgExtension, $allowed_extensions)) {		    $this->data = $this->request->data;		    $this->Session->setFlash(__('Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');		}		$uploadimageArray = $this->request->data['MotorModel']['image'];		unset($this->request->data['MotorModel']['image']);	    } else {		unset($this->request->data['MotorModel']['image']);	    }	    if ($this->{$this->modelClass}->save($this->data, false)) {		// save motor model cities		$latest_model_id = $this->{$this->modelClass}->id;                //log                $text_action = "added";                $json_data = json_encode($this->request->data);                $this->global_logs("motor_models", $latest_model_id, 0, $text_action, $json_data);		if (isset($this->request->data['MotorModelCity']) && !empty($this->request->data['MotorModelCity'])) {		    $this->loadModel('MotorModelCity');		    $counter = 0;		    $save_motor_model_city = array();		    foreach ($this->request->data['MotorModelCity'] as $key => $index) {			$save_motor_model_city[$counter]['MotorModelCity']['motor_id'] = $this->request->data['MotorModel']['motor_id'];			$save_motor_model_city[$counter]['MotorModelCity']['motor_type_id'] = $this->request->data['MotorModel']['motor_type_id'];			$save_motor_model_city[$counter]['MotorModelCity']['model_id'] = $latest_model_id;			$save_motor_model_city[$counter]['MotorModelCity']['cityid'] = $index['city_id'];			$counter++;		    }		    if (!empty($save_motor_model_city)) {			$this->MotorModelCity->saveAll($save_motor_model_city);		    }		}		if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {		    $file_name = $this->MotorModel->id . '_' . time() . '_' . basename(str_replace(" ", "_", $uploadimageArray['name']));		    if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_folder . DS . $file_name)) {			$this->resize($file_name, 735, 500, $upload_folder, $thumb_folder);			$this->resize($file_name, 245, 166, $upload_folder, $thumb_folder2);			$this->MotorModel->updateAll(array('MotorModel.image' => "'" . $file_name . "'"), array('MotorModel.id' => $this->MotorModel->id));			unlink($upload_folder . DS . $file_name);		    } else {			$is_file_uploaded = 0;		    }		}		$this->Session->setFlash('MotorModel has been added.', 'success');		$this->redirect(array('action' => 'index'));	    }	}	$category = $this->MotorModel->MotorType->find("list", array("conditions" => array("status" => 1)));	$this->set("category", $category);	$motor = $this->Motor->find("list", array("conditions" => array("status" => 1)));	$this->set("motor", $motor);	$this->loadModel('User');	$vlarray = array();	$vendors_list = $this->User->find('all', array(	    'conditions' => array(		'User.user_role_id' => 2	    ),	    'fields' => array(		'User.id', 'User.email', 'User.firstname', 'User.lastname', 'User.uniqid'	    )	));	if (!empty($vendors_list)) {	    foreach ($vendors_list as $key => $vl) {		$vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' )';	    }	}	$this->set("vendors_list", $vlarray);        $this->set('title_for_layout', 'Add New Vehicle Model');    }    function edit($id = null) {	$this->set('tab_open', 'vehicles');//id not found	$pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');	$breadcrumb = array('pages' => $pages, 'active' => __('Article MotorModel', true));	$this->set('breadcrumb', $breadcrumb);	$pageHeading = 'Article MotorModel';	$this->set('pageHeading', $pageHeading);	if (!isset($id) || $id == '') {	    $this->Session->setFlash('Invalid Access.', 'error');	    $this->redirect(array('controller' => 'datas', 'action' => 'index'));	}// set model by id & send id to view	$this->set('id', $id);	$user = $this->{$this->modelClass}->findById($id);	$this->set("result", $user);	$this->{$this->modelClass}->set($user);	// cities list	$this->loadModel('City');	$cities_list = $this->City->find('all', array(	    'conditions' => array(		'City.status' => 1	    ),	    'fields' => array(		'City.id', 'City.name'	    )	));	$this->set('cities_list', $cities_list);	// get list of cities attached with model id	$this->loadModel('MotorModelCity');	$motor_type = $this->MotorModel->MotorType->find('list', array(	    'conditions' => array(		'MotorType.status' => 1	    ),	    'fields' => array(		'MotorType.id', 'MotorType.name'	    )	));	$this->set('motor_type', $motor_type);//Read values from database and edit  the record	//first time	if (empty($this->data)) {	    $this->data = $this->{$this->modelClass}->read();	    $this->set('users_data', $this->data);	}	//second time	else {	    //set model & save data & setFlash session	    //$this->{$this->modelClass}->set($this->data);	    $upload_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . DS . 'uploads' . DS . 'motor_images';	    $thumb_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . DS . 'uploads' . DS . 'motor_images' . DS . 'large';	    $thumb_folder2 = WEBSITE_APP_WEBROOT_ROOT_PATH . DS . 'uploads' . DS . 'motor_images' . DS . 'small';	    $success = 1;	    if (isset($this->request->data['MotorModel']['image']) && $this->request->data['MotorModel']['image']['name'] != "") {		$allowed_extensions = array('jpg', 'jpeg', 'png', 'gif');		$uploaded_image = $this->request->data['MotorModel']['image']['name'];		$imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);		$uploadedImagesize = getimagesize($this->request->data['MotorModel']['image']['tmp_name']);		$uploadedImageWidth = $uploadedImagesize[0];		$uploadedImageHeight = $uploadedImagesize[1];		if (!in_array($imgExtension, $allowed_extensions)) {		    $this->data = $this->request->data;		    $success = 0;		    $this->Session->setFlash(__('Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');		}		$uploadimageArray = $this->request->data['MotorModel']['image'];		unset($this->request->data['MotorModel']['image']);	    } else {		$success = 1;		unset($this->request->data['MotorModel']['image']);	    }	    if ($success == 1 && $this->{$this->modelClass}->save($this->request->data)) {                                //log                $text_action = "updated";                $json_data = json_encode($this->request->data);                $this->global_logs("motor_models", $id, 1, $text_action, $json_data);		if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {		    $file_name = $this->MotorModel->id . '_' . time() . '_' . basename(str_replace(" ", "_", $uploadimageArray['name']));		    if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_folder . DS . $file_name)) {			$this->resize($file_name, 735, 500, $upload_folder, $thumb_folder);			$this->resize($file_name, 245, 166, $upload_folder, $thumb_folder2);			$this->MotorModel->updateAll(array('MotorModel.image' => "'" . $file_name . "'"), array('MotorModel.id' => $this->MotorModel->id));			unlink($upload_folder . DS . $file_name);		    } else {			$is_file_uploaded = 0;		    }		}		if (isset($this->request->data['MotorModelCity']) && !empty($this->request->data['MotorModelCity'])) {		    // delete all records of model id and re insert		    $this->MotorModelCity->deleteAll(array('MotorModelCity.model_id' => $id));		    $this->loadModel('MotorModelCity');		    $counter = 0;		    $save_motor_model_city = array();		    foreach ($this->request->data['MotorModelCity'] as $key => $index) {			$save_motor_model_city[$counter]['MotorModelCity']['motor_id'] = $this->request->data['MotorModel']['motor_id'];			$save_motor_model_city[$counter]['MotorModelCity']['motor_type_id'] = $this->request->data['MotorModel']['motor_type_id'];			$save_motor_model_city[$counter]['MotorModelCity']['model_id'] = $id;			$save_motor_model_city[$counter]['MotorModelCity']['cityid'] = $index['city_id'];			$counter++;		    }		    if (!empty($save_motor_model_city)) {			$this->MotorModelCity->saveAll($save_motor_model_city);		    }		}		$this->Session->setFlash('Vehicle Model has been updated.', 'success');		$this->redirect(array('action' => 'index'));	    } else {		//$this->Session->setFlash('Vehicle Model page has not been updated.', 'success');		//$this->redirect(array('action' => 'index'));	    }	}	$motor = $this->Motor->find("list", array("conditions" => array("status" => 1)));	$this->set("motor", $motor);	$category = $this->MotorModel->MotorType->find("list", array("conditions" => array("status" => 1)));	$this->set("category", $category);	$this->loadModel('User');	$vlarray = array();	$vendors_list = $this->User->find('all', array(	    'conditions' => array(		'User.user_role_id' => 2	    ),	    'fields' => array(		'User.id', 'User.email', 'User.firstname', 'User.lastname', 'User.uniqid'	    )	));	if (!empty($vendors_list)) {	    foreach ($vendors_list as $key => $vl) {		$vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' )';	    }	}	$this->set("vendors_list", $vlarray);        $this->set('title_for_layout', 'Update Vehicle Model');    }    public function change_status_active() {	if ($this->request->is('Ajax')) {	    if ($this->data['id'] != null) {		$data['status'] = 1;		$this->{$this->modelClass}->id = $this->data['id'];		$this->{$this->modelClass}->save($data, false);                //log                $text_action = "activated";                $json_data = json_encode($this->request->data);                $this->global_logs("motor_models", $this->data['id'], 2, $text_action, $json_data);		echo json_encode(array('succ' => 1, 'msg' => 'Modal Status has been changed.'));		die;	    }	}	exit;    }    public function vehicle_change_status_active() {	$this->loadModel('VendorVehicle');	if ($this->request->is('Ajax')) {	    if ($this->data['id'] != null) {		$data['status'] = 1;		$this->VendorVehicle->id = $this->data['id'];		$this->VendorVehicle->save($data, false);		echo json_encode(array('succ' => 1, 'msg' => 'Vehicle Status has been changed.'));		die;	    }	}	exit;    }    public function change_status_inactive() {	if ($this->request->is('Ajax')) {	    if ($this->data['id'] != null) {		$data['status'] = 0;		$this->{$this->modelClass}->id = $this->data['id'];		$this->{$this->modelClass}->save($data, false);                //log                $text_action = "inactivated";                $json_data = json_encode($this->request->data);                $this->global_logs("motor_models", $this->data['id'], 3, $text_action, $json_data);		echo json_encode(array('succ' => 1, 'msg' => 'Modal Status has been changed.'));		die;	    }	}	exit;    }    public function vehicle_change_status_inactive() {	$this->loadModel('VendorVehicle');	if ($this->request->is('Ajax')) {	    if ($this->data['id'] != null) {		$data['status'] = 0;		$this->VendorVehicle->id = $this->data['id'];		$this->VendorVehicle->save($data, false);		echo json_encode(array('succ' => 1, 'msg' => 'Vechicle Status has been changed.'));		die;	    }	}	exit;    }    public function deleterow() {	if ($this->request->is('Ajax')) {	    if ($this->data['id'] != null) {		$data = $this->{$this->modelClass}->findById($this->data['id']);		if (!empty($data)) {		    if ($this->{$this->modelClass}->delete($this->data['id'])) {			echo json_encode(array('succ' => 1, 'msg' => 'Modal has not been deleted'));			die;		    }		}	    }	}	exit;    }    public function vehicle_deleterow() {	$this->loadModel('VendorVehicle');	if ($this->request->is('Ajax')) {	    if ($this->data['id'] != null) {		$data = $this->VendorVehicle->findById($this->data['id']);		if (!empty($data)) {		    if ($this->VendorVehicle->delete($this->data['id'])) {			echo json_encode(array('succ' => 1, 'msg' => 'Vehicle has not been deleted'));			die;		    }		}	    }	}	exit;    }    public function get_motor_ajax() {	$this->layout = false;	$subcategory = array();	$this->loadModel("MotorCategory");	$this->loadModel("MotorType");	if (!empty($this->data)) {	    $data = $this->{$this->modelClass}->findById($this->data['model_id']);	    echo $data['MotorModel']['motor_category_id'] . "," . $data['MotorModel']['motor_type_id'];	}	/* if(!empty($data))	  {	  $motor_cat	=	$this->MotorCategory->findById($data['MotorModel']['motor_category_id']);	  $motor_type	=	$this->MotorType->findById($data['MotorModel']['motor_type_id']);	  } */	die;    }    function vehiclelist($vendorid = '') { //echo "yo";die;		  Configure::write('debug', 2);	$this->set('tab_open', 'vehicles');	// Breadcrumb	$this->loadModel('MotorModel.VendorVehicle');	$this->loadModel('User');	$this->loadModel('Company');	$vendors_list = $this->User->find('all', array(	    'conditions' => array(		'User.user_role_id' => 2	    ),	     'fields' => array(		'User.id', 'User.email', 'User.firstname', 'User.lastname', 'User.uniqid', 'User.company_id'	    ) 	));		//pr($vendors_list);	if (!empty($vendors_list)) {	    foreach ($vendors_list as $key => $vl) {		$vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' )';	    }	}	$this->set('vlarray', $vlarray);	$pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');	$breadcrumb = array('pages' => $pages, 'active' => __('Article MotorModel', true));	$this->set('breadcrumb', $breadcrumb);	$pageHeading = 'Vehicle Model Management';	$this->set('pageHeading', $pageHeading);	$cond = array();	if ($vendorid != '') {	    $cond['VendorVehicle.vendor_id']  = $vendorid;				/* $company_id = $this->Company->find('first', array('conditions' => array('Company.user_id' => $vendorid),            'fields' => array('Company.id')));		pr($company_id);				$cond['Taxi.company_id'] = $company_id['Company']['id']; */		//$cond = array('Taxi.company_id' => $company_id['Company']['id']);			}	$this->set('vendorid', $vendorid);// Pagging	if (!empty($this->data)) {	    if (!empty($this->data['id'])) {		$submit_aciton = $this->data['VendorVehicle']['my_action'];		foreach ($this->data['id'] as $mainid) {		    if ($mainid != '') {			if ($submit_aciton == 'delete') {			    $this->VendorVehicle->delete($mainid);			    $message = "Deleted Successfully";			}			if ($submit_aciton == 'active') {			    $this->VendorVehicle->updateAll(array('VendorVehicle.status' => '1'), array('VendorVehicle.id' => $mainid));			    $message = "Activated Successfully";			}			if ($submit_aciton == 'inactive') {			    $this->VendorVehicle->updateAll(array('VendorVehicle.status' => '0'), array('VendorVehicle.id' => $mainid));			    $message = "Inactivated Successfully";			}		    }		}		$this->Session->setFlash($message, 'success');	    } else {		if (!empty($this->data) && isset($this->data['recordsPerPage'])) {		    $limitValue = $limit = $this->data['recordsPerPage'];		    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);		} else {		    //pr($this->data); 			    if (!empty($this->data['VendorVehicle']['firstname'])) {			$cond['Vendor.firstname'] = $this->data['VendorVehicle']['firstname'];		    }		    if (!empty($this->data['VendorVehicle']['lastname'])) {			$cond['Vendor.lastname'] = $this->data['VendorVehicle']['lastname'];		    }		    if (!empty($this->data['VendorVehicle']['uniqid'])) {			$cond['Vendor.uniqid'] = $this->data['VendorVehicle']['uniqid'];		    }		    if (!empty($this->data['VendorVehicle']['Vehicle Motor'])) {			$cond['MotorModel.name'] = $this->data['VendorVehicle']['Vehicle Motor'];		    }		    if (!empty($this->data['VendorVehicle']['Vehicle No'])) {			//$cond['Taxi.plate_no'] = $this->data['VendorVehicle']['Vehicle No'];			$cond = array('Taxi.plate_no like ' => "%" . $this->data['VendorVehicle']['Vehicle No'] . "%");		    }		    if (!empty($this->data['VendorVehicle']['status'])) {			$cond['Taxi.status'] = $this->data['VendorVehicle']['status'];			$this->set("status", $this->request->data['VendorVehicle']['status']);		    }		    if (!empty($this->data['VendorVehicle']['verified'])) {			$cond['Taxi.verified'] = $this->data['VendorVehicle']['verified'];			$this->set("verified", $this->request->data['VendorVehicle']['verified']);		    }		    if (isset($this->request->data['Taxi']['motor_type_id']) && $this->request->data['Taxi']['motor_type_id'] != "") {			array_push($cond, array('Taxi.motor_type_id' => $this->request->data['Taxi']['motor_type_id']));			$this->set("Typename", $this->request->data['Taxi']['motor_type_id']);		    }		    if (isset($this->request->data['Taxi']['motor_model_id']) && $this->request->data['Taxi']['motor_model_id'] != "") {			array_push($cond, array('Taxi.motor_model_id' => "" . $this->request->data['Taxi']['motor_model_id'] . ""));			$this->set("mdel_name", $this->request->data['Taxi']['motor_model_id']);		    }		    if ((isset($this->request->query['from_date']) && $this->request->query['from_date'] != "") && (isset($this->request->query['to_date']) && $this->request->query['to_date'] != "")) {			array_push($conditions, array('Taxi.created BETWEEN ? AND ?' => array($this->request->query['from_date'], $this->request->query['to_date'])));			$this->set("from_date", $this->request->query['from_date']);			$this->set("to_date", $this->request->query['to_date']);		    }		}	    }	}	/* $this->VendorVehicle->virtualFields = array(	  'motor_modal_name'=>'Select name From motor_models Where id=(Select motor_id From taxis Where id=VendorVehicle.taxi_id )',	  'vendor_compay_name'=>'Select name From companies Where user_id=VendorVehicle.vendor_id'	  ); */	$page = ((isset($this->params['named']['page']) && $this->params['named']['page'] != NULL) ? $this->params['named']['page'] : 0);//set the limitvalue for records	$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');	$this->set('limitValue', $limitValue);	$this->set('limit', $limitValue);// searching	$this->VendorVehicle->virtualFields = array(	    'vendor_compay_name' => 'Select name From companies Where user_id=VendorVehicle.vendor_id limit 1',	    'uniqid' => 'Select uniqid From users Where vendor_id=VendorVehicle.vendor_id limit 1'	);	$this->VendorVehicle->unbindModel(array('belongsTo' => array('Taxi')), false);//	pr($cond); exit;	$this->paginate = array(	    'conditions' => array($cond),	    'fields' => array(		'Taxi.plate_no','Taxi.id', 'Taxi.motor_type_id', 'Taxi.motor_id', 'Taxi.motor_model_id', 'Taxi.created', "MotorType.name", "VendorVehicle.uniqid",		'VendorVehicle.vendor_id', 'VendorVehicle.taxi_id', 'VendorVehicle.status', 'VendorVehicle.id', 'Taxi.id', 'Taxi.verified',  'VendorVehicle.vendor_compay_name','Motor.name','MotorModel.name',	    ),  	    'joins' => array(		array(		    'table' => 'taxis',		    'alias' => 'Taxi',		    'type' => 'INNER',		    'conditions' => array(			'Taxi.id = VendorVehicle.taxi_id'		    )		),		 array(		    'table' => 'motor_types',		    'alias' => 'MotorType',		    'type' => 'INNER',		    'conditions' => array(			'MotorType.id = Taxi.motor_type_id'		    )		), array(		    'table' => 'motor_models',		    'alias' => 'MotorModel',		    'type' => 'LEFT',		    'conditions' => array(			'MotorModel.id = Taxi.motor_model_id'		    )		),		array(		    'table' => 'motors',		    'alias' => 'Motor',		    'type' => 'LEFT',		    'conditions' => array(			'Motor.id = Taxi.motor_id'		    )		) 	    ),	    'limit' => $limit,//            /'recursive' => 2,	    'order' => array('VendorVehicle.created' => 'desc')	);	//pr($this->paginate('VendorVehicle')); exit;	$this->set('result', $this->paginate('VendorVehicle'));		//	$count_new_bookings = $this->VendorVehicle->find('count', array(//	    'conditions' => $cond//	));//	$this->set("count_new_bookings", $count_new_bookings);	$this->set("page", $page);		$this->loadModel('Company');	$vendor_company = $this->Company->findByUserId($vendorid, array('fields' => 'Company.name'));	$this->set('vendor_company', $vendor_company);	$this->loadModel('User');	$uniqid = $this->User->findById($vendorid, array('fields' => 'User.uniqid'));	$this->set('uniqid', $uniqid);	$this->loadModel("MotorType");	$motor_type_id = $this->MotorType->find("list", array('order' => array(		'MotorType.order' => 'ASC'	)));	$this->set("motor_type_id", $motor_type_id);	$this->loadModel("MotorModel");	$motor_model_id = $this->MotorModel->find("list");	$this->set("motor_model_id", $motor_model_id);                if (!empty($vendor_company) && !empty($uniqid)) {            $Vname = $vendor_company['Company']['name'] . "  (" . $uniqid['User']['uniqid'] . ")";        } else {            $Vname = "My";        }        $this->set('title_for_layout', $Vname.' List of Vehicles');	// pr($this->paginate());    }    /*     * **************************************End of the code**************************************************** */}