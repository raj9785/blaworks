<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 *//** * MotorTypes Users Controller * * @package MotorTypes * @subpackage users.controllers */class MotorTypesController extends MotorTypeAppController {    /**     * Controller name     *     * @var string     */    var $name = 'MotorTypes';    /**     * Helpers     *     * @var array     */    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    //public $paginate = array('limit'=>5,'order'=>'MotorType.id','page'=>1);    /**     * Components     *     * @var array     */    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(        array('field' => 'name', 'type' => 'value')    );    // public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);    }    /**     * Admin Index     *     * @return void     */    function index() {//echo "yo";die;        // Breadcrumb        $this->set('tab_open', 'vehicles');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __(' MotorType Management', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Vehicle Type Management';        $this->set('pageHeading', $pageHeading);// Pagging        if (!empty($this->data)) {            if (!empty($this->data['id'])) {                $submit_aciton = $this->data['MotorType']['my_action'];                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {                        if ($submit_aciton == 'delete') {                            $this->MotorType->delete($mainid);                            $message = "Deleted Successfully";                        }                        if ($submit_aciton == 'active') {                            $this->MotorType->updateAll(array('MotorType.status' => '1'), array('MotorType.id' => $mainid));                            $message = "Activated Successfully";                        }                        if ($submit_aciton == 'inactive') {                            $this->MotorType->updateAll(array('MotorType.status' => '0'), array('MotorType.id' => $mainid));                            $message = "Inactivated Successfully";                        }                    }                }                $this->Session->setFlash($message, 'success');            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {                    $limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {                    // pr($this->data);                    $this->Prg->commonProcess();                }            }        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $limitValue = $limit = 50;        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $this->paginate = array(            'conditions' => array($parsedConditions, 'show_type' => 1),            'limit' => $limit,            'order' => array($this->modelClass . '.order' => 'asc')        );        //debug($this->paginate());        $this->set('result', $this->paginate());        $count_new_bookings = $this->MotorType->find('count',array(            'conditions' => array($parsedConditions, 'show_type' => 1),        ));        $this->set("count_new_bookings", $count_new_bookings);        $this->set('page', $page);        $this->set('title_for_layout', 'Vehicle Types');        //pr($this->paginate());die;    }    function add() {        // print_r($this->data);die;        $this->set('tab_open', 'vehicles');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Motor Type', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Motor Type';        $this->set('pageHeading', $pageHeading);        // cities list        $this->loadModel('City');        $cities_list = $this->City->find('all', array(            'conditions' => array(                'City.status' => 1            ),            'fields' => array(                'City.id', 'City.name'            )        ));        $this->set('cities_list', $cities_list);        if (!empty($this->data)) {            $this->{$this->modelClass}->set($this->data);            // if ($this->{$this->modelClass}->validateAdd()) {//		if (!empty($this->data['MotorType']['image']['name'])) {////		    $explode = explode(".", $this->data['MotorType']['image']['name']);////		    $extentation = end($explode);////		    $new_name = "motortype_" . time() . "." . $extentation;////		    if (move_uploaded_file($this->data['MotorType']['image']['tmp_name'], APP_UPLOADS_ROOT_PATH . "vehicle_type_img/" . $new_name)) {//			$this->request->data['MotorType']['image'] = $new_name;//		    }//		}            //$this->request->data['MotorType']['image'] = '';            // Manage AC NON AC Both or Not Selected Options Here            $val = 2;//		if (in_array(0, $this->data['MotorType']['type']) && in_array(1, $this->data['MotorType']['type'])) {////		    $val = 2;//		} else if (in_array(0, $this->data['MotorType']['type'])) {////		    $val = 0;//		} else if (in_array(1, $this->data['MotorType']['type'])) {////		    $val = 1;//		}            $this->request->data['MotorType']['type'] = $val;            $this->request->data['MotorType']['motor_category_id'] = 18;            // get max value of order            $get_max_order = $this->MotorType->find('first', array(                'fields' => array(                    'MAX(MotorType.order) AS max_order'                ),                'recursive' => -1            ));            // pr($get_max_order);            if (!empty($get_max_order)) {                $this->request->data['MotorType']['order'] = intval($get_max_order[0]['max_order']) + 1;            }            $datas = array(                'name' => $this->data['MotorType']['name'],                'image' => '',                'image_medium' => '',                'image_large' => '',                'advance_payment_mandatory' => $this->data['MotorType']['advance_payment_mandatory'],                'status' => $this->data['MotorType']['status'],                'capacity' => $this->data['MotorType']['capacity'],                'type' => $this->data['MotorType']['type'],                'motor_category_id' => $this->data['MotorType']['motor_category_id'],                'order' => $this->request->data['MotorType']['order'],            );//pr($this->data['MotorType']['image']);die;            if ($this->{$this->modelClass}->save($datas)) {                $latest_model_id = $this->{$this->modelClass}->id;                $upload_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'vehicle_type';                $uploadImgArray = $this->data['MotorType']['image'];                if (isset($uploadImgArray) && $uploadImgArray['name'] != "") {                    $file_name = basename($uploadImgArray['name']);                    $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                    $image_name = explode("." . $imgExtension, $file_name);                    $prefix = time() . "~@~";                    $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;//                        $file_name = $latest_model_id . '_' . time() . '_' . basename($uploadImgArray['name']);//                        $file_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_name);                    if (move_uploaded_file($uploadImgArray['tmp_name'], $upload_folder . DS . $file_name)) {                        $this->MotorType->updateAll(array('MotorType.image' => "'" . $file_name . "'"), array('MotorType.id' => $latest_model_id));                    }                }                $upload_folder1 = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'vehicle_type' . DS . 'medium';                $uploadImgArray1 = $this->data['MotorType']['image_medium'];                if (isset($uploadImgArray1) && $uploadImgArray1['name'] != "") {                    $file_name = basename($uploadImgArray1['name']);                    $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                    $image_name = explode("." . $imgExtension, $file_name);                    $prefix = time() . "~@~";                    $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;//                        $file_name = $latest_model_id . '_' . time() . '_' . basename($uploadImgArray1['name']);//                        $file_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_name);                    if (move_uploaded_file($uploadImgArray1['tmp_name'], $upload_folder1 . DS . $file_name)) {                        $this->MotorType->updateAll(array('MotorType.image_midium' => "'" . $file_name . "'"), array('MotorType.id' => $latest_model_id));                    }                }                $upload_folder2 = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'vehicle_type' . DS . 'large';                $uploadImgArray2 = $this->data['MotorType']['image_large'];                if (isset($uploadImgArray2) && $uploadImgArray2['name'] != "") {                    $file_name = basename($uploadImgArray2['name']);                    $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                    $image_name = explode("." . $imgExtension, $file_name);                    $prefix = time() . "~@~";                    $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;//                        $file_name = $latest_model_id . '_' . time() . '_' . basename($uploadImgArray2['name']);//                        $file_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_name);                    if (move_uploaded_file($uploadImgArray2['tmp_name'], $upload_folder2 . DS . $file_name)) {                        $this->MotorType->updateAll(array('MotorType.image_large' => "'" . $file_name . "'"), array('MotorType.id' => $latest_model_id));                    }                }//                    if (isset($this->request->data['MotorTypeCity']) && !empty($this->request->data['MotorTypeCity'])) {//                        $this->loadModel('MotorTypeCity');//                        $counter = 0;//                        $save_motor_model_city = array();//                        foreach ($this->request->data['MotorTypeCity'] as $key => $index) {//                            $save_motor_model_city[$counter]['MotorTypeCity']['motor_type_id'] = $latest_model_id;//                            $save_motor_model_city[$counter]['MotorTypeCity']['cityid'] = $index['city_id'];//                            $counter++;//                        }//                        if (!empty($save_motor_model_city)) {//                            $this->MotorTypeCity->saveAll($save_motor_model_city);//                        }//                    }                $this->Session->setFlash('MotorType has been added.', 'success');                $this->redirect(array('action' => 'index'));            }            //}        }        $this->set('title_for_layout', 'Add New Vehicle Type');        //$this->loadModel("MotorCategory");    }    function edit($id = null) {        $this->set('tab_open', 'vehicles');//id not found        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Article MotorType', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Article MotorType';        $this->set('pageHeading', $pageHeading);        if (!isset($id) || $id == '') {            $this->Session->setFlash('Invalid Access.', 'error');            $this->redirect(array('controller' => 'datas', 'action' => 'index'));        }// set model by id & send id to view        $this->set('id', $id);        $user = $this->{$this->modelClass}->findById($id);        $this->{$this->modelClass}->set($user);        $this->set('record', $user);        // cities list        $this->loadModel('City');        $cities_list = $this->City->find('all', array(            'conditions' => array(                'City.status' => 1            ),            'fields' => array(                'City.id', 'City.name'            )        ));        $this->set('cities_list', $cities_list);//        $this->loadModel('MotorTypeCity');//        //        $motor_model_city = $this->MotorTypeCity->find('list', array(//            'conditions' => array(//                'MotorTypeCity.motor_type_id' => $id//            ),//            'fields' => array(//                'MotorTypeCity.cityid'//            )//        ));//        $this->set('motor_model_city', $motor_model_city);//Read values from database and edit  the record        //first time        if (empty($this->data)) {            $this->data = $this->{$this->modelClass}->read();            $old_image = $this->data['MotorType']['image'];            $this->set("old_image", $old_image);            $old_medium_image = $this->data['MotorType']['image_midium'];            $this->set("old_medium_image", $old_medium_image);            $old_large_image = $this->data['MotorType']['image_large'];            $this->set("old_large_image", $old_large_image);        }        //second time        else {            //set model & save data & setFlash session            $this->{$this->modelClass}->set($this->data);            //if ($this->{$this->modelClass}->validateAdd()) {//		if ($this->data['MotorType']['image']['name'] != '') {////		    $explode = explode(".", $this->data['MotorType']['image']['name']);////		    $extentation = end($explode);////		    $new_name = "motortype_" . time() . "." . $extentation;////		    if (move_uploaded_file($this->data['MotorType']['image']['tmp_name'], APP_UPLOADS_ROOT_PATH . "vehicle_type_img/" . $new_name)) {//			$this->request->data['MotorType']['image'] = $new_name;//		    }//		} else {////		    $all = $this->{$this->modelClass}->read();////		    $this->request->data['MotorType']['image'] = $all['MotorType']['image'];//		}            $upload_folder = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'vehicle_type';            $uploadImgArray = $this->data['MotorType']['image'];            if (isset($uploadImgArray) && $uploadImgArray['name'] != "") {//                    $file_name = $id . '_' . time() . '_' . basename($uploadImgArray['name']);//                    $file_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_name);                $file_name = basename($uploadImgArray['name']);                $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                $image_name = explode("." . $imgExtension, $file_name);                $prefix = time() . "~@~";                $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;                if (!empty($user['MotorType']['image'])) {                    @unlink($upload_folder . DS . $user['MotorType']['image']);                }                if (move_uploaded_file($uploadImgArray['tmp_name'], $upload_folder . DS . $file_name)) {                    $this->request->data['MotorType']['image'] = $file_name;                }            } else {                $this->request->data['MotorType']['image'] = $user['MotorType']['image'];            }            $upload_folder1 = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'vehicle_type' . DS . 'medium';            $uploadImgArray1 = $this->data['MotorType']['image_medium'];            if (isset($uploadImgArray1) && $uploadImgArray1['name'] != "") {                $file_name = basename($uploadImgArray1['name']);                $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                $image_name = explode("." . $imgExtension, $file_name);                $prefix = time() . "~@~";                $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;//                    $file_name = $id . '_' . time() . '_' . basename($uploadImgArray1['name']);//                    $file_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_name);                if (!empty($user['MotorType']['image_midium'])) {                    @unlink($upload_folder1 . DS . $user['MotorType']['image_midium']);                }                if (move_uploaded_file($uploadImgArray1['tmp_name'], $upload_folder1 . DS . $file_name)) {                    $this->request->data['MotorType']['image_midium'] = $file_name;                }            } else {                $this->request->data['MotorType']['image_midium'] = $user['MotorType']['image_midium'];            }            $upload_folder2 = WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'vehicle_type' . DS . 'large';            $uploadImgArray2 = $this->data['MotorType']['image_large'];            if (isset($uploadImgArray2) && $uploadImgArray2['name'] != "") {                $file_name = basename($uploadImgArray2['name']);                $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                $image_name = explode("." . $imgExtension, $file_name);                $prefix = time() . "~@~";                $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;//                    $file_name = $id . '_' . time() . '_' . basename($uploadImgArray2['name']);//                    $file_name = str_replace(array(" ", "-", ":"), array("_", "_", "_"), $file_name);                if (!empty($user['MotorType']['image_large'])) {                    @unlink($upload_folder2 . DS . $user['MotorType']['image_large']);                }                if (move_uploaded_file($uploadImgArray2['tmp_name'], $upload_folder2 . DS . $file_name)) {                    $this->request->data['MotorType']['image_large'] = $file_name;                }            } else {                $this->request->data['MotorType']['image_large'] = $user['MotorType']['image_large'];            }            $val = 2;            $this->request->data['MotorType']['type'] = $val;//pr($this->data);die;            if ($this->{$this->modelClass}->save($this->data)) {//                    if (isset($this->request->data['MotorTypeCity']) && !empty($this->request->data['MotorTypeCity'])) {////                        // delete all records of model id and re insert////                        $this->loadModel('MotorTypeCity');//                        $this->MotorTypeCity->deleteAll(array('MotorTypeCity.motor_type_id' => $id));////                        $counter = 0;//                        $save_motor_model_city = array();//                        foreach ($this->request->data['MotorTypeCity'] as $key => $index) {//                            $save_motor_model_city[$counter]['MotorTypeCity']['motor_type_id'] = $id;//                            $save_motor_model_city[$counter]['MotorTypeCity']['cityid'] = $index['city_id'];//                            $counter++;//                        }//                        if (!empty($save_motor_model_city)) {//                            $this->MotorTypeCity->saveAll($save_motor_model_city);//                        }//                    }                $this->Session->setFlash('Motor Category page has been updated.', 'success');                $this->redirect(array('action' => 'index'));            } else {                $this->Session->setFlash('Portfolio page has not been updated.', 'success');                $this->redirect(array('action' => 'index'));            }            //}        }        $this->loadModel("MotorCategory");        $this->set('title_for_layout', 'Update Vehicle Type');    }    public function change_status_active() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['status'] = 1;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                echo json_encode(array('succ' => 1, 'msg' => 'Category Status has been changed.'));                die;            }        }        exit;    }    public function change_status_inactive() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['status'] = 0;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                echo json_encode(array('succ' => 1, 'msg' => 'Category Status has been changed.'));                die;            }        }        exit;    }    public function deleterow() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data = $this->{$this->modelClass}->findById($this->data['id']);                if (!empty($data)) {                    if ($this->{$this->modelClass}->delete($this->data['id'])) {                        // delete cities data//                        $this->loadModel('MotorTypeCity');//                        $this->MotorTypeCity->deleteAll(array('MotorTypeCity.motor_type_id' => $this->data['id']));                        echo json_encode(array('succ' => 1, 'msg' => 'Category has been deleted'));                        die;                    }                }            }        }        exit;    }    /*     * **************************************End of the code**************************************************** */    public function get_motor_type() {        $this->layout = false;        $subcategory = array();        if (!empty($this->data)) {            $subcategory = $this->{$this->modelClass}->find('list', array('fields' => array('id', 'name'), 'conditions' => array('motor_category_id' => $this->data['cat_id'])));        }        echo json_encode($subcategory);        die;    }    public function get_cities_list_vehicles($motortypeid) {        $this->autoRender = false;        $this->autoLayout = false;        //$header .= "Vehicle operates in following cities:-";        $header = array('City', 'State', 'Country');        if ($this->request->is('get')) {            //$cityid = $this->request->data['cityid'];            $this->loadModel('MotorTypeCity');            $get_cities_vehicle = $this->MotorTypeCity->find('all', array(                'conditions' => array(                    'MotorTypeCity.motor_type_id' => $motortypeid                ),                'recursive' => 5            ));            $output = array();            $counter = 0;            foreach ($get_cities_vehicle as $key => $value) {                $output[$counter]['city_name'] = $value['City']['name'];                $output[$counter]['state_name'] = $value['City']['State']['name'];                $output[$counter]['country_name'] = $value['City']['Country']['name'];                $counter++;            }            $this->export_file($header, $output, 'csv');            die;            $this->set('output', $output);            $this->render('Elements/load_vehicle_cities');        }    }    function delete_vehicle_type_img() {        $this->loadModel("MotorType");        $this->layout = false;        if (!empty($this->data)) {            $vehicle_id = $this->data['vehicle_id'];            $image = "";            if ($this->MotorType->updateAll(array('MotorType.image' => "'" . $image . "'"), array('MotorType.id' => $vehicle_id))) {                @unlink(WEBSITE_APP_WEBROOT_ROOT_PATH . 'uploads' . DS . 'vehicle_type/' . $this->data['vehicle_img']);            }            $this->Session->setFlash('Vehicle type image deleted successfully', 'success');            echo json_encode(array('succ' => 1, 'msg' => 'Vehicle type image deleted successfully'));            die;        } else {            $this->Session->setFlash('Vehicle type image couldn\'t be deleted, please try again later', 'error');            echo json_encode(array('succ' => 0, 'msg' => 'Vehicle type image couldn\'t be deleted, please try again later'));            die;        }        exit;    }    //vehicle type on the basis of advance or not    function get_vehicle_types() {        if ($this->request->is('Ajax')) {            $return_string = '';            $payment_type = !empty($this->data['payment_type']) ? $this->data['payment_type'] : 0;            $type = $this->data['type'];            $destination_list = $this->MotorType->find("all", array('fields' => array(                    'MotorType.id', 'MotorType.name'                ), 'conditions' => array('MotorType.advance_payment_mandatory' => $payment_type)));            $return_string .= '<script>jQuery(document).ready(function () {                $("#check_all_v").on("click", function () {                    $("input[id^=cab_type]").each(function () {                    $("#" + $(this).attr("id")).prop("checked", "checked");                    });                });                $("#uncheck_all_v").on("click", function () {                    $("input[id^=cab_type]").each(function () {                    $("#" + $(this).attr("id")).removeAttr("checked");                });});});</script>';            $return_string .= '<label class="control-label">Vehicle Type <span class="symbol required"></span>';            $return_string .= '<a id="check_all_v" href="javascript:void(0)">Check All</a>';            $return_string .= '&nbsp;&nbsp;<a id="uncheck_all_v" href="javascript:void(0)">Uncheck All</a>';            //$return_string .= '&nbsp;&nbsp;' . $this->Html->link('Uncheck All', 'javascript:void(0)', array('escape' => false, 'id' => 'uncheck_all_v'));                                  $return_string .= '</label>';            foreach ($destination_list as $val) {                if ($type == 'coupon') {                    $return_string .= '<input type="checkbox" name="data[Coupon][cab_type][]" id="cab_type_' . $val['MotorType']['id'] . '" value = "' . $val['MotorType']['id'] . '" class="validate[required]"/> ' . $val['MotorType']['name'] . '  ';                }                if ($type == 'cashback') {                    $return_string .= '<input type="checkbox" name="data[CashbackOffer][cab_type][]" id="cab_type_' . $val['MotorType']['id'] . '" value = "' . $val['MotorType']['id'] . '" class="validate[required]"/> ' . $val['MotorType']['name'] . '  ';                }            }            //$return_string .= $this->Form->input('cab_type', array('type' => 'select', 'multiple' => 'checkbox', 'options' => $destination_list, 'class' => '', 'id' => 'cab_type', 'div' => false, 'label' => false, 'tabindex' => 5, 'required' => true));            $return_string .= '<span id="cab_type-error" class="help-block"></span>';            echo $return_string;            exit;        }    }}