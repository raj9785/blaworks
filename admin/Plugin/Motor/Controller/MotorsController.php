<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 *//** * Motors Users Controller * * @package Motors * @subpackage users.controllers */class MotorsController extends MotorAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Motors';    /**     * Helpers     *     * @var array     */    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    //public $paginate = array('limit'=>5,'order'=>'Motor.id','page'=>1);    /**     * Components     *     * @var array     */    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(        array('field' => 'name', 'type' => 'value')    );    // public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);    }    /**     * Admin Index     *     * @return void     */    function index() {//echo "yo";die;        // Breadcrumb        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Article Motor', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Motor Company';        $this->set('pageHeading', $pageHeading);// Pagging        $this->set('tab_open', 'vehicles');        if (!empty($this->data)) {            if (!empty($this->data['id'])) {                $submit_aciton = $this->data['Motor']['my_action'];                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {                        if ($submit_aciton == 'delete') {                            $this->Motor->delete($mainid);                            $message = "Deleted Successfully";                        }                        if ($submit_aciton == 'active') {                            $this->Motor->updateAll(array('Motor.status' => '1'), array('Motor.id' => $mainid));                            $message = "Activated Successfully";                        }                        if ($submit_aciton == 'inactive') {                            $this->Motor->updateAll(array('Motor.status' => '0'), array('Motor.id' => $mainid));                            $message = "Inactivated Successfully";                        }                    }                }                $this->Session->setFlash($message, 'success');            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {                    $limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {                    // pr($this->data);                    $this->Prg->commonProcess();                }            }        }//set the limitvalue for records        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.created' => 'desc')        );        $this->set('result', $this->paginate());//        $count_new_bookings = $this->{$this->modelClass}->find('count', array(//            'conditions' => $parsedConditions//        ));//        $this->set("count_new_bookings", $count_new_bookings);        $this->set('page', $page);        $this->set('title_for_layout', 'Vehicle Manufacturers');    }    function add() {        $this->set('tab_open', 'vehicles');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Article Motor', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Article Motor';        $this->set('pageHeading', $pageHeading);        if (!empty($this->data)) {            if ($this->{$this->modelClass}->save($this->data, false)) {                //log                $insert_id = $this->{$this->modelClass}->getLastInsertId();                $text_action = "added";                $json_data = json_encode($this->request->data);                $this->global_logs("motors", $insert_id, 0, $text_action, $json_data);                $this->Session->setFlash('Motor has been added.', 'success');                $this->redirect(array('action' => 'index'));            }        }        $this->set('title_for_layout', 'Add New Vehicle Manufacturer');    }    function edit($id = null) {        $this->set('tab_open', 'vehicles');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Article Motor', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Article Motor';        $this->set('pageHeading', $pageHeading);        if (!isset($id) || $id == '') {            $this->Session->setFlash('Invalid Access.', 'error');            $this->redirect(array('controller' => 'datas', 'action' => 'index'));        }        $this->set('id', $id);        $user = $this->{$this->modelClass}->findById($id);        $this->{$this->modelClass}->set($user);        if (empty($this->data)) {            $this->data = $this->{$this->modelClass}->read();        } else {            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->save($this->data)) {                //log                $text_action = "updated";                $json_data = json_encode($this->request->data);                $this->global_logs("motors", $id, 1, $text_action, $json_data);                $this->Session->setFlash('Portfolio page has been updated.', 'success');                $this->redirect(array('action' => 'index'));            } else {                $this->Session->setFlash('Portfolio page has not been updated.', 'success');                $this->redirect(array('action' => 'index'));            }        }        $this->set('title_for_layout', 'Update Vehicle Manufacturer');    }    public function change_status_active() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['status'] = 1;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                //log                $text_action = "activated";                $json_data = json_encode($this->request->data);                $this->global_logs("motors", $this->data['id'], 2, $text_action, $json_data);                echo json_encode(array('succ' => 1, 'msg' => 'Category Status has been changed.'));                die;            }        }        exit;    }    public function change_status_inactive() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['status'] = 0;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                                //log                $text_action = "inactivated";                $json_data = json_encode($this->request->data);                $this->global_logs("motors", $this->data['id'], 3, $text_action, $json_data);                echo json_encode(array('succ' => 1, 'msg' => 'Category Status has been changed.'));                die;            }        }        exit;    }    function deleterow() {        //echo "dddd"; exit;        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data = $this->{$this->modelClass}->findById($this->data['id']);                if (!empty($data)) {                    if ($this->{$this->modelClass}->delete($this->data['id'])) {                        echo json_encode(array('succ' => 1, 'msg' => 'Category has not been deleted'));                        die;                    }                }            }        }        exit;    }    public function get_model() {        $this->layout = false;        $subcategory = array();        if (!empty($this->data)) {            $this->loadModel("MotorModel");            $subcategory = $this->MotorModel->find('list', array('fields' => array('id', 'name'), 'conditions' => array('motor_id' => $this->data['cat_id'])));        }        echo json_encode($subcategory);        die;    }    /*     * **************************************End of the code**************************************************** */}