<?phpclass CountryController extends CountryAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Country';    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(array('field' => 'email', 'type' => 'value'), array('field' => 'firstname', 'type' => 'value'), array('field' => 'username', 'type' => 'value'), array('field' => 'mobile', 'type' => 'value'), array('field' => 'user_role_id', 'type' => 'value'), array('field' => 'status', 'type' => 'value'));    //public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->set('tab_open', 'locations');    }    public function index() {        $this->paginate = array(            'fields' => array(                'Country.id', 'Country.name', 'Country.iso3166_1', 'Country.status', 'Country.created'            ),            'limit' => 25,            'order' => array(                'Country.created' => 'DESC'            )        );        $this->set('country_list', $this->paginate('Country'));        $this->set('title_for_layout', 'Countries List');    }    public function add() {        if ($this->request->is('post')) {            if ($this->Country->save($this->request->data)) {                //log                $insert_id = $this->Country->getLastInsertId();                $text_action = "added";                $json_data = json_encode($this->request->data);                $this->global_logs("countries", $insert_id, 0, $text_action, $json_data);                $this->Session->setFlash(__('Country added successfully'), 'success');                $this->redirect(array('plugin' => false, 'controller' => 'country', 'action' => 'index'));            }        }        $this->set('title_for_layout', 'Add New Country');    }    public function edit() {        $user_id = $this->params->query['id'];        if (!$user_id || $user_id == NULL) {            $this->Session->setFlash('Invalid request to edit country', 'error');            $this->redirect(array('plugin' => false, 'controller' => 'country', 'action' => 'index'));        } else {            // check that user exists or not            $check_user_exists = $this->Country->Find('count', array('conditions' => array('Country.id' => $user_id), 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('Country does not exists', 'error');                $this->redirect(array('plugin' => false, 'controller' => 'country', 'action' => 'index'));            }        }        $users_data = $this->Country->find('first', array('conditions' => array('Country.id' => $user_id), 'fields' => array('Country.id', 'Country.name', 'Country.iso3166_1',)));        if ($this->request->is('post') || $this->request->is('put')) {            $this->request->data['Country']['modified'] = date("Y-m-d h:i:s");            // check country code duplicacy            $duplicacy_code = $this->Country->find('count', array('conditions' => array('Country.id !=' => $this->request->data['Country']['id'], 'Country.iso3166_1' => $this->request->data['Country']['iso3166_1'])));            if ($duplicacy_code == 0) {                if ($this->Country->save($this->request->data)) {                    //log                    $text_action = "updated";                    $json_data = json_encode($this->request->data);                    $this->global_logs("countries", $user_id, 1, $text_action, $json_data);                    $this->Session->setFlash('Country updated successfully', 'success');                    $this->redirect(array('plugin' => false, 'controller' => 'country', 'action' => 'index'));                } else {                    $this->Session->setFlash('Country couldn\'t be updated, try again later', 'error');                    // $this->redirect(array('controller' => 'users', 'action' => 'index'));                }            } else {                $this->Session->setFlash('Country code already used in other country', 'error');            }        } else {            $this->data = $users_data;        }        $this->set('title_for_layout', 'Update Country');    }    public function status() {        $item_id = $this->params['named']['id'];        $item_status = $this->params['named']['status'];        if (!$item_id) {            $this->Session->setFlash('Invalid Request, country id not found', 'error');            $this->redirect(array('plugin' => false, 'controller' => 'country', 'action' => 'index'));        } else {            $check_user_exists = $this->Country->Find('count', array('conditions' => array('Country.id' => $item_id), 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('Country does not exists', 'error');                $this->redirect(array('plugin' => false, 'controller' => 'country', 'action' => 'index'));            }        }        // update status of template as per condition        $update_status = $this->Country->updateAll(array('Country.status' => "'" . $item_status . "'"), array('Country.id' => $item_id));        //log        $text_action = ($item_status == 'A') ? "activated" : "inactivated";        $action_type = ($item_status == 'A') ? "2" : "3";        $json_data = json_encode($this->request->data);        $this->global_logs("countries", $item_id, $action_type, $text_action, $json_data);        $this->Session->setFlash('Country status has been changed successfully', 'success');        $this->redirect(array('plugin' => false, 'controller' => 'country', 'action' => 'index'));        exit;    }    public function delete() {        $item_id = $this->params->query['id'];        if (!$item_id) {            $this->Session->setFlash('Invalid Request, country id not found', 'error');            echo json_encode(array('succ' => 0, 'msg' => 'Invalid Request, country id not found'));            die;        } else {            // fetch order's of user            $orders_list = $this->Country->find('first', array('conditions' => array('Country.id' => $item_id), 'fields' => array('Country.id'), 'recursive' => -1));            // find states of country            $this->loadModel('State');            //$states_list = $this->State->find('count', array('conditions' => array('State.country_id' => $item_id),'recursive' => -1));            //if($states_list == 0) {            if (!empty($orders_list)) {                $this->Country->delete($orders_list['Country']['id']);                $this->loadModel('State');                // get states ids by country                $states_list = $this->State->find('list', array(                    'conditions' => array(                        'State.country_id' => $orders_list['Country']['id']                    ),                    'fields' => array(                        'State.id'                    )                ));                //delete states                $this->State->deleteAll(array('State.country_id' => $orders_list['Country']['id']));                // delete fares                $this->loadModel('Fare');                $this->Fare->deleteAll(array('Fare.state_id' => $states_list));                // delete vendor fares                $this->loadModel('VendorFare');                $this->VendorFare->deleteAll(array('VendorFare.state_id' => $states_list));                //delete cities                $this->loadModel('City');                // get city ids by country                $cities_list = $this->City->find('list', array(                    'conditions' => array(                        'City.country_id' => $orders_list['Country']['id']                    ),                    'fields' => array(                        'City.id'                    )                ));                // get and delete bookings                $this->loadModel('Booking');                // get booking ids by city                $bookings_list = $this->Booking->find('list', array(                    'conditions' => array(                        'Booking.city_id' => $cities_list                    ),                    'fields' => array(                        'Booking.id'                    )                ));                $this->Booking->deleteAll(array('Booking.city_id' => $cities_list));                // get transactions and delete                $this->loadModel('TransactionDetail');                $this->TransactionDetail->deleteAll(array('TransactionDetail.booking_id' => $bookings_list));                //delete airports                $this->loadModel('Airport');                $this->Airport->deleteAll(array('Airport.country_id' => $orders_list['Country']['id']));                $this->Session->setFlash('Country deleted successfully', 'success');                echo json_encode(array('succ' => 1, 'msg' => 'Country deleted successfully'));                die;            } else {                $this->Session->setFlash('Country couldn\'t be deleted, please try again later', 'error');                echo json_encode(array('succ' => 0, 'msg' => 'Country couldn\'t be deleted, please try again later'));                die;            }            /* } else {              $this->Session->setFlash('Please delete states of this country first', 'error');              echo json_encode(array('succ' => 0, 'msg' => 'Please delete states of this country first'));              die;              } */        }        exit;    }}