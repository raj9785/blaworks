<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 *//** * MotorTypes Users Controller * * @package MotorTypes * @subpackage users.controllers */class JobsController extends JobAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Jobs';    /**     * Helpers     *     * @var array     */    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    //public $paginate = array('limit'=>5,'order'=>'MotorType.id','page'=>1);    /**     * Components     *     * @var array     */    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(        array('field' => 'code', 'type' => 'value')    );    // public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('tab_open', 'jobs_training');        $this->set('model', $this->modelClass);        $this->loadModel('Education');        $education_list = $this->Education->find('list', array(            'conditions' => array(                'is_active' => 1,            ),        ));        $this->set('education_list', $education_list);        $this->loadModel('State');        $state_list = $this->State->find('list', array(            'conditions' => array(                'is_active' => 1,            ),        ));        $this->set('state_list', $state_list);        $this->loadModel('JobCategory');        $jobcat_list = $this->JobCategory->find('list', array(            'conditions' => array(                'is_active' => 1,            ),        ));        $this->set('jobcat_list', $jobcat_list);    }    /**     * Admin Index     *     * @return void     */    function index() {        // Breadcrumb        //pr($this->data);        if (!empty($this->data)) {            $this->Prg->commonProcess();        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $limitValue = $limit = 50;        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);                if (!empty($this->request->query)) {            if (isset($this->request->query['code']) && $this->request->query['code'] != "") {                array_push($parsedConditions, array('Job.code' => $this->request->query['code']));                $this->set("code", $this->request->query['code']);            }            if (isset($this->request->query['state_id']) && $this->request->query['state_id'] != "") {                array_push($parsedConditions, array('Job.state_id' => $this->request->query['state_id']));                $this->set("state_id", $this->request->query['state_id']);            }            if (isset($this->request->query['job_category_id']) && $this->request->query['job_category_id'] != "") {                array_push($parsedConditions, array('Job.job_category_id' => $this->request->query['job_category_id']));                $this->set("job_category_id", $this->request->query['job_category_id']);            }        }                                $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.id' => 'desc')        );        //pr($this->paginate());         $this->{$this->modelClass}->set($this->passedArgs);        $this->set('result', $this->paginate());        $this->set('page', $page);        $this->set('title_for_layout', 'Jobs');    }    function add() {        if (!empty($this->data)) {            $this->{$this->modelClass}->set($this->data);            //if ($this->{$this->modelClass}->validateAdd()) {            //pr($this->data);exit;            if ($this->data['LanguageMapJob'][1]['title']) {                $year_exp = $this->data['Job']['year_of_experience'] ? $this->data['Job']['year_of_experience'] : 0;                $year_month = $this->data['Job']['month_of_experience'] ? $this->data['Job']['month_of_experience'] : 0;                $exp = $year_exp . '.' . $year_month;                $datas = array(                    'title' => $this->data['LanguageMapJob'][1]['title'],                    'state_id' => $this->data['Job']['state_id'],                    'district_id' => $this->data['Job']['district_id'],                    'code' => $this->data['Job']['code'],                    'year_of_experience' => $exp,                    'salary_start' => $this->data['Job']['salary_start'],                    'salary_end' => $this->data['Job']['salary_end'],                    'job_category_id' => $this->data['Job']['job_category_id'],                    'is_active' => 1,                    'created_on' => date("Y-m-d H:i:s"),                    'created_by' => $this->Auth->user('id'),                );                if ($this->{$this->modelClass}->save($datas)) {                    //education_id//                    $latest_id = $this->{$this->modelClass}->id;                    if (!empty($this->data['Job']['education_id'])) {                        $this->loadModel('JobEducation');                        $eds = $this->data['Job']['education_id'];                        if (!empty($eds)) {                            foreach ($eds as $ind => $ivalue) {                                $this->JobEducation->create();                                $datas2 = array();                                $datas2['JobEducation']['education_id'] = $ivalue;                                $datas2['JobEducation']['job_id'] = $latest_id;                                $this->JobEducation->save($datas2);                            }                        }                    }                    //ALL//                    $j = 0;                    if ($this->data['Job']['district_id']) {                        if ($this->data['Job']['district_id'] == "ALL") {                            $this->loadModel('District');                            $states_list = $this->District->find('all', array(                                'conditions' => array(                                    'District.state_id' => $this->data['Job']['state_id']                                ),                                'fields' => array(                                    'District.id', 'District.name'                                ),                                'recursive' => '-1'                            ));                            if (!empty($states_list)) {                                foreach ($states_list as $datsss) {                                    $d1['JobDistrict'][$j]['district_id'] = $datsss['District']['id'];                                    $d1['JobDistrict'][$j]['job_id'] = $latest_id;                                    $j++;                                }                            }                        } else {                            $d1['JobDistrict'][$j]['district_id'] = $this->data['Job']['district_id'];                            $d1['JobDistrict'][$j]['job_id'] = $latest_id;                        }                        //pr($d1['JobDistrict']);exit;                        $this->loadModel('JobDistrict');                        $this->JobDistrict->saveAll($d1['JobDistrict']);                    }                    $this->loadModel('LanguageMapJob');                    $languageStates = $this->data['LanguageMapJob'];                    foreach ($languageStates as $lang_id => $ldata) {                        $datas2 = array();                        $this->LanguageMapJob->create();                        $datas2['LanguageMapJob']['title'] = $ldata['title'];                        $datas2['LanguageMapJob']['job_id'] = $latest_id;                        $datas2['LanguageMapJob']['language_id'] = $lang_id;                        $this->LanguageMapJob->save($datas2);                    }                    $this->loadModel('JobDetail');                    $languageStates = $this->data['JobDetail'];                    foreach ($languageStates as $lang_id => $ldata) {                        $datas2 = array();                        $this->JobDetail->create();                        //$datas2['JobDetail']['responsibilities'] = $ldata['responsibilities'];                        $datas2['JobDetail']['company_profile'] = $ldata['company_profile'];                        $datas2['JobDetail']['job_description'] = $ldata['job_description'];                        //$datas2['JobDetail']['job_timings'] = $ldata['job_timings'];                        $datas2['JobDetail']['job_id'] = $latest_id;                        $datas2['JobDetail']['language_id'] = $lang_id;                        $this->JobDetail->save($datas2);                    }                    $this->Session->setFlash('Job has been added.', 'success');                    $this->redirect(array('action' => 'index'));                }            } else {                $this->Session->setFlash('Enter in English.', 'error');                $this->redirect(array('action' => 'add'));            }            //}        }        $this->set('title_for_layout', 'Add New Job');    }    function edit($id = null) {        $this->set('id', $id);        $user = $this->{$this->modelClass}->findById($id);        $lanArr = array();        $lanArrD = array();        $educationArr = array();        if (!empty($user)) {            $exp = $user['Job']['year_of_experience'];            $exps = explode(".", $exp);            $user['Job']['year_of_experience'] = $exps[0];            $user['Job']['month_of_experience'] = $exps[1];            $statl = $user['LanguageMapJob'];            foreach ($statl as $new) {                $lanArr[$new['language_id']] = $new;            }            $statl = $user['JobDetail'];            foreach ($statl as $new) {                $lanArrD[$new['language_id']] = $new;            }            if (!empty($user['JobEducation'])) {                foreach ($user['JobEducation'] as $edArr) {                    $educationArr[] = $edArr['education_id'];                }            }        }        $user['LanguageMapJob'] = $lanArr;        $user['Job']['education_id'] = $educationArr;        $user['JobDetail'] = $lanArrD;        $this->{$this->modelClass}->set($user);        $this->set('record', $user);        //pr($user);        if (empty($this->data)) {            $this->data = $user;        } else {            $this->{$this->modelClass}->set($this->data);            //if ($this->{$this->modelClass}->validateUpdate()) {            if ($this->data['LanguageMapJob'][1]['title']) {                $year_exp = $this->data['Job']['year_of_experience'] ? $this->data['Job']['year_of_experience'] : 0;                $year_month = $this->data['Job']['month_of_experience'] ? $this->data['Job']['month_of_experience'] : 0;                $exp = $year_exp . '.' . $year_month;                $datas = array(                    'title' => $this->data['LanguageMapJob'][1]['title'],                    'state_id' => $this->data['Job']['state_id'],                    'district_id' => $this->data['Job']['district_id'],                    'code' => $this->data['Job']['code'],                    'year_of_experience' => $exp,                    'salary_start' => $this->data['Job']['salary_start'],                    'salary_end' => $this->data['Job']['salary_end'],                    'job_category_id' => $this->data['Job']['job_category_id'],                    'modified_on' => date("Y-m-d H:i:s"),                    'modified_by' => $this->Auth->user('id'),                    'id' => $this->data['Job']['id'],                );                if ($this->{$this->modelClass}->save($datas)) {                    //education_id//                    $this->loadModel('JobEducation');                    $latest_id = $id;                    $this->JobEducation->deleteAll(array("JobEducation.job_id" => $id));                    if (!empty($this->data['Job']['education_id'])) {                        $eds = $this->data['Job']['education_id'];                        if (!empty($eds)) {                            foreach ($eds as $ind => $ivalue) {                                $this->JobEducation->create();                                $datas2 = array();                                $datas2['JobEducation']['education_id'] = $ivalue;                                $datas2['JobEducation']['job_id'] = $latest_id;                                $this->JobEducation->save($datas2);                            }                        }                    }                    //ALL//                    $j = 0;                    $this->loadModel('JobDistrict');                    $this->JobDistrict->deleteAll(array("JobDistrict.job_id" => $id));                    if ($this->data['Job']['district_id']) {                        if ($this->data['Job']['district_id'] == "ALL") {                            $this->loadModel('District');                            $states_list = $this->District->find('all', array(                                'conditions' => array(                                    'District.state_id' => $this->data['Job']['state_id']                                ),                                'fields' => array(                                    'District.id', 'District.name'                                ),                                'recursive' => '-1'                            ));                            if (!empty($states_list)) {                                foreach ($states_list as $datsss) {                                    $d1['JobDistrict'][$j]['district_id'] = $datsss['District']['id'];                                    $d1['JobDistrict'][$j]['job_id'] = $latest_id;                                    $j++;                                }                            }                        } else {                            $d1['JobDistrict'][$j]['district_id'] = $this->data['Job']['district_id'];                            $d1['JobDistrict'][$j]['job_id'] = $latest_id;                        }                        //pr($d1['JobDistrict']);exit;                        $this->JobDistrict->saveAll($d1['JobDistrict']);                    }                    $this->loadModel('LanguageMapJob');                    $this->LanguageMapJob->deleteAll(array("LanguageMapJob.job_id" => $id));                    $languageStates = $this->data['LanguageMapJob'];                    foreach ($languageStates as $lang_id => $ldata) {                        $datas2 = array();                        $this->LanguageMapJob->create();                        $datas2['LanguageMapJob']['title'] = $ldata['title'];                        $datas2['LanguageMapJob']['job_id'] = $latest_id;                        $datas2['LanguageMapJob']['language_id'] = $lang_id;                        $this->LanguageMapJob->save($datas2);                    }                    $this->loadModel('JobDetail');                    $res = $this->JobDetail->deleteAll(array("JobDetail.job_id" => $id));                    $languageStates = $this->data['JobDetail'];                    foreach ($languageStates as $lang_id => $ldata) {                        $datas2 = array();                        $this->JobDetail->create();                        //$datas2['JobDetail']['responsibilities'] = $ldata['responsibilities'];                        $datas2['JobDetail']['company_profile'] = $ldata['company_profile'];                        $datas2['JobDetail']['job_description'] = $ldata['job_description'];                        //$datas2['JobDetail']['job_timings'] = $ldata['job_timings'];                        $datas2['JobDetail']['job_id'] = $latest_id;                        $datas2['JobDetail']['language_id'] = $lang_id;                        $this->JobDetail->save($datas2);                    }                    $this->Session->setFlash('Job has been updated.', 'success');                    $this->redirect(array('action' => 'index'));                }            }            //}        }        $this->set('title_for_layout', 'Update Job');    }    public function change_status() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['is_active'] = $this->data['status'] == 1 ? false : true;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                echo json_encode(array('succ' => 1, 'msg' => 'Status has been changed.'));                die;            }        }        exit;    }    public function get_district_list() {        $this->autoLayout = false;        $this->autoRender = false;        $state_id = $this->request->data('state_id');        $district_id = @$this->request->data('district_id');        if ($this->request->is('ajax')) {            $this->loadModel('District');            $states_list = $this->District->find('all', array(                'conditions' => array(                    'District.state_id' => $state_id                ),                'fields' => array(                    'District.id', 'District.name'                ),                'recursive' => '-1'            ));            $html = "<option value=''>Select</option>";            if ($district_id == "ALL") {                $html .= "<option selected='selected' value='ALL'>All District</option>";            } else {                $html .= "<option value='ALL'>All District</option>";            }            foreach ($states_list as $state) {                $selected = "";                if ($district_id) {                    if ($district_id == $state['District']['id']) {                        $selected = 'selected="selected"';                    }                }                $html .= "<option " . $selected . " value='" . $state['District']['id'] . "'>" . $state['District']['name'] . "</option>";            }            echo $html;        }    }}