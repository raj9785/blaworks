<?phpclass LocalityController extends LocalityAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Locality';    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(array('field' => 'email', 'type' => 'value'), array('field' => 'firstname', 'type' => 'value'), array('field' => 'username', 'type' => 'value'), array('field' => 'mobile', 'type' => 'value'), array('field' => 'user_role_id', 'type' => 'value'), array('field' => 'status', 'type' => 'value'));    //public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->set('tab_open','locations');    }    public function index() {        $this->paginate = array(            'fields' => array(                'Locality.id', 'Locality.name', 'Locality.country_id', 'Locality.status', 'Locality.created',                'Locality.state_id','State.name','Country.name','Locality.city_id','City.name'            ),            'limit' => 25,            'order' => array(                'Locality.created' => 'DESC'            )        );        $this->set('localities_list', $this->paginate('Locality'));    }    public function add() {        // get country list        $country_list = $this->Locality->Country->find('list',array(            'fields' => array(                'Country.id','Country.name'            ),            'recursive' => -1        ));        $this->set('country_list', $country_list);        if ($this->request->is('post')) {            $this->request->data['Locality']['latitude'] = $this->request->data['lat'];            $this->request->data['Locality']['longitude'] = $this->request->data['lng'];            $check_duplicate_city = $this->Locality->find('count',array(               'conditions' => array(                   'Locality.latitude' => $this->request->data['lat'],                   'Locality.longitude' => $this->request->data['lng']               )            ));            if($check_duplicate_city == 0) {                if ($this->Locality->save($this->request->data)) {                    $this->Session->setFlash(__('Locality added successfully'), 'success');                    $this->redirect(array('plugin' => false, 'controller' => 'locality', 'action' => 'index'));                }            }else{                $this->Session->setFlash(__('Locality already exist'), 'error');            }        }    }    public function edit() {        $user_id = $this->params->query['id'];        if (!$user_id || $user_id == NULL) {            $this->Session->setFlash('Invalid request to edit locality', 'error');            $this->redirect(array('plugin' => false, 'controller' => 'locality', 'action' => 'index'));        } else {            // check that user exists or not            $check_user_exists = $this->Locality->Find('count', array('conditions' => array('Locality.id' => $user_id), 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('City does not exists', 'error');                $this->redirect(array('plugin' => false, 'controller' => 'locality', 'action' => 'index'));            }        }        // get country list        $country_list = $this->Locality->Country->find('list',array(            'fields' => array(                'Country.id','Country.name'            ),            'recursive' => -1        ));        $this->set('country_list', $country_list);        // get state list        $state_list = $this->Locality->State->find('list',array(            'fields' => array(                'State.id','State.name'            ),            'recursive' => -1        ));        $this->set('states_list', $state_list);        // get state list        $city_list = $this->Locality->City->find('list',array(            'fields' => array(                'City.id','City.name'            ),            'recursive' => -1        ));        $this->set('city_list', $city_list);        $users_data = $this->Locality->find('first', array('conditions' => array('Locality.id' => $user_id), 'fields' => array('Locality.id', 'Locality.country_id','Locality.city_id','Locality.state_id','Locality.latitude','Locality.longitude','Locality.name')));        if ($this->request->is('post') || $this->request->is('put')) {            $this->request->data['Locality']['modified'] = date("Y-m-d h:i:s");            // check country code duplicacy            $check_duplicate_city = $this->Locality->find('count',array(                'conditions' => array(                    'Locality.id !=' => $this->request->data['Locality']['id'],                    'Locality.latitude' => $this->request->data['lat'],                    'Locality.longitude' => $this->request->data['lng']                )            ));            if($check_duplicate_city == 0) {                $this->request->data['Locality']['latitude'] = $this->request->data['lat'];                $this->request->data['Locality']['longitude'] = $this->request->data['lng'];                if ($this->Locality->save($this->request->data)) {                    $this->Session->setFlash('Locality updated successfully', 'success');                    $this->redirect(array('plugin' => false, 'controller' => 'locality', 'action' => 'index'));                } else {                    $this->Session->setFlash('Locality couldn\'t be updated, try again later', 'error');                    // $this->redirect(array('controller' => 'users', 'action' => 'index'));                }            } else {                $this->Session->setFlash('Locality already added', 'error');            }        } else {            $this->data = $users_data;            $this->set('users_data',$users_data);        }    }    public function status() {        $item_id = $this->params['named']['id'];        $item_status = $this->params['named']['status'];        if (!$item_id) {            $this->Session->setFlash('Invalid Request, locality id not found', 'error');            $this->redirect(array('plugin' => false, 'controller' => 'locality', 'action' => 'index'));        } else {            $check_user_exists = $this->Locality->Find('count', array('conditions' => array('Locality.id' => $item_id), 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('Locality does not exists', 'error');                $this->redirect(array('plugin' => false, 'controller' => 'locality', 'action' => 'index'));            }        }        // update status of template as per condition        $update_status = $this->Locality->updateAll(array('Locality.status' => "'" . $item_status . "'"), array('Locality.id' => $item_id));        $this->Session->setFlash('Locality status has been changed successfully', 'success');        $this->redirect(array('plugin' => false, 'controller' => 'locality', 'action' => 'index'));        exit;    }    public function delete() {        $item_id = $this->params->query['id'];        if (!$item_id) {            $this->Session->setFlash('Invalid Request, locality id not found', 'error');            echo json_encode(array('succ' => 0, 'msg' => 'Invalid Request, locality id not found'));            die;        } else {            // fetch order's of user            $orders_list = $this->Locality->find('first', array('conditions' => array('Locality.id' => $item_id), 'fields' => array('Locality.id'), 'recursive' => -1));            if (!empty($orders_list)) {                $this->Locality->delete($orders_list['Locality']['id']);                $this->Session->setFlash('Locality deleted successfully', 'success');                echo json_encode(array('succ' => 1, 'msg' => 'Locality deleted successfully'));                die;            } else {                $this->Session->setFlash('Locality couldn\'t be deleted, please try again later', 'error');                echo json_encode(array('succ' => 0, 'msg' => 'Locality couldn\'t be deleted, please try again later'));                die;            }        }        exit;    }    public function getStatesByCountry(){        $this->autoLayout = false;        $this->autoRender = false;        $country_id = $this->request->data('country_id');        if($this->request->is('ajax')){            $states_list = $this->City->State->find('all',array(               'conditions' => array(                   'State.country_id' => $country_id               ),                'fields' => array(                    'State.id','State.name'                ),                'recursive' => '-1'            ));            $html = "<option value=''>Select State</option>";            foreach($states_list as $state){                $html.="<option value='".$state['State']['id']."'>".$state['State']['name']."</option>";            }            echo $html;        }    }    public function getCitiesByState(){        $this->autoLayout = false;        $this->autoRender = false;        $state_id = $this->request->data('state_id');        if($this->request->is('ajax')){            $states_list = $this->City->find('all',array(               'conditions' => array(                   'City.state_id' => $state_id               ),                'fields' => array(                    'City.id','City.name'                ),                'recursive' => '-1'            ));            $html = "<option value=''>Select State</option>";            foreach($states_list as $state){                $html.="<option value='".$state['City']['id']."'>".$state['City']['name']."</option>";            }            echo $html;        }    }}