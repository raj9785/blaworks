<?phpclass CityController extends CityAppController {    /**     * Controller name     *     * @var string     */    var $name = 'City';    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler', 'Upload');    public $presetVars = array(array('field' => 'email', 'type' => 'value'), array('field' => 'firstname', 'type' => 'value'), array('field' => 'username', 'type' => 'value'), array('field' => 'mobile', 'type' => 'value'), array('field' => 'user_role_id', 'type' => 'value'), array('field' => 'status', 'type' => 'value'));    //public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->set('tab_open', 'locations');    }    function get_city() {        $this->layout = false;        $subcategory = array();        if (!empty($this->data)) {            $subcategory = $this->{$this->modelClass}->find('list', array('fields' => array('id', 'name'), 'conditions' => array('state_id' => $this->data['cat_id'])));        }        echo json_encode($subcategory);        die;    }        public function index() {        $limit=25;        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->paginate = array(            'fields' => array(                'City.id', 'City.name', 'City.country_id', 'City.status', 'City.created',                'City.state_id', 'State.name', 'Country.name', 'City.city_code', 'City.mmt_ct_code'            ),            'limit' => $limit,            'order' => array(                'City.created' => 'DESC'            )        );        $this->set('city_list', $this->paginate('City'));//        $count_new_bookings = $this->City->find('count');//        $this->set("count_new_bookings", $count_new_bookings);        $this->set('page', $page);        $this->set('limit', $limit);        $this->set('title_for_layout', 'Cities List');    }    public function add() {        // get country list        $country_list = $this->City->Country->find('list', array(            'fields' => array(                'Country.id', 'Country.name'            ),            'recursive' => -1        ));        $this->set('country_list', $country_list);        if ($this->request->is('post')) {            $this->request->data['City']['latitude'] = $this->request->data['lat'];            $this->request->data['City']['longitude'] = $this->request->data['lng'];            $check_duplicate_city = $this->City->find('count', array(                'conditions' => array(                    'City.latitude' => $this->request->data['lat'],                    'City.longitude' => $this->request->data['lng']                )            ));            if ($check_duplicate_city == 0) {                if ($this->City->save($this->request->data)) {                    //log                    $insert_id = $this->City->getLastInsertId();                    $text_action = "added";                    $json_data = json_encode($this->request->data);                    $this->global_logs("cities", $insert_id, 0, $text_action, $json_data);                    $this->Session->setFlash(__('City added successfully'), 'success');                    $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));                }            } else {                $this->Session->setFlash(__('City already exist'), 'error');            }        }        $this->set('title_for_layout', 'Add New City');    }    public function edit() {        $user_id = $this->params->query['id'];        if (!$user_id || $user_id == NULL) {            $this->Session->setFlash('Invalid request to edit city', 'error');            $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));        } else {            // check that user exists or not            $check_user_exists = $this->City->Find('count', array('conditions' => array('City.id' => $user_id), 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('City does not exists', 'error');                $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));            }        }        // get country list        $country_list = $this->City->Country->find('list', array(            'fields' => array(                'Country.id', 'Country.name'            ),            'recursive' => -1        ));        $this->set('country_list', $country_list);        // get state list        $state_list = $this->City->State->find('list', array(            'fields' => array(                'State.id', 'State.name'            ),            'recursive' => -1        ));        $this->set('state_list', $state_list);        $users_data = $this->City->find('first', array('conditions' => array('City.id' => $user_id), 'fields' => array('City.id','City.mmt_ct_code','City.city_code', 'City.name', 'City.country_id', 'City.state_id', 'City.latitude', 'City.longitude')));        $users_data['lat'] = $users_data['City']['latitude'];        $users_data['lng'] = $users_data['City']['longitude'];        $users_data['mmt_ct_code'] = $users_data['City']['mmt_ct_code'];        $this->set('users_data', $users_data);        if ($this->request->is('post') || $this->request->is('put')) {            $this->request->data['City']['modified'] = date("Y-m-d h:i:s");            // check country code duplicacy            $check_duplicate_city = $this->City->find('count', array(                'conditions' => array(                    'City.id !=' => $this->request->data['City']['id'],                    'City.latitude' => $this->request->data['lat'],                    'City.longitude' => $this->request->data['lng']                )            ));            $check_duplicate_city_code = $this->City->find('count', array(                'conditions' => array(                    'City.city_code' => $this->request->data['City']['city_code'],                    'City.id !=' => $user_id                )            ));            // echo $check_duplicate_city_code; die;            if ($check_duplicate_city == 0) {                if ($check_duplicate_city_code != 0) {                    $this->Session->setFlash('City code already exist', 'error');                } else {                    $this->request->data['City']['latitude'] = $this->request->data['lat'];                    $this->request->data['City']['longitude'] = $this->request->data['lng'];                    $this->request->data['City']['mmt_ct_code'] = $this->request->data['City']['mmt_ct_code'];                    //pr($this->request->data);exit;                                        if ($this->City->save($this->request->data)) {                        //log                        $text_action = "updated";                        $json_data = json_encode($this->request->data);                        $this->global_logs("cities", $user_id, 1, $text_action, $json_data);                        $this->Session->setFlash('City updated successfully', 'success');                        $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));                    } else {                        $this->Session->setFlash('City couldn\'t be updated, try again later', 'error');                        // $this->redirect(array('controller' => 'users', 'action' => 'index'));                    }                }            } else {                $this->Session->setFlash('City already added', 'error');            }        } else {            //pr($users_data);            $this->data = $users_data;        }        $this->set('title_for_layout', 'Update City');    }    public function status() {        $item_id = $this->params['named']['id'];        $item_status = $this->params['named']['status'];        if (!$item_id) {            $this->Session->setFlash('Invalid Request, city id not found', 'error');            $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));        } else {            $check_user_exists = $this->City->Find('count', array('conditions' => array('City.id' => $item_id), 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('City does not exists', 'error');                $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));            }        }        // update status of template as per condition        $update_status = $this->City->updateAll(array('City.status' => "'" . $item_status . "'"), array('City.id' => $item_id));        //log        $text_action = ($item_status == 'A') ? "activated" : "inactivated";        $action_type = ($item_status == 'A') ? "2" : "3";        $json_data = json_encode($this->request->data);        $this->global_logs("cities", $item_id, $action_type, $text_action, $json_data);        $this->Session->setFlash('City status has been changed successfully', 'success');        $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));        exit;    }    public function delete() {        $item_id = $this->params->query['id'];        if (!$item_id) {            $this->Session->setFlash('Invalid Request, city id not found', 'error');            echo json_encode(array('succ' => 0, 'msg' => 'Invalid Request, city id not found'));            die;        } else {            // fetch order's of user            $orders_list = $this->City->find('first', array('conditions' => array('City.id' => $item_id), 'fields' => array('City.id'), 'recursive' => -1));            // find localities of city            $localities_list = $this->City->Locality->find('count', array('conditions' => array('Locality.city_id' => $item_id), 'recursive' => -1));            // if ($localities_list == 0) {            if (!empty($orders_list)) {                $this->City->delete($item_id);                // delete fares                $this->loadModel('Fare');                $this->Fare->deleteAll(array('Fare.city_id' => $item_id));                // delete vendor fares                $this->loadModel('VendorFare');                $this->VendorFare->deleteAll(array('VendorFare.city_id' => $item_id));                // get and delete bookings                $this->loadModel('Booking');                // get booking ids by city                $bookings_list = $this->Booking->find('list', array(                    'conditions' => array(                        'Booking.city_id' => $item_id                    ),                    'fields' => array(                        'Booking.id'                    )                ));                $this->Booking->deleteAll(array('Booking.city_id' => $item_id));                // get transactions and delete                $this->loadModel('TransactionDetail');                $this->TransactionDetail->deleteAll(array('TransactionDetail.booking_id' => $bookings_list));                //delete airports                $this->loadModel('Airport');                $this->Airport->deleteAll(array('Airport.city_id' => $item_id));                $this->Session->setFlash('City deleted successfully', 'success');                echo json_encode(array('succ' => 1, 'msg' => 'City deleted successfully'));                die;            } else {                $this->Session->setFlash('City couldn\'t be deleted, please try again later', 'error');                echo json_encode(array('succ' => 0, 'msg' => 'City couldn\'t be deleted, please try again later'));                die;            }            /* } else {              $this->Session->setFlash('Please delete localities of this city first', 'error');              echo json_encode(array('succ' => 0, 'msg' => 'Please delete localities of this city first'));              die;              } */        }        exit;    }    public function getStatesByCountry() {        $this->autoLayout = false;        $this->autoRender = false;        $country_id = $this->request->data('country_id');        if ($this->request->is('ajax')) {            $states_list = $this->City->State->find('all', array(                'conditions' => array(                    'State.country_id' => $country_id                ),                'fields' => array(                    'State.id', 'State.name'                ),                'recursive' => '-1'            ));            $html = "<option value=''>Select State</option>";            foreach ($states_list as $state) {                $html .= "<option value='" . $state['State']['id'] . "'>" . $state['State']['name'] . "</option>";            }            echo $html;        }    }    public function getCitiesByState() {        $this->autoLayout = false;        $this->autoRender = false;        $state_id = $this->request->data('state_id');        if ($this->request->is('ajax')) {            $states_list = $this->City->find('all', array(                'conditions' => array(                    'City.state_id' => $state_id                ),                'fields' => array(                    'City.id', 'City.name'                ),                'recursive' => '-1'            ));            $html = "<option value=''>Select City</option>";            foreach ($states_list as $state) {                $html .= "<option value='" . $state['City']['id'] . "'>" . $state['City']['name'] . "</option>";            }            echo $html;        }    }    public function get_cities_checkbox() {        $this->autoLayout = false;        $this->autoRender = false;        $state_id = $this->request->data('state_id');        if ($this->request->is('ajax')) {            $states_list = $this->City->find('list', array(                'conditions' => array(                    'City.state_id' => $state_id                ),                'fields' => array(                    'City.id', 'City.name'                ),                'recursive' => '-1'            ));            // pr($states_list);            $this->set('cities', $states_list);            $data = $this->render('get_cities_checkbox');            echo $data;            die();        }    }    public function super_destinations() {        $item_id = $this->params['named']['id'];        if (!$item_id) {            $this->Session->setFlash('Invalid Request, city id not found', 'error');            $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));        } else {            $check_user_exists = $this->City->Find('first', array('conditions' => array('City.id' => $item_id), 'recursive' => -1));            if (!isset($check_user_exists['City'])) {                $this->Session->setFlash('City does not exists', 'error');                $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));            }        }        $this->loadModel('SuperDestinationCity');        $this->paginate = array(            'conditions' => array(                'SuperDestinationCity.city_id' => $item_id            ),            'fields' => array(                'SuperDestinationCity.super_destination_id', 'SuperDestinationCity.city_id', 'SuperDestination.description',                'SuperDestination.name', 'SuperDestination.image', 'City.id', 'SuperDestination.created', 'SuperDestinationCity.id',                'SuperDestination.id', 'SuperDestinationCity.is_show_in_front'            ),            'recursive' => 4        );        $this->set('users_list', $this->paginate('SuperDestinationCity'));        $this->set('city_name', $check_user_exists['City']['name']);        $this->set('city_id', $check_user_exists['City']['id']);    }    public function make_super_destination() {        $this->autoRender = false;        $this->autoLayout = false;        if ($this->request->is('ajax')) {            $ids = $this->request->data['ids'];            $city = $this->request->data['city'];            $id_array = explode(",", $ids);            if (!empty($id_array)) {                // delete old super destinations and make new                 $this->loadModel('SuperDestinationCity');                $save_array = array();                $counter = 0;                $this->SuperDestinationCity->updateAll(array('SuperDestinationCity.is_show_in_front' => '"N"'), array('SuperDestinationCity.city_id' => $city));                foreach ($id_array as $key => $index) {                    $this->SuperDestinationCity->updateAll(array('SuperDestinationCity.is_show_in_front' => '"Y"'), array('SuperDestinationCity.id' => $index));                }                $this->Session->setFlash(__('New Super Destinations have been created successfully'), 'success');                echo '1';            }        }    }    function advance_payment_required() {        $this->loadModel('CityAdvancePaymentRequired');        //pr($this->request->data);die;        $this->loadModel('Farecategory');        $this->loadModel('MotorType');        $fare_category_list = $this->Farecategory->find('list', array(            'conditions' => array(                'Farecategory.id' => array(6, 4, 3, 5, 1),            ),            'fields' => array(                'Farecategory.id', 'Farecategory.name',            ),            'order' => array(                'Farecategory.orderby' => 'ASC'            )        ));        $this->set('fare_category_list', $fare_category_list);        $cab_type_list = $this->MotorType->find('list', array(            'conditions' => array(                'MotorType.show_type' => 1,            ),            'fields' => array(                'MotorType.id', 'MotorType.name'            ),            'order' => array(                'MotorType.order' => 'ASC'            )        ));        $this->set('cab_type_list', $cab_type_list);        $city_id = $this->params->query['id'];        $this->set('city_id', $city_id);        $datas = array();        $advance_city = $this->CityAdvancePaymentRequired->Find('first', array('conditions' => array('CityAdvancePaymentRequired.city_id' => $city_id)));        if (count($advance_city) > 0) {            if ($this->request->is('post') || $this->request->is('put')) {                $booking_types = !empty($this->request->data{$this->modelClass}['fare_category_id']) ? implode(',', $this->request->data{$this->modelClass}['fare_category_id']) : '';                $motor_types = !empty($this->request->data{$this->modelClass}['cab_type']) ? implode(',', $this->request->data{$this->modelClass}['cab_type']) : '';                $datas['CityAdvancePaymentRequired']['booking_types'] = $booking_types;                $datas['CityAdvancePaymentRequired']['motor_type_ids'] = $motor_types;                $datas['CityAdvancePaymentRequired']['city_id'] = $city_id;                $datas['CityAdvancePaymentRequired']['created'] = date('Y-m-d H:i:s');                if (!$city_id || $city_id == NULL) {                    $this->Session->setFlash('Invalid request to edit Advance Payment', 'error');                    $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));                } else {                    $this->CityAdvancePaymentRequired->deleteAll(array('CityAdvancePaymentRequired.city_id' => $city_id));                    if ($this->CityAdvancePaymentRequired->save($datas)) {                         $insert_id = $this->CityAdvancePaymentRequired->getLastInsertId();                        //log                        $text_action = "updated";                        $json_data = json_encode($this->request->data);                        $this->global_logs("city_advance_payment_requireds", $insert_id, 1, $text_action, $json_data);                        $this->Session->setFlash(__('Save successfully'), 'success');                        $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));                    }                }            } else {                $city_data['City']['fare_category_id'] = $advance_city['CityAdvancePaymentRequired']['booking_types'] ? explode(",", $advance_city['CityAdvancePaymentRequired']['booking_types']) : "";                $city_data['City']['cab_type'] = $advance_city['CityAdvancePaymentRequired']['motor_type_ids'] ? explode(",", $advance_city['CityAdvancePaymentRequired']['motor_type_ids']) : "";                $this->data = $city_data;                //pr($this->data);            }        } else {            if ($this->request->is('post') || $this->request->is('put')) {                $booking_types = !empty($this->request->data{$this->modelClass}['fare_category_id']) ? implode(',', $this->request->data{$this->modelClass}['fare_category_id']) : '';                $motor_types = !empty($this->request->data{$this->modelClass}['cab_type']) ? implode(',', $this->request->data{$this->modelClass}['cab_type']) : '';                $datas['CityAdvancePaymentRequired']['booking_types'] = $booking_types;                $datas['CityAdvancePaymentRequired']['motor_type_ids'] = $motor_types;                $datas['CityAdvancePaymentRequired']['city_id'] = $city_id;                $datas['CityAdvancePaymentRequired']['created'] = date('Y-m-d H:i:s');                if (!$city_id || $city_id == NULL) {                    $this->Session->setFlash('Invalid request to edit Advance Payment', 'error');                    $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));                } else {                    if ($this->CityAdvancePaymentRequired->save($datas)) {                        //log                        $insert_id = $this->CityAdvancePaymentRequired->getLastInsertId();                        $text_action = "added";                        $json_data = json_encode($this->request->data);                        $this->global_logs("city_advance_payment_requireds", $insert_id, 0, $text_action, $json_data);                        $this->Session->setFlash(__('Save successfully'), 'success');                        $this->redirect(array('plugin' => false, 'controller' => 'city', 'action' => 'index'));                    }                }            }        }    }}