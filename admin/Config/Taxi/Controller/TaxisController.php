<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 */class TaxisController extends TaxiAppController {    var $name = 'Taxis';    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler', "Upload");    public $presetVars = array(        array('field' => 'plate_no', 'type' => 'value'),        array('field' => 'motor_type_id', 'type' => 'value'),        array('field' => 'company_id', 'type' => 'value'),        array('field' => 'company_type', 'type' => 'value'),        array('field' => 'status', 'type' => 'value'),        array('field' => 'motor_id', 'type' => 'value')    );    // public $presetVars = 	true;    public $gps_status_options = array(        '1' => 'Installed',        '4' => 'Not Installed',        '2' => 'Not Interested',        '3' => "Interested in Installation",    );    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->set('gps_status_options', $this->gps_status_options);        $this->loadModel("TaxiImage");        $this->loadModel("Motor");        $this->loadModel("MotorModel");        $motor = $this->Motor->find("list", array("conditions" => array("status" => 1)));        $this->set("motor", $motor);    }    public function getLat() {        $this->layout = false;        $result = $this->Taxi->findById($this->data['cat_id']);        $latlon = array();        $latlon['lat'] = $result["Taxi"]["lat"];        $latlon['lon'] = $result["Taxi"]["log"];        echo json_encode($latlon);        die;    }    /**     * Admin Index     *     * @return void     */    function index() {//echo "yo";die;        // Breadcrumb        $this->set('title_for_layout', 'Vehicles List');        $vlarray = array();        $this->set('tab_open', 'taxis');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Taxi', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Taxi Management';        $this->set('pageHeading', $pageHeading);        $this->update_alert_seen("taxis", "index");// Pagging        if (!empty($this->data)) {            //print_r($this->request->data); die;            if (!empty($this->data['id'])) {                $submit_aciton = $this->data['Taxi']['my_action'];                foreach ($this->data['id'] as $mainid) {                    if ($mainid != '') {                        if ($submit_aciton == 'delete') {                            $this->Taxi->delete($mainid);                            $message = "Deleted Successfully";                        }                        if ($submit_aciton == 'active') {                            $this->Taxi->updateAll(array('Taxi.status' => '1'), array('Taxi.id' => $mainid));                            $message = "Activated Successfully";                        }                        if ($submit_aciton == 'inactive') {                            $this->Taxi->updateAll(array('Taxi.status' => '0'), array('Taxi.id' => $mainid));                            $message = "Inactivated Successfully";                        }                    }                }                $this->Session->setFlash($message, 'success');            } else {                if (!empty($this->data) && isset($this->data['recordsPerPage'])) {                    $limitValue = $limit = $this->data['recordsPerPage'];                    $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);                } else {                    $this->Prg->commonProcess();                }            }        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->set('page', $page);        $limitValue = $limit = 25;        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);		        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;		if(isset($this->request->query) && !empty($this->request->query)){			$this->params->named = $this->request->query;			$this->params->named['company_id'] = $this->request->query['company_id'];			//pr($this->params->named);		}        $parsedConditions = array();        if (!empty($this->passedArgs)) {            $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        }				if (@$this->params->named['state_id']) {            array_push($parsedConditions, array('Taxi.state_id' => $this->params->named['state_id']));        }        if (@$this->params->named['city_id']) {            array_push($parsedConditions, array('Taxi.city_id' => $this->params->named['city_id']));        }        if (@$this->params->named['motor_type_id']) {            array_push($parsedConditions, array('Taxi.motor_type_id' => $this->params->named['motor_type_id']));        }        if (@$this->params->named['motor_id']) {            array_push($parsedConditions, array('Taxi.motor_id' => $this->params->named['motor_id']));        }        if (@$this->params->named['motor_model_id']) {            array_push($parsedConditions, array('Taxi.motor_model_id' => $this->params->named['motor_model_id']));        }        if (@$this->params->named['plate_no']) {            array_push($parsedConditions, array('Taxi.plate_no like ' => "%" . $this->params->named['plate_no'] . "%"));        }        if (@$this->params->named['uniqid']) {            array_push($parsedConditions, array('Taxi.uniqid like ' => "%" . $this->params->named['uniqid'] . "%"));        }        if (@$this->params->named['company_id']) {			//echo $this->params->named['company_id'];			            array_push($parsedConditions, array('Taxi.company_id' => $this->params->named['company_id']));			 //array_push($parsedConditions, array('Taxi.company_id' => @$this->request->query['company_id']));        }        if (@$this->params->named['gps_availability']) {            array_push($parsedConditions, array('Taxi.gps_availability' => $this->params->named['gps_availability']));            $this->set('gps_availability', $this->params->named['gps_availability']);        }        if (@$this->params->named['ownership_type']) {            array_push($parsedConditions, array('Taxi.ownership_type' => $this->params->named['ownership_type']));            $this->set('ownership_type', $this->params->named['ownership_type']);        }        if (isset($this->params->named['status']) && $this->params->named['status'] && $this->params->named['status'] != '' && $this->params->named['status'] != null) {			            array_push($parsedConditions, array('Taxi.status' => @$this->params->named['status']));        } else if (isset($this->params->named['status']) && $this->params->named['status'] == 0 && $this->params->named['status'] != '') {            array_push($parsedConditions, array('Taxi.status' => $this->params->named['status']));        }        if (isset($this->params->named['verified']) && $this->params->named['verified'] && $this->params->named['verified'] != '' && $this->params->named['verified'] != null) {			            array_push($parsedConditions, array('Taxi.verified' => $this->params->named['verified']));			        } elseif (isset($this->params->named['verified']) && $this->params->named['verified'] == 0 && $this->params->named['verified'] != '') {            array_push($parsedConditions, array('Taxi.verified' => $this->params->named['verified']));        }        if (@$this->params->named['from_date'] and @ $this->params->named['to_date']) {            array_push($parsedConditions, array('(from_unixtime(Taxi.created, "%Y-%m-%d") >= ? AND from_unixtime(Taxi.created, "%Y-%m-%d") <= ?)' => array($this->params->named['from_date'], $this->params->named['to_date'])));        } else        if (@$this->params->named['from_date']) {            array_push($parsedConditions, array('from_unixtime(Taxi.created, "%Y-%m-%d") >= ' => @$this->params->named['from_date']));        } else        if (@$this->params->named['to_date']) {            array_push($parsedConditions, array('from_unixtime(Taxi.created, "%Y-%m-%d") <= ' => @$this->params->named['to_date']));        }        $this->set("from_date", @$this->params->named['from_date']);        $this->set("to_date", @$this->params->named['to_date']);       // pr($parsedConditions);         $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => 25,            'order' => array($this->modelClass . '.created' => 'desc')        );        //pr($this->paginate());exit;        $this->set('result', $this->paginate());		$this->set("query_data", $this->params->named);//        $count_new_bookings = $this->Taxi->find('count', array(//            'conditions' => array($parsedConditions),//        ));//        $this->set("count_new_bookings", $count_new_bookings);        $this->loadModel("UserState");        $state = $this->UserState->find("list", array("fields" => array("state_id", "state_name")));        $this->set("state", $state);        $this->loadModel("UserCity");        $city = $this->UserCity->find("list", array("fields" => array("city_id", "city_name")));        $this->set("city", $city);        $this->loadModel("Company");        $name = $this->Company->find("list");        $this->set("name", $name);        $this->loadModel("MotorType");        $moArr = array();        $motor_type = $this->MotorType->find("all", array("conditions" => array("show_type" => 1), 'order' => array('MotorType.order' => 'asc')));        if (!empty($motor_type)) {            foreach ($motor_type as $mData) {                $moArr[$mData['MotorType']['id']] = $mData['MotorType']['name'] . " (" . $mData['MotorType']['capacity'] . " Seater)";            }        }        $this->set("motor_type", $moArr);        $this->set("motor_type_id", $moArr);        $motor_type_id_selected = isset($this->passedArgs["motor_type_id"]) ? $this->passedArgs["motor_type_id"] : 0;        $this->loadModel("MotorModel");        $motor_model_id = $this->MotorModel->find("list");        $this->set("motor_model_id", $motor_model_id);        $this->loadModel("Motor");        $motors = $this->Motor->find("list");        $this->set("motors", $motors);        $motor_id_selected = isset($this->passedArgs["motor_id"]) ? $this->passedArgs["motor_id"] : 0;        $this->set("motor_id_selected", $motor_id_selected);        $motor_model_id_selected = isset($this->passedArgs["motor_model_id"]) ? $this->passedArgs["motor_model_id"] : 0;        $this->set("motor_model_id_selected", $motor_model_id_selected);        $company_id_selected = isset($this->passedArgs["company_id"]) ? $this->passedArgs["company_id"] : 0; 		if(isset($this->request->query["company_id"]) && !empty($this->request->query["company_id"])){			$company_id_selected = isset($this->request->query["company_id"]) ? $this->request->query["company_id"] : 0;			$motor_type_id_selected = isset($this->request->query["motor_type_id"]) ? $this->request->query["motor_type_id"] : 0;        }		$company_type = isset($this->passedArgs["company_type"]) ? $this->passedArgs["company_type"] : 0;        $this->set("company_type", $company_type);        $this->set("company_id_selected", $company_id_selected);        $this->set("motor_type_id_selected", $motor_type_id_selected);        if (isset($this->passedArgs['status']) && !empty($this->passedArgs['status'])) {            $status_selected = $this->passedArgs['status'];            $this->set('status_selected', $status_selected);        }        if (isset($this->passedArgs['verified']) && !empty($this->passedArgs['verified'])) {            $verified = $this->passedArgs['verified'];            $this->set('verified', $verified);        }        if (isset($this->passedArgs['uniqid']) && !empty($this->passedArgs['uniqid'])) {            $uniqid = $this->passedArgs['uniqid'];            $this->set('uniqid', $uniqid);        }		if(isset($this->request->query["uniqid"]) && !empty($this->request->query["uniqid"])){			 $uniqid = $this->request->query['uniqid'];             $this->set('uniqid', $uniqid);		}        $plate_no_selected = isset($this->passedArgs["plate_no"]) ? $this->passedArgs["plate_no"] : '';        $this->set("plate_no_selected", $plate_no_selected);        $state_id_selected = isset($this->passedArgs["state_id"]) ? $this->passedArgs["state_id"] : '';		if(isset($this->request->query["state_id"]) && !empty($this->request->query["state_id"])){			$state_id_selected = isset($this->request->query["state_id"]) ? $this->request->query["state_id"] : '';		}			        $this->set("state_id_selected", $state_id_selected);        $city_id_selected = isset($this->passedArgs["city_id"]) ? $this->passedArgs["city_id"] : '';		if(isset($this->request->query["city_id"]) && !empty($this->request->query["city_id"])){			$city_id_selected = isset($this->request->query["city_id"]) ? $this->request->query["city_id"] : '';		}        $this->set("city_id_selected", $city_id_selected);        $this->loadModel("Company");        //$company = $this->Company->find("list", array("conditions" => array("status" => 1)));        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'order' => array('Company.name' => 'asc'),            'fields' => array(                'Company.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['Company']['id']] = $vl['Company']['name'] . ' (' . $vl['User']['uniqid'] . ')';            }        }        $this->set("company", $companyarray);        $this->loadModel('User');        $vendors_list = $this->User->find('all', array(            'conditions' => array(                'User.user_role_id' => 2            ),            'fields' => array(                'User.id', 'User.email', 'User.firstname', 'User.lastname', 'User.uniqid'            )        ));        if (!empty($vendors_list)) {            foreach ($vendors_list as $key => $vl) {                $vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' )';            }        }        $this->set('vlarray', $vlarray);    }    public function getpdf($value) {        $this->layout = false;        $value = base64_decode(base64_decode($value));        $value = json_decode($value, true);        $conditions = array();        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->set('page', $page);        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $parsedConditions = null;        if (!empty($this->passedArgs)) {            $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        }        $parsedConditions = array();        if (@$this->request->query['state_id']) {            array_push($parsedConditions, array('Taxi.state_id' => $this->request->query['state_id']));        }        if (@$this->request->query['city_id']) {            array_push($parsedConditions, array('Taxi.city_id' => $this->request->query['city_id']));        }        if (@$this->request->query['motor_type_id']) {            array_push($parsedConditions, array('Taxi.motor_type_id' => $this->request->query['motor_type_id']));        }        if (@$this->request->query['motor_id']) {            array_push($parsedConditions, array('Taxi.motor_id' => $this->request->query['motor_id']));        }        if (@$this->request->query['motor_model_id']) {            array_push($parsedConditions, array('Taxi.motor_model_id' => $this->request->query['motor_model_id']));        }        if (@$this->request->query['plate_no']) {            array_push($parsedConditions, array('Taxi.plate_no like ' => "%" . $this->request->query['plate_no'] . "%"));        }        if (@$this->request->query['uniqid']) {            array_push($parsedConditions, array('Taxi.uniqid like ' => "%" . $this->request->query['uniqid'] . "%"));        }        if (@$this->request->query['company_id']) {            array_push($parsedConditions, array('Taxi.company_id' => $this->request->query['company_id']));        }        if (@$this->request->query['status']) {            array_push($parsedConditions, array('Taxi.status' => $this->request->query['status']));        }        if (@$this->request->query['verified']) {            array_push($parsedConditions, array('Taxi.verified' => $this->request->query['verified']));        }        if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {            array_push($parsedConditions, array('(from_unixtime(Taxi.created, "%Y-%m-%d") >= ? AND from_unixtime(Taxi.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));        } else        if (@$this->request->query['from_date']) {            array_push($parsedConditions, array('from_unixtime(Taxi.created, "%Y-%m-%d") >= ' => @$this->request->query['from_date']));        } else        if (@$this->request->query['to_date']) {            array_push($parsedConditions, array('from_unixtime(Taxi.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));        }        $this->set("from_date", @$this->request->query['from_date']);        $this->set("to_date", @$this->request->query['to_date']);        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => 25,            'order' => array($this->modelClass . '.created' => 'desc')        );        $result = $this->paginate();        $count_new_bookings = $this->Taxi->find('count', array(            'conditions' => array($parsedConditions),        ));        $this->set("count_new_bookings", $count_new_bookings);        $this->loadModel("State");        $state = $this->State->find("list");        $this->set("state", $state);        $this->loadModel("City");        $city = $this->City->find("list");        $this->set("city", $city);        $this->loadModel("Company");        $name = $this->Company->find("list");        $this->set("name", $name);        $this->loadModel("MotorType");        $motor_type_id = $this->MotorType->find("list", array('order' => array('MotorType.order' => 'asc')));        $this->set("motor_type_id", $motor_type_id);        $motor_type_id_selected = isset($this->passedArgs["motor_type_id"]) ? $this->passedArgs["motor_type_id"] : 0;        $this->loadModel("MotorModel");        $motor_model_id = $this->MotorModel->find("list");        $this->set("motor_model_id", $motor_model_id);        $this->loadModel("Motor");        $motors = $this->Motor->find("list");        $this->set("motors", $motors);        $motor_id_selected = isset($this->passedArgs["motor_id"]) ? $this->passedArgs["motor_id"] : 0;        $this->set("motor_id_selected", $motor_id_selected);        $motor_model_id_selected = isset($this->passedArgs["motor_model_id"]) ? $this->passedArgs["motor_model_id"] : 0;        $this->set("motor_model_id_selected", $motor_model_id_selected);        $company_id_selected = isset($this->passedArgs["company_id"]) ? $this->passedArgs["company_id"] : 0;        $company_type = isset($this->passedArgs["company_type"]) ? $this->passedArgs["company_type"] : 0;        $this->set("company_type", $company_type);        $this->set("company_id_selected", $company_id_selected);        $this->set("motor_type_id_selected", $motor_type_id_selected);        if (isset($this->passedArgs['status']) && !empty($this->passedArgs['status'])) {            $status_selected = $this->passedArgs['status'];            $this->set('status_selected', $status_selected);        }        if (isset($this->passedArgs['verified']) && !empty($this->passedArgs['verified'])) {            $verified = $this->passedArgs['verified'];            $this->set('verified', $verified);        }        if (isset($this->passedArgs['uniqid']) && !empty($this->passedArgs['uniqid'])) {            $uniqid = $this->passedArgs['uniqid'];            $this->set('uniqid', $uniqid);        }        $plate_no_selected = isset($this->passedArgs["plate_no"]) ? $this->passedArgs["plate_no"] : 0;        $this->set("plate_no_selected", $plate_no_selected);        $state_id_selected = isset($this->passedArgs["state_id"]) ? $this->passedArgs["state_id"] : 0;        $this->set("state_id_selected", $state_id_selected);        $city_id_selected = isset($this->passedArgs["city_id"]) ? $this->passedArgs["city_id"] : 0;        $this->set("city_id_selected", $city_id_selected);        $this->loadModel("Company");        //$company = $this->Company->find("list", array("conditions" => array("status" => 1)));        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'fields' => array(                'Company.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['Company']['id']] = $vl['Company']['name'] . ' ( ' . $vl['User']['uniqid'] . ' ) ';            }        }        $this->set("company", $companyarray);        $this->loadModel('User');        $vendors_list = $this->User->find('all', array(            'conditions' => array(                'User.user_role_id' => 2            ),            'fields' => array(                'User.id', 'User.email', 'User.firstname', 'User.lastname', 'User.uniqid'            )        ));        if (!empty($vendors_list)) {            foreach ($vendors_list as $key => $vl) {                $vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' )';            }        }        $this->set('vlarray', $vlarray);        //pr($result); die;        $header = array('S.No.', 'State', 'City', 'Vehicle Type', 'Vehicle Model', 'Vehicle Number', 'Vendor ID', 'Vendor Name', 'Created On', 'Status', 'Verified');        $result_value = array();        if (!empty($result)) {            $header = array('S.No.', 'State', 'City', 'Vehicle Type', 'Vehicle Model', 'Vehicle Number', 'Vendor ID', 'Vendor Name', 'Created On', 'Status', 'Verified');            if ($page == 0 || $page == 1) {                $i = $count_new_bookings;            } else {                //echo $count_new_bookings;                $i = $count_new_bookings - $limit * ($page - 1);            }            foreach ($result as $key => $records) {                if ($records["Taxi"]['status'] == 1) {                    $status = "Active";                } else {                    $status = "Inactive";                }                if ($records["Taxi"]['verified'] == 1) {                    $verified = "Verified";                } else {                    $verified = "UnVerified";                }                $result_value[$key]['S.No.'] = $i;                $result_value[$key]['State'] = $records["State"]['name'];                $result_value[$key]['City'] = $records["City"]['name'];                $result_value[$key]['Vehicle Type'] = $records["Taxi"]['motor_type'];                $result_value[$key]['Vehicle Model'] = $records["Taxi"]['motor_model'];                $result_value[$key]['Vehicle Number'] = $records["Taxi"]['plate_no'];                $result_value[$key]['Vendor ID'] = $records['Taxi']['uniqid'];                $result_value[$key]['Vendor Name'] = $records['Company']['name'];                $result_value[$key]['Created On'] = date(DATE_FORMAT, $records["Taxi"]['created']);                $result_value[$key]['Status'] = $status;                $result_value[$key]['Verified'] = $verified;                $i--;            }        }        $this->export_file($header, $result_value, 'pdf');        die;    }    public function getcsv($value) {        $this->layout = false;        $value = base64_decode(base64_decode($value));        $value = json_decode($value, true);        $conditions = array();        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->set('page', $page);        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        $parsedConditions = null;        if (!empty($this->passedArgs)) {            $parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        }        $parsedConditions = array();        if (@$this->request->query['state_id']) {            array_push($parsedConditions, array('Taxi.state_id' => $this->request->query['state_id']));        }        if (@$this->request->query['city_id']) {            array_push($parsedConditions, array('Taxi.city_id' => $this->request->query['city_id']));        }        if (@$this->request->query['motor_type_id']) {            array_push($parsedConditions, array('Taxi.motor_type_id' => $this->request->query['motor_type_id']));        }        if (@$this->request->query['motor_id']) {            array_push($parsedConditions, array('Taxi.motor_id' => $this->request->query['motor_id']));        }        if (@$this->request->query['motor_model_id']) {            array_push($parsedConditions, array('Taxi.motor_model_id' => $this->request->query['motor_model_id']));        }        if (@$this->request->query['plate_no']) {            array_push($parsedConditions, array('Taxi.plate_no like ' => "%" . $this->request->query['plate_no'] . "%"));        }        if (@$this->request->query['uniqid']) {            array_push($parsedConditions, array('Taxi.uniqid like ' => "%" . $this->request->query['uniqid'] . "%"));        }        if (@$this->request->query['company_id']) {            array_push($parsedConditions, array('Taxi.company_id' => $this->request->query['company_id']));        }        if (@$this->request->query['status']) {            array_push($parsedConditions, array('Taxi.status' => $this->request->query['status']));        }        if (@$this->request->query['verified']) {            array_push($parsedConditions, array('Taxi.verified' => $this->request->query['verified']));        }        if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {            array_push($parsedConditions, array('(from_unixtime(Taxi.created, "%Y-%m-%d") >= ? AND from_unixtime(Taxi.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));        } else        if (@$this->request->query['from_date']) {            array_push($parsedConditions, array('from_unixtime(Taxi.created, "%Y-%m-%d") >= ' => @$this->request->query['from_date']));        } else        if (@$this->request->query['to_date']) {            array_push($parsedConditions, array('from_unixtime(Taxi.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));        }        $this->set("from_date", @$this->request->query['from_date']);        $this->set("to_date", @$this->request->query['to_date']);        $result = $this->Taxi->find('all', array(            'conditions' => array($parsedConditions),            'order' => array($this->modelClass . '.created' => 'desc')        ));        $count_new_bookings = count($result);        // $result = $this->paginate();//        $count_new_bookings = $this->Taxi->find('count', array(//            'conditions' => array($parsedConditions),//        ));        $this->set("count_new_bookings", $count_new_bookings);        $this->loadModel("State");        $state = $this->State->find("list");        $this->set("state", $state);        $this->loadModel("City");        $city = $this->City->find("list");        $this->set("city", $city);        $this->loadModel("Company");        $name = $this->Company->find("list");        $this->set("name", $name);        $this->loadModel("MotorType");        $motor_type_id = $this->MotorType->find("list", array('order' => array('MotorType.order' => 'asc')));        $this->set("motor_type_id", $motor_type_id);        $motor_type_id_selected = isset($this->passedArgs["motor_type_id"]) ? $this->passedArgs["motor_type_id"] : 0;        $this->loadModel("MotorModel");        $motor_model_id = $this->MotorModel->find("list");        $this->set("motor_model_id", $motor_model_id);        $this->loadModel("Motor");        $motors = $this->Motor->find("list");        $this->set("motors", $motors);        $motor_id_selected = isset($this->passedArgs["motor_id"]) ? $this->passedArgs["motor_id"] : 0;        $this->set("motor_id_selected", $motor_id_selected);        $motor_model_id_selected = isset($this->passedArgs["motor_model_id"]) ? $this->passedArgs["motor_model_id"] : 0;        $this->set("motor_model_id_selected", $motor_model_id_selected);        $company_id_selected = isset($this->passedArgs["company_id"]) ? $this->passedArgs["company_id"] : 0;        $company_type = isset($this->passedArgs["company_type"]) ? $this->passedArgs["company_type"] : 0;        $this->set("company_type", $company_type);        $this->set("company_id_selected", $company_id_selected);        $this->set("motor_type_id_selected", $motor_type_id_selected);        if (isset($this->passedArgs['status']) && !empty($this->passedArgs['status'])) {            $status_selected = $this->passedArgs['status'];            $this->set('status_selected', $status_selected);        }        if (isset($this->passedArgs['verified']) && !empty($this->passedArgs['verified'])) {            $verified = $this->passedArgs['verified'];            $this->set('verified', $verified);        }        if (isset($this->passedArgs['uniqid']) && !empty($this->passedArgs['uniqid'])) {            $uniqid = $this->passedArgs['uniqid'];            $this->set('uniqid', $uniqid);        }        $plate_no_selected = isset($this->passedArgs["plate_no"]) ? $this->passedArgs["plate_no"] : 0;        $this->set("plate_no_selected", $plate_no_selected);        $state_id_selected = isset($this->passedArgs["state_id"]) ? $this->passedArgs["state_id"] : 0;        $this->set("state_id_selected", $state_id_selected);        $city_id_selected = isset($this->passedArgs["city_id"]) ? $this->passedArgs["city_id"] : 0;        $this->set("city_id_selected", $city_id_selected);        $this->loadModel("Company");        //$company = $this->Company->find("list", array("conditions" => array("status" => 1)));        $companyarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'fields' => array(                'Company.id', 'User.uniqid', 'Company.name',            )        ));        if (!empty($company)) {            foreach ($company as $key => $vl) {                $companyarray[$vl['Company']['id']] = $vl['Company']['name'] . ' ( ' . $vl['User']['uniqid'] . ' ) ';            }        }        $this->set("company", $companyarray);        $this->loadModel('User');        $vendors_list = $this->User->find('all', array(            'conditions' => array(                'User.user_role_id' => 2            ),            'fields' => array(                'User.id', 'User.email', 'User.firstname', 'User.lastname', 'User.uniqid'            )        ));        if (!empty($vendors_list)) {            foreach ($vendors_list as $key => $vl) {                $vlarray[$vl['User']['id']] = $vl['User']['firstname'] . ' ' . $vl['User']['lastname'] . ' ( ' . $vl['User']['uniqid'] . ' )';            }        }        $this->set('vlarray', $vlarray);        //pr($result); die;        $header = array('S.No.', 'State', 'City', 'Vehicle Type', 'Vehicle Model', 'Vehicle Number', 'Vendor ID', 'Vendor Name', 'Created On', 'Status', 'Verified');        $result_value = array();        if (!empty($result)) {            $header = array('S.No.', 'State', 'City', 'Vehicle Type', 'Vehicle Model', 'Vehicle Number', 'Vendor ID', 'Vendor Name', 'Created On', 'Status', 'Verified');            if ($page == 0 || $page == 1) {                $i = $count_new_bookings;            } else {                //echo $count_new_bookings;                $i = $count_new_bookings - $limit * ($page - 1);            }            foreach ($result as $key => $records) {                if ($records["Taxi"]['status'] == 1) {                    $status = "Active";                } else {                    $status = "Inactive";                }                if ($records["Taxi"]['verified'] == 1) {                    $verified = "Verified";                } else {                    $verified = "UnVerified";                }                $result_value[$key]['S.No.'] = $i;                $result_value[$key]['State'] = $records["UserState"]['state_name'];                $result_value[$key]['City'] = $records["UserCity"]['city_name'];                $result_value[$key]['Vehicle Type'] = $records["Taxi"]['motor_type'];                $result_value[$key]['Vehicle Model'] = $records["Taxi"]['motor_model'];                $result_value[$key]['Vehicle Number'] = $records["Taxi"]['plate_no'];                $result_value[$key]['Vendor ID'] = $records['Taxi']['uniqid'];                $result_value[$key]['Vendor Name'] = $records['Company']['name'];                $result_value[$key]['Created On'] = date(DATE_FORMAT, $records["Taxi"]['created']);                $result_value[$key]['Status'] = $status;                $result_value[$key]['Verified'] = $verified;                $i--;            }        }        $this->export_file($header, $result_value, 'csv');        die;    }    function insert_taxi_log($taxi_id, $description = '', $status = '', $user_type = '', $user_id = '', $user_name = '', $all_data = '') {        if ($taxi_id) {            $this->loadModel("TaxiLog");            $ArrIns = array();            $ArrIns['TaxiLog']['taxi_id'] = $taxi_id;            $ArrIns['TaxiLog']['description'] = $description;            $ArrIns['TaxiLog']['status'] = $status;            $ArrIns['TaxiLog']['user_type'] = $user_type;            $ArrIns['TaxiLog']['user_id'] = $user_id;            $ArrIns['TaxiLog']['user_name'] = $user_name;            $ArrIns['TaxiLog']['created'] = date("Y-m-d H:i:s");            $ArrIns['TaxiLog']['all_data'] = $all_data ? json_encode($all_data) : "";            $this->TaxiLog->save($ArrIns);        }        return true;    }    function add() {        //pr($this->data);die;        $this->set('tab_open', 'taxis');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Taxi', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Taxi';        $this->set('pageHeading', $pageHeading);        $this->loadModel("UserState");        $state = $this->UserState->find("list", array("fields" => array("state_id", "state_name")));        $this->set("state", $state);        if (!empty($this->data)) {            // pr($this->data); exit;            if ($this->request->data['Taxi']['music_system'] == '') {                $this->request->data['Taxi']['music_system'] = 0;            }            if ($this->request->data['Taxi']['airbag'] == '') {                $this->request->data['Taxi']['airbag'] = 0;            }            if ($this->Auth->user('user_role_id') == 6) {                if ($this->Auth->user('vehicle_verification') != 1) {                    $this->request->data['Taxi']['verified'] = 2;                    $this->request->data['Taxi']['status'] = 2;                } else {                    $this->request->data['Taxi']['verified'] = 1;                    $this->request->data['Taxi']['status'] = 1;                }            } else {                if ($this->request->data['Taxi']['verified'] == 1) {                    $this->request->data['Taxi']['status'] = 1;                }                if ($this->request->data['Taxi']['verified'] == 0) {                    $this->request->data['Taxi']['status'] = 0;                }            }            $plate_no = strtoupper($this->request->data["Taxi"]["plate_no"]);            if ($plate_no) {                $count_taxis = $this->Taxi->find('count', array(                    'conditions' => array(                        'Taxi.plate_no' => $plate_no,                    )                ));                if ($count_taxis > 0) {                    $this->Session->setFlash('Taxi already exists.', 'error');                    $this->redirect(array('action' => 'index'));                }            } else {                $this->Session->setFlash('Some error occurred.', 'error');                $this->redirect(array('action' => 'index'));            }            $this->request->data["Taxi"]["plate_no"] = $plate_no;            $this->request->data["Taxi"]["cab_permit_expire"] = date("Y-m-d", strtotime($this->request->data["Taxi"]["cab_permit_expire"]));            $this->request->data["Taxi"]["fitness_expiry"] = date("Y-m-d", strtotime($this->request->data["Taxi"]["fitness_expiry"]));            $this->request->data["Taxi"]["vehicle_insurance_expiry"] = date("Y-m-d", strtotime($this->request->data["Taxi"]["vehicle_insurance_expiry"]));            $this->request->data["Taxi"]["puc_expiry"] = date("Y-m-d", strtotime($this->request->data["Taxi"]["puc_expiry"]));            $this->request->data["Taxi"]["vehicle_insurance_comp"] = $this->request->data["Taxi"]["vehicle_insurance_comp"];            $this->request->data["Taxi"]["created"] = time();            $this->request->data["Taxi"]["ownership_type"] = $this->request->data["Taxi"]["owner_id"];            if ($this->request->data["Taxi"]["owner_id"] == 2) {                $this->request->data["Taxi"]["user_id"] = $this->request->data["Taxi"]["driver_owner_id"];            }             $this->request->data["Taxi"]["mmt_assured"] = $this->request->data["Taxi"]["mmt_assured"];            if ($this->{$this->modelClass}->save($this->data, false)) {                $id = $this->{$this->modelClass}->id;                //logs//                $description = "Taxi Added";                $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                $all_data = $this->request->data;                if ($this->Auth->user('user_role_id') == 1) {                    $user_type = 0;                } else {                    $user_type = 1;                }                $this->insert_taxi_log($id, $description, 0, $user_type, $this->Auth->user('id'), $user_name, $all_data);                //logs////                if ($this->Auth->user('user_role_id') == 6) {                    if ($this->Auth->user('vehicle_verification') != 1) {                        $this->insert_alerts("taxis", "index", 'vehicles', 'New Vehicle Added', 'vehicle_verification');                    }                }                $images = array();                $images["TaxiImage"]["front"] = '';                $images["TaxiImage"]["rear"] = '';                $images["TaxiImage"]["left_side"] = '';                $images["TaxiImage"]["right_side"] = '';                $images["TaxiImage"]["inside_from_front"] = '';                $images["TaxiImage"]["inside_from_rear"] = '';                if (isset($this->data["TaxiImage"]['front']) && !empty($this->data["TaxiImage"]['front'])) {                    $value = $this->data["TaxiImage"]['front'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["front"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['rear']) && !empty($this->data["TaxiImage"]['rear'])) {                    $value = $this->data["TaxiImage"]['rear'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["rear"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['left_side']) && !empty($this->data["TaxiImage"]['left_side'])) {                    $value = $this->data["TaxiImage"]['left_side'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["left_side"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['right_side']) && !empty($this->data["TaxiImage"]['right_side'])) {                    $value = $this->data["TaxiImage"]['right_side'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["right_side"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['inside_from_front']) && !empty($this->data["TaxiImage"]['inside_from_front'])) {                    $value = $this->data["TaxiImage"]['inside_from_front'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["inside_from_front"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['inside_from_rear']) && !empty($this->data["TaxiImage"]['inside_from_rear'])) {                    $value = $this->data["TaxiImage"]['inside_from_rear'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["inside_from_rear"] = $img;                    }                }                $images["TaxiImage"]["taxi_id"] = $id;                $this->TaxiImage->saveAll($images);                $this->loadModel('TaxiInformation');                $images["TaxiInformation"]["registration_certificate"] = '';                $images["TaxiInformation"]["permit"] = '';                $images["TaxiInformation"]["insurance"] = '';                $images["TaxiInformation"]["fitness"] = '';                $images["TaxiInformation"]["puc"] = '';                $images["TaxiInformation"]["taxi_id"] = $id;                if (isset($this->data["TaxiInformation"]['registration_certificate']) && !empty($this->data["TaxiInformation"]['registration_certificate'])) {                    $value = $this->data["TaxiInformation"]['registration_certificate'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['registration_certificate']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["registration_certificate"] = $filename;                    }                }                if (isset($this->data["TaxiInformation"]['permit']) && !empty($this->data["TaxiInformation"]['permit'])) {                    $value = $this->data["TaxiInformation"]['permit'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['permit']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["permit"] = $filename;                    }                }                if (isset($this->data["TaxiInformation"]['insurance']) && !empty($this->data["TaxiInformation"]['insurance'])) {                    $value = $this->data["TaxiInformation"]['insurance'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['insurance']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["insurance"] = $filename;                    }                }                if (isset($this->data["TaxiInformation"]['fitness']) && !empty($this->data["TaxiInformation"]['fitness'])) {                    $value = $this->data["TaxiInformation"]['fitness'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['fitness']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["fitness"] = $filename;                    }                }                if (isset($this->data["TaxiInformation"]['puc']) && !empty($this->data["TaxiInformation"]['puc'])) {                    $value = $this->data["TaxiInformation"]['puc'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['puc']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["puc"] = $filename;                    }                }                //$this->TaxiInformation->saveAll($images);                $this->loadModel("VendorVehicle");                $this->loadModel("Company");                $findData = $this->Company->find('first', array('conditions' => array('Company.id' => $this->request->data['Taxi']['company_id'])));                if (!empty($findData)) {                    $VendorVehicle['VendorVehicle']['taxi_id'] = $id;                    $VendorVehicle['VendorVehicle']['vendor_id'] = $findData['Company']['user_id'];                    $this->VendorVehicle->save($VendorVehicle, false);                }                $this->TaxiInformation->saveAll($images);                $this->Session->setFlash('Taxi has been added.', 'success');                $this->redirect(array('action' => 'index'));            }        }        $this->loadModel("MotorModel");        $this->loadModel("Taxi_fuel");        $this->loadModel("Taxi_color");        $this->loadModel("Permit");        $permit = $this->Permit->find("list", array("conditions" => array("status" => 1)));        $this->set("permit", $permit);        $this->loadModel("ServiceCategory");        $this->loadModel("MotorType");        $this->loadModel("Company");        $service_category = $this->ServiceCategory->find("list", array("conditions" => array("status" => 1)));        $this->set("service_category", $service_category);        $moArr = array();        $motor_type = $this->MotorType->find("all", array("conditions" => array("show_type" => 1), 'order' => array('MotorType.order' => 'asc')));        if (!empty($motor_type)) {            foreach ($motor_type as $mData) {                $moArr[$mData['MotorType']['id']] = $mData['MotorType']['name'] . " (" . $mData['MotorType']['capacity'] . " Seater)";            }        }        $this->set("motor_type", $moArr);        $vlarray = array();        $company = $this->Company->find('all', array(            'conditions' => array(                "Company.status" => 1            ),            'joins' => array(                array(                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => array(                        'Company.user_id = User.id'                    )                )),            'fields' => array(                'Company.id', 'User.uniqid', 'Company.name',            )        ));        $vlarray = array();        //pr($company);        if (!empty($company)) {            foreach ($company as $key => $vl) {                $vlarray[$vl['Company']['id']] = $vl['Company']['name'] . ' ( ' . $vl['User']['uniqid'] . ' ) ';            }        }        $this->set("company", $vlarray);        //pr($vlarray); exit;        $list_taxi_fuel = $this->Taxi_fuel->find("all", array("conditions" => array("status" => 1)));        foreach ($list_taxi_fuel as $data) {            $car_fuel[$data['Taxi_fuel']['id']] = $data['Taxi_fuel']['name'];        }        $this->set("car_fuel", $car_fuel);        $list_taxi_color = $this->Taxi_color->find("all", array("conditions" => array("status" => 1)));        foreach ($list_taxi_color as $data) {            $car_color[$data['Taxi_color']['id']] = $data['Taxi_color']['name'];        }        $this->set("car_color", $car_color);        $this->set('title_for_layout', 'Add New Vehicle');    }    function upload_images($value) {        $filename = time() . str_replace(" ", "_", $value['name']);        $filename = time() . str_replace("/", "_", $filename);        $this->Upload->upload($value, TAXI_IMAGE_STORE_PATH_IMAGE, $filename);        if (file_exists(TAXI_IMAGE_STORE_PATH_IMAGE . $filename)) {            list($w, $h, $type, $attr) = getimagesize(TAXI_IMAGE_STORE_PATH_IMAGE . $filename);            $scale2 = 200 / $w;            $scale4 = 720 / $w;            if ($w > 720) {                $this->resizeImage(TAXI_IMAGE_LARGE_STORE_PATH_IMAGE . '/' . $filename, TAXI_IMAGE_STORE_PATH_IMAGE . $filename, $w, $h, 0, 0, $scale4);            } else {                copy(TAXI_IMAGE_STORE_PATH_IMAGE . $filename, TAXI_IMAGE_LARGE_STORE_PATH_IMAGE . '/' . $filename);            }            if ($w > 200) {                $this->resizeImage(TAXI_IMAGE_STORE_PATH_IMAGE . '/' . $filename, TAXI_IMAGE_STORE_PATH_IMAGE . $filename, $w, $h, 0, 0, $scale2);            } else {                copy(TAXI_IMAGE_STORE_PATH_IMAGE . $filename, TAXI_IMAGE_STORE_PATH_IMAGE . '/' . $filename);            }            if ($this->Upload->result) {                return $this->Upload->result;            } else {                return 0;            }        } else {            return 0;        }    }    function edit($id = null, $vendorid = '') {        $this->set('tab_open', 'taxis');        $this->set('vendorid_return', $vendorid);        $this->Session->write("validate_plate_edit_value", $id);        $plate_id = $this->Session->read("validate_plate_edit_value");        $this->loadModel("Taxi_fuel");        $this->loadModel("Taxi_color");        $this->loadModel("MotorType");        $this->loadModel("Company");        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Taxi', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Taxi';        $this->set('pageHeading', $pageHeading);		 $query_data = $this->request->query;        $this->set("query_data", $this->request->query);        if (!isset($id) || $id == '') {            $this->Session->setFlash('Invalid Access.', 'error');            $this->redirect(array('controller' => 'datas', 'action' => 'index'));        }        $this->set('id', $id);        $user = $this->{$this->modelClass}->findById($id);        //pr($user);exit;        $this->set('user', $user);        $this->{$this->modelClass}->set($user);        $motor_model = $this->MotorModel->find("list", array("conditions" => array("motor_id" => $user['Taxi']["motor_id"])));        $this->set("motor_model", $motor_model);        $this->loadModel("ServiceType");        $service_type = $this->ServiceType->find("list", array("conditions" => array("status" => 1)));        $this->set("service_type", $service_type);        $company = $this->Company->find("list", array("conditions" => array("status" => 1)));        $this->set("company", $company);        $this->loadModel('State');        $this->loadModel('City');        $this->loadModel("UserState");        $state = $this->UserState->find("list", array("fields" => array("state_id", "state_name")));        $this->set("state", $state);        $this->loadModel("UserCity");        $city = $this->UserCity->find("list", array("fields" => array("city_id", "city_name"), 'conditions' => array('UserCity.state_id' => $user['Taxi']['state_id'])));        //$this->set("state", $state);//        $city = $this->City->find('list', array(//            'joins' => array(//                array(//                    'table' => 'operation_cities',//                    'alias' => 'OperationCity',//                    'type' => 'INNER',//                    'conditions' => array(//                        'OperationCity.city_id = City.id'//                    )//                )//            ),//            'conditions' => array(//                'OperationCity.company_id' => $user['Company']['id']//            ),//            'fields' => array('City.id', 'City.name'),//        ));        $this->set("city", $city);        if (empty($this->data)) { 		//pr($this->request->data);				//echo  $query_data; exit;            $taxi_data = $this->{$this->modelClass}->read();            $taxi_data['Taxi']['cab_permit_expire'] = $taxi_data['Taxi']['cab_permit_expire'] ? date('Y-m-d', strtotime($taxi_data['Taxi']['cab_permit_expire'])) : "";            $taxi_data['Taxi']['vehicle_insurance_expiry'] = $taxi_data['Taxi']['cab_permit_expire'] ? date('Y-m-d', strtotime($taxi_data['Taxi']['vehicle_insurance_expiry'])) : "";            $taxi_data['Taxi']['manufacturing'] = $taxi_data['Taxi']['manufacturing'] ? date('d-m-Y', strtotime($taxi_data['Taxi']['manufacturing'])) : "";            $taxi_data['Taxi']['purchasing'] = $taxi_data['Taxi']['purchasing'] ? date('d-m-Y', strtotime($taxi_data['Taxi']['purchasing'])) : "";            $taxi_data["Taxi"]["fitness_expiry"] = $taxi_data["Taxi"]["fitness_expiry"] ? date("Y-m-d", strtotime($taxi_data["Taxi"]["fitness_expiry"])) : "";            $taxi_data["Taxi"]["puc_expiry"] = $taxi_data["Taxi"]["puc_expiry"] ? date("Y-m-d", strtotime($taxi_data["Taxi"]["puc_expiry"])) : "";            $taxi_data["Taxi"]["owner_id"] = $taxi_data["Taxi"]["ownership_type"];            $taxi_data["Taxi"]["mmt_assured"] = $taxi_data["Taxi"]["mmt_assured"];            if ($taxi_data["Taxi"]["ownership_type"] == 2) {                $taxi_data["Taxi"]["driver_owner_id"] = $taxi_data["Taxi"]["user_id"];                $this->set('driver_id', $taxi_data["Taxi"]["user_id"]);            }            $this->data = $taxi_data;        } else {            $vendorid_return = $this->request->data["vendorid_return"];            $this->{$this->modelClass}->set($this->data);            $this->{$this->modelClass}->id = $id;            $this->request->data["Taxi"]["plate_no"] = strtoupper($this->request->data["Taxi"]["plate_no"]);            $this->request->data["Taxi"]["fitness_expiry"] = date("Y-m-d", strtotime($this->request->data["Taxi"]["fitness_expiry"]));            $this->request->data["Taxi"]["puc_expiry"] = date("Y-m-d", strtotime($this->request->data["Taxi"]["puc_expiry"]));            $this->request->data["Taxi"]["vehicle_insurance_comp"] = $this->request->data["Taxi"]["vehicle_insurance_comp"];            $this->request->data["Taxi"]["ownership_type"] = $this->request->data["Taxi"]["owner_id"];            $this->request->data["Taxi"]["mmt_assured"] = $this->request->data["Taxi"]["mmt_assured"];            if ($this->request->data["Taxi"]["owner_id"] == 2) {                if($this->request->data["Taxi"]["driver_owner_id"]){                $this->request->data["Taxi"]["user_id"] = $this->request->data["Taxi"]["driver_owner_id"];                }            } else {                //$this->request->data["Taxi"]["user_id"] = '';            }            if ($this->Auth->user('user_role_id') == 6) {                if ($this->Auth->user('vehicle_verification') != 1) {                    $this->request->data['Taxi']['verified'] = 2;                    $this->request->data['Taxi']['status'] = $user['Taxi']['status'];                }            }            if ($this->{$this->modelClass}->save($this->data, false)) {                // pr($this->data); exit;                //logs//                $description = "Taxi Updated";                $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                $all_data = $this->request->data;                if ($this->Auth->user('user_role_id') == 1) {                    $user_type = 0;                } else {                    $user_type = 1;                }                $this->insert_taxi_log($id, $description, 1, $user_type, $this->Auth->user('id'), $user_name, $all_data);                //logs////                if ($this->Auth->user('user_role_id') == 6) {                    if ($this->Auth->user('vehicle_verification') != 1) {                        $this->insert_alerts("taxis", "index", 'vehicles', 'Vehicle Updated', 'vehicle_verification');                    }                }                $images = array();                $images["TaxiImage"]["front"] = '';                $images["TaxiImage"]["rear"] = '';                $images["TaxiImage"]["left_side"] = '';                $images["TaxiImage"]["right_side"] = '';                $images["TaxiImage"]["inside_from_front"] = '';                $images["TaxiImage"]["inside_from_rear"] = '';                if (!empty($user['TaxiImage'])) {                    $images["TaxiImage"]["front"] = $user['TaxiImage'][0]['front'];                    $images["TaxiImage"]["rear"] = $user['TaxiImage'][0]['rear'];                    $images["TaxiImage"]["left_side"] = $user['TaxiImage'][0]['left_side'];                    $images["TaxiImage"]["right_side"] = $user['TaxiImage'][0]['right_side'];                    $images["TaxiImage"]["inside_from_front"] = $user['TaxiImage'][0]['inside_from_front'];                    $images["TaxiImage"]["inside_from_rear"] = $user['TaxiImage'][0]['inside_from_rear'];                    $images["TaxiImage"]["id"] = $user['TaxiImage'][0]['id'];                }                if (isset($this->data["TaxiImage"]['front']) && !empty($this->data["TaxiImage"]['front'])) {                    $value = $this->data["TaxiImage"]['front'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["front"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['rear']) && !empty($this->data["TaxiImage"]['rear'])) {                    $value = $this->data["TaxiImage"]['rear'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["rear"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['left_side']) && !empty($this->data["TaxiImage"]['left_side'])) {                    $value = $this->data["TaxiImage"]['left_side'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["left_side"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['right_side']) && !empty($this->data["TaxiImage"]['right_side'])) {                    $value = $this->data["TaxiImage"]['right_side'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["right_side"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['inside_from_front']) && !empty($this->data["TaxiImage"]['inside_from_front'])) {                    $value = $this->data["TaxiImage"]['inside_from_front'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["inside_from_front"] = $img;                    }                }                if (isset($this->data["TaxiImage"]['inside_from_rear']) && !empty($this->data["TaxiImage"]['inside_from_rear'])) {                    $value = $this->data["TaxiImage"]['inside_from_rear'];                    $img = $this->upload_images($value);                    if ($img != 0) {                        $images["TaxiImage"]["inside_from_rear"] = $img;                    }                }                $images["TaxiImage"]["taxi_id"] = $id;                $this->TaxiImage->saveAll($images);                $this->loadModel('TaxiInformation');                $images["TaxiInformation"]["registration_certificate"] = '';                $images["TaxiInformation"]["permit"] = '';                $images["TaxiInformation"]["insurance"] = '';                $images["TaxiInformation"]["fitness"] = '';                $images["TaxiInformation"]["puc"] = '';                if (!empty($user['TaxiInformation'])) {                    $images["TaxiInformation"]["registration_certificate"] = $user['TaxiInformation'][0]['registration_certificate'];                    $images["TaxiInformation"]["permit"] = $user['TaxiInformation'][0]['permit'];                    $images["TaxiInformation"]["insurance"] = $user['TaxiInformation'][0]['insurance'];                    $images["TaxiInformation"]["fitness"] = $user['TaxiInformation'][0]['fitness'];                    $images["TaxiInformation"]["puc"] = $user['TaxiInformation'][0]['puc'];                    $images["TaxiInformation"]["id"] = $user['TaxiInformation'][0]['id'];                    ;                }                $images["TaxiInformation"]["taxi_id"] = $id;                if (isset($this->data["TaxiInformation"]['registration_certificate']) && !empty($this->data["TaxiInformation"]['registration_certificate'])) {                    $value = $this->data["TaxiInformation"]['registration_certificate'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['registration_certificate']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["registration_certificate"] = $filename;                    }                }                if (isset($this->data["TaxiInformation"]['permit']) && !empty($this->data["TaxiInformation"]['permit'])) {                    $value = $this->data["TaxiInformation"]['permit'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['permit']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["permit"] = $filename;                    }                }                if (isset($this->data["TaxiInformation"]['insurance']) && !empty($this->data["TaxiInformation"]['insurance'])) {                    $value = $this->data["TaxiInformation"]['insurance'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['insurance']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["insurance"] = $filename;                    }                }                if (isset($this->data["TaxiInformation"]['fitness']) && !empty($this->data["TaxiInformation"]['fitness'])) {                    $value = $this->data["TaxiInformation"]['fitness'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['fitness']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["fitness"] = $filename;                    }                }                if (isset($this->data["TaxiInformation"]['puc']) && !empty($this->data["TaxiInformation"]['puc'])) {                    $value = $this->data["TaxiInformation"]['puc'];                    if (!empty($value["tmp_name"])) {                        $filename = time() . str_replace(" ", "_", $value['name']);                        $filename = time() . str_replace("/", "_", $filename);                        move_uploaded_file($this->data['TaxiInformation']['puc']['tmp_name'], TAXI_DOC_STORE_PATH . $filename);                        $images["TaxiInformation"]["puc"] = $filename;                    }                }                $this->TaxiInformation->saveAll($images);                $this->loadModel("TaxiServiceType");                if (isset($this->data['Taxi']["service_type_id"][0]) && !empty($this->data['Taxi']["service_type_id"][0])) {                    $this->TaxiServiceType->deleteAll(array("taxi_id" => $id), false);                    $images = array();                    foreach ($this->data['Taxi']["service_type_id"] as $key => $value) {                        $images["TaxiServiceType"]["taxi_id"] = $id;                        $images["TaxiServiceType"]["service_type_id"] = $value;                        $images["TaxiServiceType"]["status"] = 1;                        $this->TaxiServiceType->saveAll($images);                    }                }                $this->loadModel("VendorVehicle");                $this->loadModel("Company");                $findData = $this->Company->find('first', array('conditions' => array('Company.id' => $this->request->data['Taxi']['company_id'])));                if (!empty($findData)) {                    $this->VendorVehicle->unbindModel(array('belongsTo' => array('Vendor', 'MotorModel')));                    $this->VendorVehicle->deleteAll(array("VendorVehicle.taxi_id" => $id));                    $VendorVehicle['VendorVehicle']['taxi_id'] = $id;                    $VendorVehicle['VendorVehicle']['vendor_id'] = $findData['Company']['user_id'];                    $this->VendorVehicle->save($VendorVehicle, false);                }                $this->Session->setFlash('Taxi has been updated.', 'success');						$query_data = $this->request->query;			  //  $this->params->named                if ($vendorid_return) {                    $this->redirect(array('plugin' => 'motor_model', 'controller' => 'motor_models', 'action' => 'vehiclelist', $vendorid_return));                } else {                    $this->redirect(array('action' => 'index',"?"=>$query_data));					// $this->redirect($this->referer());                }            } else {                $this->Session->setFlash('Taxi has not been updated.', 'success');                $this->redirect(array('action' => 'index',$query_data));            }        }        $this->loadModel("TaxiServiceType");        $this->loadModel("MotorType");        $this->loadModel("Permit");        $permit = $this->Permit->find("list", array("conditions" => array("status" => 1)));        $this->set("permit", $permit);        $this->loadModel("ServiceCategory");        $this->loadModel("ServiceType");        $this->loadModel("MotorModel");        $service_category = $this->ServiceCategory->find("list", array("conditions" => array("status" => 1)));        $service_type = $this->ServiceType->find("list", array("conditions" => array("status" => 1, "service_category_id" => $user['Taxi']["service_category_id"])));        $service_type_select = $this->TaxiServiceType->find("list", array("conditions" => array("status" => 1, "taxi_id" => $id), "fields" => array("service_type_id", "service_type_id")));        //$motor_type = $this->MotorType->find("list", array("conditions" => array("status" => 1)));        $moArr = array();        $motor_type = $this->MotorType->find("all", array("conditions" => array("show_type" => 1), 'order' => array('MotorType.order' => 'asc')));        if (!empty($motor_type)) {            foreach ($motor_type as $mData) {                $moArr[$mData['MotorType']['id']] = $mData['MotorType']['name'] . " (" . $mData['MotorType']['capacity'] . " Seater)";            }        }        $this->set("motor_type", $moArr);        $motor_model = $this->MotorModel->find("list", array("conditions" => array("status" => 1, "motor_id" => $user['Taxi']["motor_id"])));        $this->set("motor_model", $motor_model);        $this->set("service_category", $service_category);        $this->set("service_type", $service_type);        $this->set("service_type_select", $service_type_select);        $list_taxi_fuel = $this->Taxi_fuel->find("all", array("conditions" => array("status" => 1)));        foreach ($list_taxi_fuel as $data) {            $car_fuel[$data['Taxi_fuel']['id']] = $data['Taxi_fuel']['name'];        }        $this->set("car_fuel", $car_fuel);        $list_taxi_color = $this->Taxi_color->find("all", array("conditions" => array("status" => 1)));        foreach ($list_taxi_color as $data) {            $car_color[$data['Taxi_color']['id']] = $data['Taxi_color']['name'];        }        $this->set("car_color", $car_color);        $this->set("plate_id", $plate_id);        $this->set('title_for_layout', 'Update Vehicle');        // echo $this->Session->read("validate_plate_edit");die;    }    public function change_status_active() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                // echo time();exit;                $verify_time = 14400; //4 hours//                $recors_taxi = $this->Taxi->find('first', array(                    'conditions' => array("Taxi.id" => $this->data['id']),                        //'fields' => array('created')                ));                $create_time = $recors_taxi['Taxi']['created'];                $time_diff = time() - $create_time;                if ($time_diff > $verify_time) {                    $data['status'] = 1;                    $data['status_by_admin'] = 1;                    $this->{$this->modelClass}->id = $this->data['id'];                    $this->{$this->modelClass}->save($data, false);                    $description = "Taxi status changed to active";                    $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                    $all_data = $data;                    $user_type = $this->Auth->user('user_role_id') == 1 ? 0 : 1;                    $this->insert_taxi_log($this->data['id'], $description, 2, $user_type, $this->Auth->user('id'), $user_name, $all_data);                    $on = date("d-m-y h:i A");                    $msg = $recors_taxi['MotorType']['name'] . " Vehicle No " . $recors_taxi['Taxi']['plate_no'] . " has been activated on " . $on . "";                    $this->loadModel('User');                    $uniqid = $recors_taxi['Taxi']['uniqid'];                    $userData = $this->User->find('first', array('conditions' => array('User.uniqid' => $uniqid)));                    //pr($recors_taxi);exit;                    if ($userData['User']['device_token']) {                        $device_token = $userData['User']['device_token'];                        $API_KEY = VENDOR_API_KEY;                        $this->SendPushNotification($device_token, $API_KEY, $msg);                    }                    echo json_encode(array('succ' => 1, 'msg' => 'Status has been changed.'));                } else {                    $msg = "Vehicle can only be activited after 4 Hours post induction";                    echo json_encode(array('succ' => 0, 'msg' => $msg));                }                die;            }        }        exit;    }    public function change_status_inactive() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['status'] = 0;                $data['status_by_admin'] = 0;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $description = "Taxi status changed to Inactive";                $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                $all_data = $data;                $user_type = $this->Auth->user('user_role_id') == 1 ? 0 : 1;                $this->insert_taxi_log($this->data['id'], $description, 3, $user_type, $this->Auth->user('id'), $user_name, $all_data);                $recors_taxi = $this->Taxi->find('first', array(                    'conditions' => array("Taxi.id" => $this->data['id']),                        //'fields' => array('created')                ));                $on = date("d-m-y h:i A");                $msg = $recors_taxi['MotorType']['name'] . " Vehicle No " . $recors_taxi['Taxi']['plate_no'] . " has been Inactivated on " . $on . "";                $this->loadModel('User');                $uniqid = $recors_taxi['Taxi']['uniqid'];                $userData = $this->User->find('first', array('conditions' => array('User.uniqid' => $uniqid)));                //pr($recors_taxi);exit;                if ($userData['User']['device_token']) {                    $device_token = $userData['User']['device_token'];                    $API_KEY = VENDOR_API_KEY;                    $this->SendPushNotification($device_token, $API_KEY, $msg);                }                echo json_encode(array('succ' => 1, 'msg' => 'Status has been changed.'));                die;            }        }        exit;    }    public function verify_taxi() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                if ($this->data['status'] != 1) {                    $new_value = 0;                    $data['verified'] = 0;                    //$data['status'] = 0;                    $msg = "Unverified";                    $description = "Taxi Unverified";                    $status_action = 5;                } else {                    $new_value = 1;                    //$data['status'] = 1;                    // $data['status_by_admin'] = 1;                    $data['verified'] = 1;                    $msg = "Verified";                    $description = "Taxi Verified";                    $status_action = 4;                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                $all_data = $data;                $user_type = $this->Auth->user('user_role_id') == 1 ? 0 : 1;                $this->insert_taxi_log($this->data['id'], $description, $status_action, $user_type, $this->Auth->user('id'), $user_name, $all_data);                echo json_encode(array('succ' => 1, 'msg' => $msg));                die;            }        }        exit;    }    public function verified_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                //pr($all_data); exit;                $on = date("d-m-y h:i A");                if ($all_data[$this->modelClass]['verified'] == 1) {                    $new_value = 0;                    $data['verified'] = 0;                    //$data['status'] = 0;                    $description = "Taxi Unverified";                    $msg = $all_data['MotorType']['name'] . " Vehicle No " . $all_data['Taxi']['plate_no'] . " has been verified on " . $on . "";                    $status_action = 5;                } else {                    $new_value = 1;                    //$data['status'] = 1;                    $data['verified'] = 1;                    //$data['status_by_admin'] = 1;                    $description = "Taxi Verified";                    $msg = $all_data['MotorType']['name'] . " Vehicle No " . $all_data['Taxi']['plate_no'] . " has been verified on " . $on . "";                    $status_action = 4;                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $this->loadModel('User');                $uniqid = $all_data['Taxi']['uniqid'];                $userData = $this->User->find('first', array('conditions' => array('User.uniqid' => $uniqid)));                //pr($userData);exit;                if ($userData['User']['device_token']) {                    $device_token = $userData['User']['device_token'];                    $API_KEY = VENDOR_API_KEY;                    $this->SendPushNotification($device_token, $API_KEY, $msg);                }                $user_name = $this->Auth->user('firstname') . " " . $this->Auth->user('lastname');                $all_data = $data;                $user_type = $this->Auth->user('user_role_id') == 1 ? 0 : 1;                $this->insert_taxi_log($this->data['id'], $description, $status_action, $user_type, $this->Auth->user('id'), $user_name, $all_data);                echo $new_value;            }        }        exit;    }    public function SendPushNotification($deviceToken = '', $API_KEY = '', $msg) {        $fields = array();        //$API_KEY = 'AIzaSyD6qtUxHZfVIwHkzry0Rjuxs1P4-PFj0So';			        $url = 'https://fcm.googleapis.com/fcm/send';        $fields = array(            'registration_ids' => array($deviceToken),            'data' => array("message" => $msg)        );        $fields = json_encode($fields);        $headers = array('Authorization: key=' . $API_KEY, 'Content-Type: application/json');        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, $url);        curl_setopt($ch, CURLOPT_POST, true);        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);        $result = curl_exec($ch);        //print_r($result); exit;        curl_close($ch);        //return $result;        return true;    }    public function payment_ajax() {        if ($this->request->is('Ajax')) {            $this->loadModel("CabAttachmentReport");            if ($this->data['id'] != null) {                $this->Taxi->virtualFields = array("cab_status" => "select cab_status from cab_attachment_reports where taxi_id=Taxi.id");                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                if ($all_data[$this->modelClass]['cab_status'] == 1) {                    $new_value = 0;                    $data['cab_status'] = 0;                } else {                    if ($all_data[$this->modelClass]['cab_status'] == 0) {                        $new_value = 1;                        $data['cab_status'] = 1;                        /* }else{                          echo "2";die;                          } */                    }                }                $da = $this->CabAttachmentReport->findByTaxiId($this->data['id']);                //pr($da);                $this->CabAttachmentReport->id = $da["CabAttachmentReport"]["id"];                $this->CabAttachmentReport->save($data, false);                echo $new_value;            }            exit;        }    }    public function status_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                if ($all_data[$this->modelClass]['status'] == 1) {                    $new_value = 0;                    $data['status'] = 0;                } else {                    $new_value = 1;                    $data['status'] = 1;                    $msg = $all_data['MotorType']['name'] . " Vehicle No " . $all_data['Taxi']['plate_no'] . " has been verified on " . $on . "";                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                echo $new_value;            }        }        exit;    }    function deleterow() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] == null) {                echo json_encode(array('succ' => 0, 'msg' => 'Record has not been deleted'));                die;            } else {//		$this->{$this->modelClass}->virtualFields = array(//		    'count_assign' => 'select count(company_id) from assigns where assigns.taxi_id=Taxi.id and assigns.to >= now()'//		);////		$data = $this->{$this->modelClass}->findById($this->data['id']);//		if ($data["Taxi"]["count_assign"] >= 1) {//		    echo "dependent";//		    die;//		}                //$this->loadModel("Rating");                //$this->Rating->query("DELETE FROM ratings WHERE rat_id=" . $data["Taxi"]['id'] . " and rating_type=2;");                $this->{$this->modelClass}->delete($this->data['id']);                echo json_encode(array('succ' => 1, 'msg' => 'Record has been deleted'));                die;            }        }        exit;    }    function delete_image() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] == null) {                echo 'error';            } else {                $this->loadModel('TaxiImage');                $this->TaxiImage->id = $this->data['id'];                $this->TaxiImage->saveField("status", 0);                $this->TaxiImage->delete($this->data['id']);                echo json_encode(array('succ' => 1, 'msg' => 'Record has been deleted'));                die;            }        }        exit;    }    function delete_doc() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] == null) {                echo 'error';            } else {                $this->loadModel('TaxiInformation');                $this->TaxiInformation->id = $this->data['id'];                $this->TaxiInformation->saveField("status", 0);                $this->TaxiInformation->delete($this->data['id']);                echo json_encode(array('succ' => 1, 'msg' => 'Record has been deleted'));                die;            }        }        exit;    }    public function get_taxi() {        $this->layout = false;        $subcategory = array();        if (!empty($this->data)) {            $this->{$this->modelClass}->virtualFields = array("city_id" => "select city_id from companies where id=company_id");            $subcategory = $this->{$this->modelClass}->find('list', array('fields' => array('id', 'plate_no'), 'conditions' => array('city_id' => $this->data['city_id'], "company_id" => $this->data['company_id'])));        }        /* pr($subcategory);          pr($this->data); */        echo json_encode($subcategory);        die;    }    function dateRange($first, $last, $step = '+1 day', $format = 'm/d/Y') {        $dates = array();        $current = strtotime($first);        $last = strtotime($last);        while ($current <= $last) {            $dates[] = date($format, $current);            $current = strtotime($step, $current);        }        return $dates;    }    function showevents($tid = null) {        if (isset($tid)) {            $this->loadModel('Assigns');            $date = $this->Assigns->find('all', array(                'conditions' => array('Assigns.taxi_id' => $tid), //array of conditions                'fields' => array('from', 'to', 'BookingAssign.booking_id'), //array of field names                'joins' => array(                    array(                        'table' => 'booking_assigns',                        'alias' => 'BookingAssign',                        'type' => 'INNER',                        'conditions' => array(                            'BookingAssign.assign_id = Assigns.id'                        )                    ),                ),            ));            //pr($date);exit;            $total = $this->Assigns->find('count', array(                'conditions' => array('taxi_id' => $tid), //array of conditions                'fields' => array('from', 'to') //array of field names            ));            if ($total == 0) {                echo '<p class="alert alert-warning" style="line-height: 20px; margin: 30px 0;"><i class="icon icon-info"></i> Sorry there are no booking founds!</p>';                exit();            } else {                $edate = array();                $rr_dates = '';                $ctr = 1;                $arr_events = array();                $json = '';                //pr($date);exit;                foreach ($date as $ndate) {                    $from = date('m/d/Y', strtotime($ndate['Assigns']['from']));                    $booking_id = $ndate['BookingAssign']['booking_id'];                    $to = date('m/d/Y', strtotime($ndate['Assigns']['to']));                    $datess = $this->dateRange($from, $to);                    if (!empty($datess)) {                        foreach ($datess as $its => $dts) {                            $arr_events['Title'] = $booking_id;                            $arr_events['Date'] = $dts;                            $json .= stripslashes(json_encode($arr_events)) . ',';                        }                    }                }                //echo pr($json);                //stripslashes($json)                //pr(json_decode($json));                //pr($rr_dates);                //exit;                ?>                <div id="neventCal"></div>                <script>                    //var myevents = ["01/23/2015","01/25/2015","01/28/2015"];                    var myevents = [<?php echo $json; ?>];                    //                                    var myevents = [                    //                                        {Title: "Five K for charity", Date: new Date("01/20/2015")},                    //                                        {Title: "Dinner", Date: new Date("01/22/2015")},                    //                                        {Title: "Meeting with manager", Date: new Date("01/21/2015")},                    //                                        {Title: "Dinner", Date: new Date("02/02/2015")},                    //                                        {Title: "Meeting with manager", Date: new Date("01/24/2015")}                    //                                    //                                    ];                    //console.log(myevents);                    $("#neventCal").datepicker({                        changeMonth: true,                        changeYear: true,                        //dateFormat: 'm/d/Y',                        /*minDate: new Date(),                                                                  maxDate: "+3",*/                        beforeShowDay: function (date) {                            var result = [true, '', null];                            var matching = $.grep(myevents, function (event) {                                var f = new Date(event.Date);                                //console.log(f);                                if (f.valueOf() == date.valueOf()) {                                    var chkr = f.valueOf() == date.valueOf();                                    return chkr;                                }                            });                            if (matching.length) {                                var dats = matching[0];                                //                                /console.log(dats.Title);                                 result = [true, 'yesitisbook', "Booking ID:" + dats.Title];                            } else {                                return result = [true, 'noitisnotbook', null];                            }                            return result;                        },                        onSelect: function (dateText) {                            var splt = dateText.split("-");                            //alert(splt);                            dateText = splt[1] + "/" + splt[0] + "/" + splt[2];                            //alert(dateText);                            var date,                                    selectedDate = new Date(dateText),                                    i = 0,                                    event = null;                            while (i < myevents.length && !event) {                                date = myevents[i].Date;                                date = new Date(date);                                if (selectedDate.valueOf() === date.valueOf()) {                                    event = myevents[i];                                }                                i++;                            }                            if (event) {                                alert("Booking ID:" + event.Title);                            }                        }                    });                    //dialog.dialog( "open" );                </script>                <?php            }        }        exit;    }    /**     * Taxi Setting     *     * @return void     */    function taxi_setting() {//echo "yo";die;        // Breadcrumb          $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Article Taxi', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Taxi Setting';        $this->set('pageHeading', $pageHeading);// Pagg    }    function detail($id = 0) {        $this->set('tab_open', 'taxis');        $result = $this->{$this->modelClass}->findById($id);        $this->set("result", $result);        $this->loadModel('TaxiImage');        $TaxiImage = $this->TaxiImage->find('all', array('conditions' => array('TaxiImage.taxi_id' => $id)));        //pr($TaxiImage);        $this->set("TaxiImage", $TaxiImage);        $this->loadModel('TaxiDocument');        $TaxiRegistrationCertificate = $this->TaxiDocument->find('all', array('conditions' => array('TaxiDocument.taxi_id' => $id, 'TaxiDocument.type' => 1)));        $this->set("TaxiRegistrationCertificate", $TaxiRegistrationCertificate);        $TaxipermitDoc = $this->TaxiDocument->find('all', array('conditions' => array('TaxiDocument.taxi_id' => $id, 'TaxiDocument.type' => 2)));        $this->set("TaxipermitDoc", $TaxipermitDoc);        $TaxiInsuranceDoc = $this->TaxiDocument->find('all', array('conditions' => array('TaxiDocument.taxi_id' => $id, 'TaxiDocument.type' => 3)));        $this->set("TaxiInsuranceDoc", $TaxiInsuranceDoc);        $TaxiFitnessDoc = $this->TaxiDocument->find('all', array('conditions' => array('TaxiDocument.taxi_id' => $id, 'TaxiDocument.type' => 4)));        $this->set("TaxiFitnessDoc", $TaxiFitnessDoc);        $TaxiPucDoc = $this->TaxiDocument->find('all', array('conditions' => array('TaxiDocument.taxi_id' => $id, 'TaxiDocument.type' => 5)));        $this->set("TaxiPucDoc", $TaxiPucDoc);        $this->loadModel('Taxi');        if (!empty($this->request->data)) {            $id = $this->request->data['Taxi']['id'];            if (!empty($this->request->data['Taxi']['future_deactive'])) {                $this->Taxi->query("UPDATE taxis SET future_deactive='" . $this->request->data['Taxi']['future_deactive'] . "' WHERE  id=" . $id);            }            if (!empty($this->request->data['Taxi']['future_active'])) {                $this->Taxi->query("UPDATE taxis SET future_active='" . $this->request->data['Taxi']['future_active'] . "' WHERE  id=" . $id);            }            $this->redirect(WEBSITE_URL . "admin/taxi/taxis/detail/" . $id);        }        $this->set('title_for_layout', 'Vehicle Details');    }    public function future_active_incative() {        $active = $this->Taxi->find("list", array("fields" => array("id", "id"), "conditions" => array("future_active" => date("d-m-Y"))));        $this->Taxi->updateAll(array('status' => 1), array('Taxi.id' => $active));        $inactive = $this->Taxi->find("list", array("fields" => array("id", "id"), "conditions" => array("future_inactive" => date("d-m-Y"))));        $this->Taxi->updateAll(array('status' => 0), array('Taxi.id' => $active));        die;    }    public function validate_plate() {        $data[0] = $this->params->query["fieldId"];        $da = str_replace(" ", "", $this->params->query['fieldValue']);        $t = $this->Taxi->query("select plate_no from taxis where replace(plate_no,' ','')='$da';");        if (empty($t)) {            $data[1] = true;        } else {            $data[1] = false;        }        $result = json_encode($data);        echo $result;        die;    }    public function validate_plate_edit($id) {        echo $id;        die;        $data[0] = $this->params->query["fieldId"];        $da = str_replace(" ", "", $this->params->query['fieldValue']);        $ds = $this->Session->read('validate_plate_edit_value');        echo $ds;        die;        $t = $this->Taxi->query("select plate_no from taxis where replace(plate_no,' ','')='$da' and id != $plate_id;");        if (empty($t)) {            $data[1] = true;        } else {            $data[1] = false;        }        $result = json_encode($data);//pr($result);die;        echo $result;        die;    }    public function get_cab_attachment_div() {        if ($this->request->is('ajax')) {            $this->loadModel("CabAttachment");            $re = $this->CabAttachment->find("first", array("conditions" => array("state_id" => $this->data["state_id"], "motor_type_id" => $this->data["taxi_id"])));            if (!empty($re)) {                echo "<div><span style='color:#f00;margin-right:5px'> Cab Attachment fee :</span>"                . $re['CabAttachment']['name'] .                "</br><span style='color:#f00;margin-right:5px'>Initial Balance &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   :</span> "                . $re['CabAttachment']['initial_available'] .                "</br><span style='color:#f00;margin-right:5px'>Description    &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; :</span>"                . $re['CabAttachment']['description'] .                "<input type='hidden' name='data[Taxi][initial_hidden]' value='" . $re['CabAttachment']['initial_available'] . "'>		<input type='hidden' name='data[Taxi][cab_attachment]' value='" . $re['CabAttachment']['id'] . "'>		</div>"                ;            } else {                echo "error";            }            die;        } else {            echo "error";            die;        }    }    public function add_vehicle() {        if (!empty($this->request->data)) {            $this->loadModel("Taxi.VendorVehicle");            $findData = $this->VendorVehicle->find('first', array('conditions' => array('taxi_id' => $this->request->data['VendorVehicle']['taxi_id'])));            if (empty($findData)) {                $data['taxi_id'] = $this->request->data['VendorVehicle']['taxi_id'];                $data['vendor_id'] = $this->request->data['VendorVehicle']['vendor_id'];                if ($this->VendorVehicle->save($data, 1)) {                    echo "1";                } else {                    echo "0";                }            } else {                echo "2";            }        }        die;    }    function taxi_chats($taxi_id = '') {        $taxi_data = $this->Taxi->find('first', array(            'conditions' => array(                'Taxi.id' => $taxi_id            ),        ));        if (!empty($taxi_data)) {            $this->loadModel('TaxiChat');            $limitValue = $limit = 25;            $this->set('limitValue', $limitValue);            $conditions = array("TaxiChat.taxi_id" => $taxi_data['Taxi']['id']);            $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);            $this->paginate = array(                'conditions' => $conditions,                'limit' => $limitValue,                'order' => array("id" => "DESC"),            );            $this->set('limit', $limit);            $this->set('records', $this->paginate('TaxiChat'));            $this->set('tab_open', 'taxis');            $this->set('page', $page);            $this->set('title_for_layout', 'Updates for Vehicle No : ' . $taxi_data['Taxi']['plate_no']);            if ($this->request->is('post')) {                if ($this->request->data['TaxiChat']['message'] == '') {                    $message = 'Please enter message';                    $this->Session->setFlash($message, 'error');                    $this->redirect(array('plugin' => 'taxi', 'controller' => 'taxis', 'action' => 'taxi_chats', $taxi_id));                }                $save_data['TaxiChat']['taxi_id'] = $taxi_data['Taxi']['id'];                $save_data['TaxiChat']['message'] = $this->request->data['TaxiChat']['message'];                $save_data['TaxiChat']['ip_address'] = $this->get_client_ip();                $save_data['TaxiChat']['created'] = date("Y-m-d H:i:s");                if ($this->Auth->user('user_role_id') == 1) {                    $contacted_user_type = 0;                } else {                    $contacted_user_type = 1;                }                $save_data['TaxiChat']['user_id'] = $this->Auth->user('id');                $save_data['TaxiChat']['user_type'] = $contacted_user_type;                $save_data['TaxiChat']['user_name'] = $this->Auth->user('firstname') ? $this->Auth->user('firstname') . " " . $this->Auth->user('lastname') : $this->Auth->user('username');                $this->TaxiChat->save($save_data);                $message = 'Message saved successfully';                $this->Session->setFlash($message, 'success');                $this->redirect(array('plugin' => 'taxi', 'controller' => 'taxis', 'action' => 'taxi_chats', $taxi_id));            }        } else {            $message = 'Invalid access!';            $this->Session->setFlash($message, 'error');            $this->redirect(array('plugin' => 'taxi', 'controller' => 'taxis', 'action' => 'index'));        }    }    function get_driver_ids() {        $this->autoRender = false;        $this->autoLayout = false;        if ($this->request->is('ajax')) {            $vendor_id = $this->request->data['vendor_id'];            $return_arr = array();            $this->loadModel('User');            $users = $this->User->find('all', array(                'fields' => array('DISTINCT id', 'firstname', 'lastname'),                'conditions' => array(                    'company_id' => $vendor_id,                    'user_role_id' => 4,                )            ));            //$user_list = implode(',', $users);            $user_detail = array();            foreach ($users as $key => $value) {                $user_detail[$value['User']['id']] = $value['User']['firstname'] . ' ' . $value['User']['lastname'];            }            //pr($user_detail);            $return_arr = $user_detail;//pr($return_arr); die;            echo json_encode($return_arr);            exit;        }    }    public function drivers() {        $limit = 10;        $this->autoRender = false;        $this->autoLayout = false;        $this->loadModel("User");        $conditions = array();        if ($this->request->is('Ajax')) {            $driver_name = $this->data['driver_name'];            $search_input = $this->data['search_input'];            $taxi_id = $this->data['taxi_id'];            $vendor_id = $this->data['vendor_id'];            if (!empty($search_input)) {                array_push(                        $conditions, array(                    array('User.uniqid LIKE' => "%" . $search_input . "%"),                        )                );            }            if (!empty($driver_name)) {                array_push(                        $conditions, array(                    'OR' => array(                        array('User.firstname LIKE' => "%" . $driver_name . "%"), array('User.lastname LIKE' => "%" . $driver_name . "%"),                    ))                );            }            array_push($conditions, array('User.user_role_id' => 4, 'company_id' => $vendor_id));            $current_page = isset($this->data['page']) && $this->data['page'] ? $this->data['page'] : 1;            $offset = $limit * ($current_page - 1);            $result = $this->User->find('all', array(                'fields' => array(                    'DISTINCT id', 'firstname', 'lastname','uniqid'                ),                'conditions' => $conditions,                'order' => array('User.id' => 'DESC'),                'offset' => $offset,                'limit' => $limit            ));            $total_records = $this->User->find('count', array(                'conditions' => $conditions,            ));            //echo $total_records;            //pr($blog_list);            $this->set('result', $result);            $pages = ceil($total_records > $limit ? $total_records / $limit : 1);            $end = ($current_page + 5) > $pages ? ($current_page + 5) - $pages : 0;            $start = $current_page > 5 ? ($current_page - 4 - $end) : 1;            $start1 = $current_page > 5 ? ($current_page - $end) : 1;            $start = $start > 0 ? $start : $start1;            //echo $start; exit;            $this->set("pages", $pages);            $this->set("page", $current_page);            $this->set("start", $start);            $this->set('taxi_id', $taxi_id);            $data = $this->render('drivers');            echo $data;            die();            exit;        }    }    function driver_lists($taxi_id='', $vendor_id='') {        $this->set('taxi_id', $taxi_id);        $this->set('vendor_id', $vendor_id);    }    function assign_driver($taxi_id, $driver_id) {        $data = array();        $data['user_id'] = $driver_id;        $data['ownership_type'] = 1;        $this->Taxi->id = $taxi_id;        if ($this->Taxi->save($data, false)) {            $this->Session->setFlash('Driver Assigned Successfully.', 'success');            //$this->redirect(array('action' => 'index'));			 $this->redirect($this->referer());        } else {            $this->Session->setFlash('Error.', 'success');            //$this->redirect(array('action' => 'index'));			 $this->redirect($this->referer());        }    }    /*     * **************************************End of the code**************************************************** */}